"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞

–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
- –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ —Å OpenAI-compatible API
- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ç—É–ª–∑–æ–≤
- –ê–≤—Ç–æ–Ω–æ–º–Ω—É—é —Ä–∞–±–æ—Ç—É –∞–≥–µ–Ω—Ç–∞
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ function calling
"""

import asyncio
import os
from pathlib import Path

from src.agents import AutonomousAgent
from src.agents.llm_connectors import OpenAIConnector


# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ç—É–ª–∑–æ–≤
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

async def web_search_tool(params: dict) -> dict:
    """
    –¢—É–ª–∑ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
    
    –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç API –≤—ã–∑–æ–≤ –∫ –ø–æ–∏—Å–∫–æ–≤–∏–∫—É
    """
    query = params.get("query", "")
    print(f"üîç Web Search: {query}")
    
    # –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–∏—Å–∫–∞
    return {
        "success": True,
        "query": query,
        "results": [
            {
                "title": "Example Result",
                "url": f"https://example.com/search?q={query}",
                "snippet": "This is an example search result..."
            }
        ]
    }


async def file_create_tool(params: dict) -> dict:
    """
    –¢—É–ª–∑ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    
    –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ KB
    """
    path = params.get("path", "")
    content = params.get("content", "")
    
    print(f"üìù File Create: {path}")
    print(f"Content length: {len(content)} characters")
    
    # –°–∏–º—É–ª—è—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    return {
        "success": True,
        "path": path,
        "message": f"File created: {path}"
    }


async def folder_create_tool(params: dict) -> dict:
    """
    –¢—É–ª–∑ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏
    """
    path = params.get("path", "")
    print(f"üìÅ Folder Create: {path}")
    
    return {
        "success": True,
        "path": path,
        "message": f"Folder created: {path}"
    }


async def analyze_content_tool(params: dict) -> dict:
    """
    –¢—É–ª–∑ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    """
    text = params.get("text", "")
    print(f"üî¨ Analyze Content: {len(text)} characters")
    
    # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑
    words = text.split()
    
    return {
        "success": True,
        "analysis": {
            "word_count": len(words),
            "char_count": len(text),
            "has_urls": "http" in text.lower(),
            "language": "unknown"
        }
    }


# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

async def example_basic():
    """
    –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä: –∞–≥–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏ —Å–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª
    """
    print("\n" + "="*80)
    print("–ü–†–ò–ú–ï–† 1: –ë–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ")
    print("="*80 + "\n")
    
    # –°–æ–∑–¥–∞—Ç—å LLM –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä
    llm_connector = OpenAIConnector(
        api_key=os.getenv("OPENAI_API_KEY", "test-key"),
        base_url=os.getenv("OPENAI_BASE_URL", "https://dashscope.aliyuncs.com/compatible-mode/v1"),
        model="qwen-max"
    )
    
    # –°–æ–∑–¥–∞—Ç—å –∞–≥–µ–Ω—Ç–∞
    agent = AutonomousAgent(
        llm_connector=llm_connector,
        max_iterations=5
    )
    
    # –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç—É–ª–∑—ã
    agent.register_tool("web_search", web_search_tool)
    agent.register_tool("file_create", file_create_tool)
    agent.register_tool("folder_create", folder_create_tool)
    agent.register_tool("analyze_content", analyze_content_tool)
    
    # –ó–∞–¥–∞—á–∞
    content = {
        "text": """
        –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ - —ç—Ç–æ —Ä–∞–∑–¥–µ–ª –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞,
        –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–ª—É—á—à–∞—Ç—å —Å–≤–æ—é —Ä–∞–±–æ—Ç—É
        –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—ã—Ç–∞ –±–µ–∑ —è–≤–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.
        
        –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è:
        1. –û–±—É—á–µ–Ω–∏–µ —Å —É—á–∏—Ç–µ–ª–µ–º (supervised learning)
        2. –û–±—É—á–µ–Ω–∏–µ –±–µ–∑ —É—á–∏—Ç–µ–ª—è (unsupervised learning)
        3. –û–±—É—á–µ–Ω–∏–µ —Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º (reinforcement learning)
        """,
        "urls": ["https://en.wikipedia.org/wiki/Machine_learning"]
    }
    
    # –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≥–µ–Ω—Ç–∞
    print("ü§ñ –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞...\n")
    
    result = await agent.process(content)
    
    print("\n" + "="*80)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢:")
    print("="*80)
    print(f"\n–ó–∞–≥–æ–ª–æ–≤–æ–∫: {result['title']}")
    print(f"\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {result['kb_structure'].category}")
    print(f"\n–ò—Ç–µ—Ä–∞—Ü–∏–π: {result['metadata']['iterations']}")
    print(f"\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç—É–ª–∑—ã: {result['metadata']['tools_used']}")
    print(f"\n--- Markdown ---\n{result['markdown'][:500]}...")


async def example_with_custom_instruction():
    """
    –ü—Ä–∏–º–µ—Ä —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    """
    print("\n" + "="*80)
    print("–ü–†–ò–ú–ï–† 2: –ö–∞—Å—Ç–æ–º–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –Ω–∞—É—á–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π")
    print("="*80 + "\n")
    
    custom_instruction = """
–¢—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞—É—á–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π.

–¢–≤–æ—è –∑–∞–¥–∞—á–∞:
1. –°–æ–∑–¥–∞–π –ø–ª–∞–Ω –∞–Ω–∞–ª–∏–∑–∞ (plan_todo)
2. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ç–∞—Ç—å—é –∏ –∏–∑–≤–ª–µ–∫–∏:
   - –û—Å–Ω–æ–≤–Ω—É—é –≥–∏–ø–æ—Ç–µ–∑—É
   - –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—é
   - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
   - –í—ã–≤–æ–¥—ã
3. –°–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
4. –°–æ—Ö—Ä–∞–Ω–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ñ–∞–π–ª—ã

–ò—Å–ø–æ–ª—å–∑—É–π —Ç—É–ª–∑—ã:
- plan_todo: –°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω
- analyze_content: –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
- folder_create: –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫
- file_create: –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤

–†–∞–±–æ—Ç–∞–π —Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–Ω–æ –∏ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ.
"""
    
    # –°–æ–∑–¥–∞—Ç—å LLM –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä
    llm_connector = OpenAIConnector(
        api_key=os.getenv("OPENAI_API_KEY", "test-key"),
        base_url=os.getenv("OPENAI_BASE_URL"),
        model="qwen-max"
    )
    
    agent = AutonomousAgent(
        llm_connector=llm_connector,
        instruction=custom_instruction,
        max_iterations=8
    )
    
    # –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç—É–ª–∑—ã
    agent.register_tool("analyze_content", analyze_content_tool)
    agent.register_tool("folder_create", folder_create_tool)
    agent.register_tool("file_create", file_create_tool)
    
    content = {
        "text": """
        Research Paper: Deep Learning for Natural Language Processing
        
        Abstract:
        This study investigates the application of deep neural networks
        to various NLP tasks, including sentiment analysis and machine translation.
        
        Methodology:
        We used transformer-based models with self-attention mechanisms.
        The dataset consisted of 1M sentences from diverse sources.
        
        Results:
        Our model achieved 94.3% accuracy on sentiment classification
        and BLEU score of 42.1 on translation tasks.
        
        Conclusion:
        Deep learning shows significant promise for NLP applications.
        """,
        "urls": ["https://arxiv.org/abs/example"]
    }
    
    print("ü§ñ –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞ —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π...\n")
    
    result = await agent.process(content)
    
    print("\n" + "="*80)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢:")
    print("="*80)
    print(f"\n–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:")
    for execution in result['metadata']['executions']:
        status = "‚úì" if execution['success'] else "‚úó"
        print(f"  {status} {execution['tool_name']}: {execution.get('result', {}).get('message', 'OK')}")


async def example_error_handling():
    """
    –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    """
    print("\n" + "="*80)
    print("–ü–†–ò–ú–ï–† 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫")
    print("="*80 + "\n")
    
    async def failing_tool(params: dict) -> dict:
        """–¢—É–ª–∑ –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ –ø–∞–¥–∞–µ—Ç"""
        raise Exception("This tool always fails!")
    
    # –°–æ–∑–¥–∞—Ç—å LLM –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä
    llm_connector = OpenAIConnector(
        api_key=os.getenv("OPENAI_API_KEY", "test-key"),
        base_url=os.getenv("OPENAI_BASE_URL"),
        model="qwen-max"
    )
    
    agent = AutonomousAgent(
        llm_connector=llm_connector,
        max_iterations=3
    )
    
    agent.register_tool("failing_tool", failing_tool)
    agent.register_tool("analyze_content", analyze_content_tool)
    
    content = {
        "text": "Test content for error handling"
    }
    
    print("ü§ñ –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞ (—Å –æ—à–∏–±–∫–∞–º–∏)...\n")
    
    result = await agent.process(content)
    
    print("\n" + "="*80)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢ (—Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫):")
    print("="*80)
    print(f"\n–û—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: {result['metadata']['context']['errors']}")
    print(f"\n–ê–≥–µ–Ω—Ç –≤—Å—ë —Ä–∞–≤–Ω–æ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç!")


# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

async def main():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–∏–º–µ—Ä—ã"""
    
    print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                  –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –ê–í–¢–û–ù–û–ú–ù–û–ì–û –ê–ì–ï–ù–¢–ê                ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

–í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã —Å –º–æ–∫-—Ç—É–ª–∑–∞–º–∏.
–î–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:
1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å openai: pip install openai
2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á–∏ –≤ .env
3. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Ç—É–ª–∑—ã

–ü—Ä–∏–º–µ—Ä—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç:
- –ö–∞–∫ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∞–≥–µ–Ω—Ç–∞
- –ö–∞–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç—É–ª–∑—ã
- –ö–∞–∫ –∞–≥–µ–Ω—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω–æ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á–∏
- –ö–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—à–∏–±–∫–∏
""")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API –∫–ª—é—á–µ–π
    if not os.getenv("OPENAI_API_KEY"):
        print("‚ö†Ô∏è  OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")
        print("   –ü—Ä–∏–º–µ—Ä—ã –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á\n")
    
    # –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã
    try:
        await example_basic()
        await example_with_custom_instruction()
        await example_error_handling()
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        print("\n–≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ–≤ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API.")
        print("–ü—Ä–∏–º–µ—Ä—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –∏ API –∞–≥–µ–Ω—Ç–∞.")
    
    print("\n" + "="*80)
    print("–ü—Ä–∏–º–µ—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    print("="*80 + "\n")


if __name__ == "__main__":
    asyncio.run(main())
