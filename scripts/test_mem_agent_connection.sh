#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è mem-agent –≤ HTTP —Ä–µ–∂–∏–º–µ
# Script for testing mem-agent HTTP connection

set -e

echo "========================================="
echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ mem-agent MCP —Å–µ—Ä–≤–µ—Ä–∞ (HTTP)"
echo "Testing mem-agent MCP server (HTTP)"
echo "========================================="
echo ""

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Check if we're in the right directory
if [ ! -f "src/mcp/mcp_hub_server.py" ]; then
    echo -e "${RED}‚ùå –û—à–∏–±–∫–∞: –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ (/workspace)${NC}"
    echo -e "${RED}‚ùå Error: Run script from project root (/workspace)${NC}"
    exit 1
fi

echo -e "${BLUE}=== 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞ / Checking HTTP server ===${NC}"
echo ""

# Check if MCP Hub server file exists
if [ -f "src/mcp/mcp_hub_server.py" ]; then
    echo -e "${GREEN}‚úÖ MCP Hub —Å–µ—Ä–≤–µ—Ä –Ω–∞–π–¥–µ–Ω / MCP Hub server found${NC}"
    echo "   üìÑ src/agents/mcp/mcp_hub_server.py"
else
    echo -e "${RED}‚ùå MCP Hub —Å–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω / MCP Hub server not found${NC}"
    exit 1
fi
echo ""

echo -e "${BLUE}=== 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π JSON MCP / Checking JSON MCP configs ===${NC}"
echo ""

# Find all settings.json files
FOUND_CONFIGS=0
HTTP_CONFIGS=0
STDIO_CONFIGS=0

# Check ~/.qwen/settings.json
if [ -f "$HOME/.qwen/settings.json" ]; then
    echo -e "${GREEN}‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è / Found config: ~/.qwen/settings.json${NC}"
    FOUND_CONFIGS=$((FOUND_CONFIGS + 1))

    # Check if it contains HTTP format (url field)
    if grep -q '"url".*"http://127.0.0.1:8765/sse"' "$HOME/.qwen/settings.json"; then
        echo -e "${GREEN}   ‚úÖ –§–æ—Ä–º–∞—Ç: HTTP/SSE${NC}"
        echo -e "   üì° URL: http://127.0.0.1:8765/sse"
        HTTP_CONFIGS=$((HTTP_CONFIGS + 1))
    # Check if it contains stdio format (command field)
    elif grep -q '"command".*"python3"' "$HOME/.qwen/settings.json"; then
        echo -e "${YELLOW}   ‚ö†Ô∏è  –§–æ—Ä–º–∞—Ç: STDIO (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π)${NC}"
        echo -e "${YELLOW}   ‚ö†Ô∏è  Format: STDIO (deprecated)${NC}"
        STDIO_CONFIGS=$((STDIO_CONFIGS + 1))
    else
        echo -e "${YELLOW}   ‚ö†Ô∏è  –§–æ—Ä–º–∞—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω / Unknown format${NC}"
    fi

    # Show mem-agent config snippet
    echo "   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ mem-agent / mem-agent content:"
    python3 -c "import json; data = json.load(open('$HOME/.qwen/settings.json')); print('  ', json.dumps(data.get('mcpServers', {}).get('mem-agent', {}), indent=4, ensure_ascii=False))" 2>/dev/null || echo "   Failed to parse JSON"
    echo ""
fi

# Check for knowledge base configs
KB_CONFIGS=$(find knowledge_bases -name "settings.json" 2>/dev/null | head -5)
if [ -n "$KB_CONFIGS" ]; then
    while IFS= read -r config_file; do
        if [ -f "$config_file" ]; then
            echo -e "${GREEN}‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è / Found config: $config_file${NC}"
            FOUND_CONFIGS=$((FOUND_CONFIGS + 1))

            # Check format
            if grep -q '"url".*"http://127.0.0.1:8765/sse"' "$config_file"; then
                echo -e "${GREEN}   ‚úÖ –§–æ—Ä–º–∞—Ç: HTTP/SSE${NC}"
                HTTP_CONFIGS=$((HTTP_CONFIGS + 1))
            elif grep -q '"command".*"python3"' "$config_file"; then
                echo -e "${YELLOW}   ‚ö†Ô∏è  –§–æ—Ä–º–∞—Ç: STDIO (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π)${NC}"
                STDIO_CONFIGS=$((STDIO_CONFIGS + 1))
            fi
            echo ""
        fi
    done <<< "$KB_CONFIGS"
fi

if [ $FOUND_CONFIGS -eq 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã / No configs found${NC}"
    echo "   –°–æ–∑–¥–∞–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é / Create config with:"
    echo "   python3 -m src.mcp.qwen_config_generator --http"
    echo ""
fi

echo "   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ / Statistics:"
echo "      –í—Å–µ–≥–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π / Total configs: $FOUND_CONFIGS"
echo "      HTTP —Ñ–æ—Ä–º–∞—Ç / HTTP format: $HTTP_CONFIGS"
echo "      STDIO —Ñ–æ—Ä–º–∞—Ç / STDIO format: $STDIO_CONFIGS"
echo ""

if [ $STDIO_CONFIGS -gt 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ STDIO —Ñ–æ—Ä–º–∞—Ç–µ!${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  STDIO configs detected!${NC}"
    echo "   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞ HTTP —Ñ–æ—Ä–º–∞—Ç / Recommended to update to HTTP:"
    echo "   python3 -m src.mcp.qwen_config_generator --http"
    echo ""
fi

echo -e "${BLUE}=== 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ MCP Hub / Testing MCP Hub startup ===${NC}"
echo ""

# Check Python dependencies
echo -e "${YELLOW}–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π / Checking dependencies...${NC}"
if python3 -c "from src.agents.mcp.memory.memory_storage import MemoryStorage" 2>/dev/null; then
    echo -e "${GREEN}‚úÖ MemoryStorage –º–æ–¥—É–ª—å –Ω–∞–π–¥–µ–Ω / MemoryStorage module found${NC}"
else
    echo -e "${RED}‚ùå MemoryStorage –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω / MemoryStorage module not found${NC}"
    echo "   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ / Install dependencies:"
    echo "   pip install -r requirements.txt"
fi

if python3 -c "import fastmcp" 2>/dev/null; then
    echo -e "${GREEN}‚úÖ fastmcp –º–æ–¥—É–ª—å –Ω–∞–π–¥–µ–Ω / fastmcp module found${NC}"
else
    echo -e "${RED}‚ùå fastmcp –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω / fastmcp module not found${NC}"
    echo "   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ / Install: pip install fastmcp"
fi
echo ""

echo -e "${BLUE}=== 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è / Testing HTTP connection ===${NC}"
echo ""

# Check if HTTP server is running
if curl -s --connect-timeout 2 http://127.0.0.1:8765/health >/dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç / HTTP server is running and responding${NC}"
    echo "   üì° URL: http://127.0.0.1:8765"
    echo "   üîå SSE endpoint: http://127.0.0.1:8765/sse"

    # Try to get server info
    HEALTH_RESPONSE=$(curl -s http://127.0.0.1:8765/health 2>/dev/null)
    if [ -n "$HEALTH_RESPONSE" ]; then
        echo "   ‚ù§Ô∏è  Health check: $HEALTH_RESPONSE"
    fi
    echo ""
else
    echo -e "${YELLOW}‚ö†Ô∏è  MCP Hub —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω / MCP Hub is not running${NC}"
    echo ""
    echo "   –î–ª—è –∑–∞–ø—É—Å–∫–∞ MCP Hub / To start MCP Hub:"
    echo "   ${GREEN}python3 -m src.mcp.mcp_hub_server${NC}"
    echo ""
    echo "   –ò–ª–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ / Or with parameters:"
    echo "   ${GREEN}python3 -m src.mcp.mcp_hub_server --port 8765 --host 127.0.0.1${NC}"
    echo ""
    echo "   –í —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ / In background:"
    echo "   ${GREEN}nohup python3 -m src.mcp.mcp_hub_server > mcp_hub.log 2>&1 &${NC}"
    echo ""
fi

echo "========================================="
echo "–ò—Ç–æ–≥–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ / Summary"
echo "========================================="
echo ""

if [ $HTTP_CONFIGS -gt 0 ]; then
    echo -e "${GREEN}‚úÖ –ù–∞–π–¥–µ–Ω—ã HTTP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: $HTTP_CONFIGS${NC}"
    echo -e "${GREEN}‚úÖ HTTP configs found: $HTTP_CONFIGS${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  HTTP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  No HTTP configs found${NC}"
fi

if [ $STDIO_CONFIGS -gt 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ STDIO –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: $STDIO_CONFIGS${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  Deprecated STDIO configs: $STDIO_CONFIGS${NC}"
fi
echo ""

echo "üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è / Documentation:"
echo "   ‚Ä¢ MCP Server Setup: docs_site/agents/mem-agent-setup.md"
echo "   ‚Ä¢ MCP Tools: docs_site/agents/mcp-tools.md"
echo "   ‚Ä¢ MCP Hub: src/mcp/mcp_hub_server.py"
echo "   ‚Ä¢ Config Generator: src/mcp/qwen_config_generator.py"
echo ""

echo "üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏ / Useful links:"
echo "   ‚Ä¢ MCP Protocol: https://modelcontextprotocol.io/"
echo "   ‚Ä¢ FastMCP: https://github.com/jlowin/fastmcp"
echo "   ‚Ä¢ SSE (Server-Sent Events): https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events"
echo ""

echo "üìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ / Next steps:"
if ! curl -s --connect-timeout 2 http://127.0.0.1:8765/health >/dev/null 2>&1; then
    echo "   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ MCP Hub / Start MCP Hub:"
    echo "      ${GREEN}python3 -m src.agents.mcp.mcp_hub_server${NC}"
fi
if [ $STDIO_CONFIGS -gt 0 ]; then
    echo "   2. –û–±–Ω–æ–≤–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞ HTTP / Update configs to HTTP:"
    echo "      ${GREEN}python3 -m src.mcp.qwen_config_generator --http${NC}"
fi
echo "   3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ qwen-code-cli / Restart qwen-code-cli"
echo "   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å mem-agent (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 'Connected' —Å 3 tools)"
echo "      Check mem-agent status (should be 'Connected' with 3 tools)"
echo ""
