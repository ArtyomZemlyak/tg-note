"""
Response Formatter
Unified response formatting for all agents in Telegram
"""

from typing import Dict, List, Optional, Any
from pathlib import Path
from src.bot.settings_manager import SettingsManager
from src.bot.utils import escape_markdown, escape_markdown_url, split_long_message


class BaseField:
    """Base class for response fields."""
    
    def __init__(self, name: str, text: str):
        self.name = name
        self.text = text
    
    def parse(self, response_data: Dict, **kwargs) -> Any:
        """
        Parse field from response data.
        
        Args:
            response_data: Agent response data
            **kwargs: Additional arguments for parsing
            
        Returns:
            Any: Parsed field data
        """
        return response_data.get(self.name, "")
    
    def to_md(self, value: Any) -> str:
        """
        Convert field value to markdown format.
        
        Args:
            value: Field value to convert
            
        Returns:
            str: Markdown formatted string
        """
        if value is None:
            return ""
        return str(value)
    
    def generate_example(self):
        """
        Generate example value for the field.
        
        Returns:
            Example value for the field
        """
        return self.text


class SummaryField(BaseField):
    """Summary field for response format."""
    
    def __init__(self):
        super().__init__(
            "summary",
            "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã (3-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)"
        )


class AnswerField(BaseField):
    """Answer field for response format."""
    
    def __init__(self):
        super().__init__(
            "answer",
            '–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª –≤–æ–ø—Ä–æ—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü–æ–ª–µ "answer" –∑–∞–ø–æ–ª–Ω—è–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å'
        )


class FilesCreatedField(BaseField):
    """Files created field for response format."""
    
    def __init__(self, github_url: str = None):
        super().__init__(
            "files_created",
            "–°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ)"
        )
        self.github_url = github_url
    
    def generate_example(self):
        """Generate example value for files created field."""
        ex = ["–ø—É—Ç—å/–∫/—Ñ–∞–π–ª—É1.md", "–ø—É—Ç—å/–∫/—Ñ–∞–π–ª—É2.md"]
        return f"{ex}  # {self.text}"
    
    def parse(self, response_data: Dict, **kwargs) -> Any:
        """Parse files created field with formatting."""
        files_created = response_data.get("files_created", [])
        # Implementation will be similar to _format_file_changes for created files
        return files_created
    
    def to_md(self, value: Any) -> str:
        """
        Convert files created list to markdown format.
        
        Args:
            value: List of created files
            
        Returns:
            str: Markdown formatted string
        """
        if not value:
            return ""
        
        lines = ["‚úÖ **–°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:**"]
        for file_path in value:
            file_path = escape_markdown_url(file_path)
            if self.github_url:
                url = escape_markdown_url(f"{self.github_url}/{file_path}")
                lines.append(f"- [{file_path}]({url})")
            else:
                lines.append(f"- {file_path}")
        return "\n".join(lines)


class FilesEditedField(BaseField):
    """Files edited field for response format."""
    
    def __init__(self, github_url: str = None):
        super().__init__(
            "files_edited",
            "–°–ø–∏—Å–æ–∫ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ)"
        )
        self.github_url = github_url
    
    def generate_example(self):
        """Generate example value for files edited field."""
        ex = ["–ø—É—Ç—å/–∫/—Ñ–∞–π–ª—É3.md"]
        return f"{ex}  # {self.text}"
    
    def parse(self, response_data: Dict, **kwargs) -> Any:
        """Parse files edited field with formatting."""
        files_edited = response_data.get("files_edited", [])
        # Implementation will be similar to _format_file_changes for edited files
        return files_edited
    
    def to_md(self, value: Any) -> str:
        """
        Convert files edited list to markdown format.
        
        Args:
            value: List of edited files
            
        Returns:
            str: Markdown formatted string
        """
        if not value:
            return ""
        
        lines = ["‚úèÔ∏è **–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:**"]
        for file_path in value:
            file_path = escape_markdown_url(file_path)
            if self.github_url:
                url = escape_markdown_url(f"{self.github_url}/{file_path}")
                lines.append(f"- [{file_path}]({url})")
            else:
                lines.append(f"- {file_path}")
        return "\n".join(lines)


class FilesDeletedField(BaseField):
    """Files deleted field for response format."""
    
    def __init__(self, github_url: str = None):
        super().__init__(
            "files_deleted",
            "–°–ø–∏—Å–æ–∫ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª–µ–Ω–æ)"
        )
        self.github_url = github_url
    
    def generate_example(self):
        """Generate example value for files deleted field."""
        ex = ["–ø—É—Ç—å/–∫/—Ñ–∞–π–ª—É4.md"]
        return f"{ex}  # {self.text}"
    
    def parse(self, response_data: Dict, **kwargs) -> Any:
        """Parse files deleted field with formatting."""
        files_deleted = response_data.get("files_deleted", [])
        # Implementation will be similar to _format_file_changes for deleted files
        return files_deleted
    
    def to_md(self, value: Any) -> str:
        """
        Convert files deleted list to markdown format.
        
        Args:
            value: List of deleted files
            
        Returns:
            str: Markdown formatted string
        """
        if not value:
            return ""
        
        lines = ["‚ùå **–£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:**"]
        for file_path in value:
            file_path = escape_markdown_url(file_path)
            if self.github_url:
                url = escape_markdown_url(f"{self.github_url}/{file_path}")
                lines.append(f"- [{file_path}]({url})")
            else:
                lines.append(f"- {file_path}")
        return "\n".join(lines)


class FoldersCreatedField(BaseField):
    """Folders created field for response format."""
    
    def __init__(self, github_url: str = None):
        super().__init__(
            "folders_created",
            "–°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫ (–ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ)"
        )
        self.github_url = github_url
    
    def generate_example(self):
        """Generate example value for folders created field."""
        ex = ["–ø—É—Ç—å/–∫/–ø–∞–ø–∫–µ"]
        return f"{ex}  # {self.text}"
    
    def parse(self, response_data: Dict, **kwargs) -> Any:
        """Parse folders created field with formatting."""
        folders_created = response_data.get("folders_created", [])
        # Implementation will be similar to _format_file_changes for folders
        return folders_created
    
    def to_md(self, value: Any) -> str:
        """
        Convert folders created list to markdown format.
        
        Args:
            value: List of created folders
            
        Returns:
            str: Markdown formatted string
        """
        if not value:
            return ""
        
        lines = ["üìÅ **–°–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–∞–ø–∫–∏:**"]
        for folder_path in value:
            folder_path = escape_markdown_url(folder_path)
            if self.github_url:
                url = escape_markdown_url(f"{self.github_url}/{folder_path}")
                lines.append(f"- [{folder_path}]({url})")
            else:
                lines.append(f"- {folder_path}")
        return "\n".join(lines)


class LinksField(BaseField):
    """Links field for response format."""
    
    def __init__(self, github_url: str = None):
        super().__init__(
            "links",
            '–°–ø–∏—Å–æ–∫ —Å–≤—è–∑–µ–π —Å –¥—Ä—É–≥–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π (—Ç–æ–ª—å–∫–æ —Å –°–£–©–ï–°–¢–í–£–Æ–©–ò–ú–ò —Ñ–∞–π–ª–∞–º–∏, –Ω–µ —Å —Ñ–∞–π–ª–∞–º–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–º–∏ –≤ —Ç–µ–∫—É—â–µ–º –∑–∞–ø—É—Å–∫–µ). –í –ø–æ–ª–µ "links" —É–∫–∞–∑—ã–≤–∞–π —Ç–æ–ª—å–∫–æ —Å–≤—è–∑–∏ —Å –°–£–©–ï–°–¢–í–£–Æ–©–ò–ú–ò —Ñ–∞–π–ª–∞–º–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π, –Ω–µ —Å —Ñ–∞–π–ª–∞–º–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–º–∏ –≤ —Ç–µ–∫—É—â–µ–º –∑–∞–ø—É—Å–∫–µ. –î–ª—è –∫–∞–∂–¥–æ–π —Å–≤—è–∑–∏ –≤ "links" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–π —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –æ–±—ä—è—Å–Ω—è—é—â–µ–µ –ø—Ä–∏—Ä–æ–¥—É —Å–≤—è–∑–∏'
        )
        self.github_url = github_url
    
    def generate_example(self):
        """Generate example value for links field."""
        ex = [
            {"file": "–ø—É—Ç—å/–∫/—Å–≤—è–∑–∞–Ω–Ω–æ–º—É1.md", "description": "–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–≤—è–∑–∏ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)"},
            {"file": "–ø—É—Ç—å/–∫/—Å–≤—è–∑–∞–Ω–Ω–æ–º—É2.md", "description": "–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–≤—è–∑–∏ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)"}
        ]
        return f"""
        {ex} # –í –ø–æ–ª–µ `links` –≤–æ–∑–≤—Ä–∞—â–∞–π –º–∞—Å—Å–∏–≤ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–≤—è–∑–µ–π —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π:
# - –ö–∞–∂–¥–∞—è —Å–≤—è–∑—å ‚Äî –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª—è–º–∏ `file` (–ø—É—Ç—å –∫ —Å–≤—è–∑–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É) –∏ `description`.
# - `description` –î–û–õ–ñ–ï–ù –±—ã—Ç—å —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–º (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è): –æ–±—ä—è—Å–Ω–∏ –ø—Ä–∏—Ä–æ–¥—É —Å–≤—è–∑–∏ (–æ–±—â–µ–µ, —Ä–∞–∑–ª–∏—á–∏—è, –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å, —á–∞—Å—Ç—å-—Ü–µ–ª–æ–µ, –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è —Ç–µ–≥–∏/–ø–æ–Ω—è—Ç–∏—è).
# - –ò–∑–±–µ–≥–∞–π —à–∞–±–ª–æ–Ω–æ–≤ –≤—Ä–æ–¥–µ "–°–≤—è–∑–∞–Ω–Ω–∞—è —Ç–µ–º–∞" –∏–ª–∏ –æ–¥–Ω–æ—Å–ª–æ–≤–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π.
# - –ù–µ –≤–∫–ª—é—á–∞–π —Å–≤—è–∑–∏ –Ω–∞ —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–ª –≤ —Ç–µ–∫—É—â–µ–º –∑–∞–ø—É—Å–∫–µ.
# {self.text}
"""
    
    def parse(self, response_data: Dict, **kwargs) -> Any:
        """Parse links field with formatting."""
        links = response_data.get("links", [])
        return links
    
    def to_md(self, value: Any) -> str:
        """
        Convert links list to markdown format.
        
        Args:
            value: List of links
            
        Returns:
            str: Markdown formatted string
        """
        if not value:
            return ""
        
        lines = ["**–°–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:**"]
        for link in value:
            if isinstance(link, dict):
                file_path = link.get("file", "")
                description = link.get("description", "")
                file_path = escape_markdown_url(file_path)
                if self.github_url:
                    url = escape_markdown_url(f"{self.github_url}/{file_path}")
                    lines.append(f"- [{file_path}]({url}): {description}")
                else:
                    lines.append(f"- {file_path}: {description}")
            else:
                link = escape_markdown_url(link)
                lines.append(f"- {str(link)}")
        return "\n".join(lines)


class ResponseFormatter:
    """Class to represent and generate response format for agent prompts."""
    
    def __init__(self, github_url: str = None):
        self.fields: list[BaseField] = [
            SummaryField(),
            AnswerField(),
            FilesCreatedField(github_url),
            FilesEditedField(github_url),
            FilesDeletedField(github_url),
            FoldersCreatedField(github_url),
            LinksField(github_url)
        ]

    def generate_prompt_text(self) -> str:
        """
        Generate the complete prompt text for ResponseFormatter.
        
        Returns:
            str: Formatted prompt text
        """
        from src.prompts.registry import prompt_registry
        
        # Load the prompt template
        prompt_template = prompt_registry.get("response_formatter.instruction", locale="ru")
        
        # Generate the values for placeholders
        example = {
            field.name: field.generate_example()
            for field in self.fields
        }

        # Convert to JSON string for use in prompt
        import json
        response_format = json.dumps(example, ensure_ascii=False, indent=2)
        
        # Replace placeholders with actual values
        prompt_text = prompt_template.replace("{response_format}", response_format)
        
        return prompt_text

    def parse(self, response_text: str) -> Dict[str, Any]:
        """
        Parse agent response text to extract structured data.
        
        Args:
            response_text: Agent response text containing agent-result block
            
        Returns:
            Dict with parsed response data
        """
        import re
        import json
        
        # Find agent-result block
        match = re.search(r"```agent-result\s*\n(.*?)\n```", response_text, re.DOTALL)
        if match:
            try:
                json_text = match.group(1).strip()
                # Fix unescaped newlines in JSON strings
                json_text = self._fix_json_newlines(json_text)
                data = json.loads(json_text)
                parsed_data = {
                    field.name: field.parse(data)
                    for field in self.fields
                }
                return parsed_data
            except json.JSONDecodeError:
                # If JSON parsing fails, return empty dict
                pass
        
        # Return empty dict if no valid agent-result block found
        return {}
    
    def _fix_json_newlines(self, json_text: str) -> str:
        """
        Fix unescaped newlines in JSON strings.
        
        Args:
            json_text: Raw JSON text
            
        Returns:
            Fixed JSON text
        """
        import re
        
        # Pattern to match string values and escape newlines
        def fix_string_value(match):
            key = match.group(1)
            value = match.group(2)
            # Escape newlines, carriage returns, and tabs
            value = value.replace("\n", "\\n").replace("\r", "\\r").replace("\t", "\\t")
            return f'"{key}": "{value}"'
        
        # Pattern for key-value pairs in JSON
        pattern = r'"([^"]+)":\s*"([^"]*(?:\\.[^"]*)*)"'
        fixed_json = re.sub(pattern, fix_string_value, json_text)
        
        # Remove trailing commas before closing braces/brackets
        fixed_json = re.sub(r",\s*}", "}", fixed_json)
        fixed_json = re.sub(r",\s*]", "]", fixed_json)
        
        return fixed_json
    
    def to_md(self, response_data: Dict[str, Any]) -> str:
        """
        Convert response data to markdown format.
        
        Args:
            response_data: Parsed response data
            
        Returns:
            str: Markdown formatted string
        """
        lines = [
            field.to_md(response_data.get(field.name, None))
            for field in self.fields
        ]

        return "\n".join(lines)
