"""
Telegram Bot Handlers (Refactored)
Handles all incoming message events from Telegram (fully async)
Follows SOLID principles - uses services for business logic
"""

from loguru import logger
from telebot.async_telebot import AsyncTeleBot
from telebot.types import Message
from typing import Optional

from src.bot.bot_port import BotPort
from src.bot.message_mapper import MessageMapper
from src.bot.settings_manager import SettingsManager
from src.knowledge_base.repository import RepositoryManager
from src.knowledge_base.user_settings import UserSettings
from src.processor.message_aggregator import MessageGroup
from src.services.interfaces import IMessageProcessor, IUserContextManager
from src.tracker.processing_tracker import ProcessingTracker


class BotHandlers:
    """
    Telegram bot message handlers (refactored with SOLID principles)

    Responsibilities (reduced to coordination only):
    - Register message handlers with Telegram bot
    - Route commands to appropriate handlers
    - Delegate business logic to services
    """

    def __init__(
        self,
        bot: BotPort,
        async_bot: Optional[AsyncTeleBot] = None,
        tracker: ProcessingTracker = None,
        repo_manager: RepositoryManager = None,
        user_settings: UserSettings = None,
        settings_manager: SettingsManager = None,
        user_context_manager: IUserContextManager = None,
        message_processor: IMessageProcessor = None,
        settings_handlers=None,
    ):
        """
        Initialize bot handlers

        Args:
            bot: Bot messaging interface (transport abstraction)
            async_bot: Telegram bot instance (for handler registration)
            tracker: Processing tracker
            repo_manager: Repository manager
            user_settings: User settings
            settings_manager: Settings manager
            user_context_manager: User context manager service
            message_processor: Message processor service
            settings_handlers: Settings handlers (optional)
        """
        self.bot = bot
        self.async_bot = async_bot
        self.tracker = tracker
        self.repo_manager = repo_manager
        self.user_settings = user_settings
        self.settings_manager = settings_manager
        self.user_context_manager = user_context_manager
        self.message_processor = message_processor
        self.settings_handlers = settings_handlers
        self.logger = logger

        # Set up timeout callback for message processor
        self.user_context_manager.timeout_callback = self._handle_timeout

        self.logger.info("BotHandlers initialized (refactored)")

    async def register_handlers_async(self):
        """Register all bot handlers (async)"""
        if not self.async_bot:
            # Nothing to register if transport bot is not provided (used in unit tests)
            return

        # Command handlers
        self.async_bot.message_handler(commands=["start"])(self.handle_start)
        self.async_bot.message_handler(commands=["help"])(self.handle_help)
        self.async_bot.message_handler(commands=["status"])(self.handle_status)
        self.async_bot.message_handler(commands=["setkb"])(self.handle_setkb)
        self.async_bot.message_handler(commands=["kb"])(self.handle_kb_info)
        self.async_bot.message_handler(commands=["note"])(self.handle_note_mode)
        self.async_bot.message_handler(commands=["ask"])(self.handle_ask_mode)
        self.async_bot.message_handler(commands=["agent"])(self.handle_agent_mode)
        self.async_bot.message_handler(commands=["resetcontext"])(self.handle_reset_context)

        # All supported content types (decoupled from media processing)
        supported_content_types = [
            "text",
            "photo",
            "document",
            "video",
            "audio",
            "voice",
            "video_note",
            "animation",
            "sticker",
        ]

        # Forwarded messages (all content types)
        self.async_bot.message_handler(
            content_types=supported_content_types, func=lambda m: self._is_forwarded_message(m)
        )(self.handle_forwarded_message)

        # Regular messages (all content types, unified handler)
        self.async_bot.message_handler(
            content_types=supported_content_types,
            func=lambda m: not self._is_forwarded_message(m) and not self._is_command_message(m),
        )(self.handle_message)

    def _is_forwarded_message(self, message: Message) -> bool:
        """Check if message is forwarded"""
        if message.forward_date is not None and message.forward_date > 0:
            return True
        return bool(
            message.forward_from
            or message.forward_from_chat
            or (message.forward_sender_name and message.forward_sender_name.strip())
        )

    def _is_command_message(self, message: Message) -> bool:
        """Check if message is a command"""
        return message.text and message.text.startswith("/")

    async def invalidate_user_cache(self, user_id: int) -> None:
        """Invalidate cached user-specific components"""
        await self.user_context_manager.invalidate_cache(user_id)

    def start_background_tasks(self) -> None:
        """Start background tasks"""
        self.logger.info("Starting background tasks")

    def stop_background_tasks(self) -> None:
        """Stop background tasks (synchronous for test friendliness)"""
        self.logger.info("Stopping background tasks")
        try:
            # In tests cleanup can be a regular Mock
            result = self.user_context_manager.cleanup()
            # If coroutine returned, schedule fire-and-forget to avoid await in tests
            import asyncio

            if asyncio.iscoroutine(result):
                asyncio.get_event_loop().create_task(result)
        except Exception as e:
            self.logger.warning(f"Error stopping background tasks: {e}")

    async def _handle_timeout(self, chat_id: int, group: MessageGroup) -> None:
        """Handle timed-out message group"""
        try:
            self.logger.info(
                f"[HANDLER] Processing timed-out group for chat {chat_id} "
                f"with {len(group.messages)} messages"
            )

            processing_msg = await self.bot.send_message(
                chat_id, "üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –≥—Ä—É–ø–ø—É —Å–æ–æ–±—â–µ–Ω–∏–π..."
            )

            await self.message_processor.process_message_group(
                group, processing_msg.message_id, chat_id
            )

        except Exception as e:
            self.logger.error(
                f"Error handling timed-out group for chat {chat_id}: {e}", exc_info=True
            )

    # Command handlers

    async def handle_start(self, message: Message) -> None:
        """Handle /start command - welcome message"""
        self.logger.info(f"[HANDLER] Start command from user {message.from_user.id}")

        welcome_text = (
            "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ tg-note!\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–º–µ—Ç–∫–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –∏–∑ –≤–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ä–µ–ø–æ—Å—Ç–æ–≤.\n\n"
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ:\n"
            "‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            "‚Ä¢ –†–µ–ø–æ—Å—Ç—ã –Ω–æ–≤–æ—Å—Ç–µ–π –∏–ª–∏ —Å—Ç–∞—Ç–µ–π\n"
            "‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ø–æ–¥–ø–∏—Å—è–º–∏\n"
            "‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã\n"
            "‚Ä¢ –í–∏–¥–µ–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º\n"
            "‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            "‚Ä¢ –ê—É–¥–∏–æ —Ñ–∞–π–ª—ã\n\n"
            "–ë–æ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π.\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
            "/status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏\n\n"
            "–†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã:\n"
            "/note - —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)\n"
            "/ask - —Ä–µ–∂–∏–º –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π\n"
            "/agent - —Ä–µ–∂–∏–º –∞–≥–µ–Ω—Ç–∞ (–ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø)"
        )

        await self.bot.reply_to(message, welcome_text)

    async def handle_help(self, message: Message) -> None:
        """Handle /help command - show help text"""
        self.logger.info(f"[HANDLER] Help command from user {message.from_user.id}")

        help_text = (
            "üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ tg-note\n\n"
            "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–º–µ—Ç–∫–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞:\n"
            "‚Ä¢ üìù –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            "‚Ä¢ üîÑ –†–µ–ø–æ—Å—Ç—ã (forwarded messages)\n"
            "‚Ä¢ üì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ø–æ–¥–ø–∏—Å—è–º–∏\n"
            "‚Ä¢ üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã (PDF, DOCX, PPTX, XLSX –∏ –¥—Ä.)\n"
            "‚Ä¢ üé• –í–∏–¥–µ–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º (—Ç–µ–∫—Å—Ç –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è)\n"
            "‚Ä¢ üéµ –ê—É–¥–∏–æ —Ñ–∞–π–ª—ã (—Ç–µ–∫—Å—Ç –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è)\n"
            "‚Ä¢ üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–µ–∫—Å—Ç –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è)\n\n"
            "–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
            "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ä–µ–ø–æ—Å—Ç\n"
            "2. –ë–æ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç\n"
            "3. –ò–∑–≤–ª–µ—á–µ—Ç –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n"
            "4. –°–æ—Ö—Ä–∞–Ω–∏—Ç –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown\n\n"
            "‚ö†Ô∏è –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –î–ª—è –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ –∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç/–ø–æ–¥–ø–∏—Å—å. "
            "–ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±—É–¥—É—â–µ–º.\n\n"
            "**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
            "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/status - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏\n"
            "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "**–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:**\n"
            "/setkb <name|url> - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π\n"
            "/kb - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π\n\n"
            "**–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**\n"
            "/settings - –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫\n"
            "/viewsettings - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫\n"
            "/kbsettings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π\n"
            "/agentsettings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≥–µ–Ω—Ç–∞\n\n"
            "**MCP —Å–µ—Ä–≤–µ—Ä—ã:**\n"
            "/addmcpserver - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π MCP —Å–µ—Ä–≤–µ—Ä\n"
            "/listmcpservers - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö MCP —Å–µ—Ä–≤–µ—Ä–æ–≤\n"
            "/mcpstatus - —Å—Ç–∞—Ç—É—Å MCP —Å–µ—Ä–≤–µ—Ä–æ–≤\n"
            "/enablemcp <name> - –≤–∫–ª—é—á–∏—Ç—å MCP —Å–µ—Ä–≤–µ—Ä\n"
            "/disablemcp <name> - –≤—ã–∫–ª—é—á–∏—Ç—å MCP —Å–µ—Ä–≤–µ—Ä\n"
            "/removemcp <name> - —É–¥–∞–ª–∏—Ç—å MCP —Å–µ—Ä–≤–µ—Ä\n\n"
            "**–†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã:**\n"
            "/note - —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)\n"
            "  –í —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –±–æ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–º–µ—Ç–∫–∏\n\n"
            "/ask - —Ä–µ–∂–∏–º –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π\n"
            "  –í —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∞–≥–µ–Ω—Ç—É –æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π\n\n"
            "/agent - —Ä–µ–∂–∏–º –∞–≥–µ–Ω—Ç–∞ (–ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø)\n"
            "  –í —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –∞–≥–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ª—é–±—ã–µ –∑–∞–¥–∞—á–∏: –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã,\n"
            "  –¥–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ø–µ—Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∏ —Ç.–¥.\n\n"
            "**–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:**\n"
            "/resetcontext - —Å–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞\n"
            "  –ë–æ—Ç –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.\n"
            "  –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞.\n\n"
            "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!"
        )

        await self.bot.reply_to(message, help_text)

    async def handle_status(self, message: Message) -> None:
        """Handle /status command - show bot status and statistics"""
        self.logger.info(f"[HANDLER] Status command from user {message.from_user.id}")

        try:
            stats = self.tracker.get_stats()
            user_kb = self.user_settings.get_user_kb(message.from_user.id)

            kb_info = "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setkb)"
            if isinstance(user_kb, dict) and user_kb.get("kb_name") and user_kb.get("kb_type"):
                kb_info = f"{user_kb['kb_name']} ({user_kb['kb_type']})"

            kb_git_enabled = self.settings_manager.get_setting(
                message.from_user.id, "KB_GIT_ENABLED"
            )
            current_mode = self.user_context_manager.get_user_mode(message.from_user.id)

            # Determine mode emoji and name
            if current_mode == "note":
                mode_emoji = "üìù"
                mode_name = "–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"
            elif current_mode == "ask":
                mode_emoji = "ü§î"
                mode_name = "–í–æ–ø—Ä–æ—Å—ã –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π"
            else:  # agent mode
                mode_emoji = "ü§ñ"
                mode_name = "–ê–≥–µ–Ω—Ç (–ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø)"

            status_text = (
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏\n\n"
                f"–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_processed']}\n"
                f"–û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: {stats['pending_groups']}\n"
                f"–ü–æ—Å–ª–µ–¥–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: {stats.get('last_processed', '–ù–∏–∫–æ–≥–¥–∞')}\n\n"
                f"–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: {kb_info}\n"
                f"Git –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {'–í–∫–ª—é—á–µ–Ω–∞' if kb_git_enabled else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}\n\n"
                f"{mode_emoji} –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {mode_name}\n"
                f"–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å: /note | /ask | /agent"
            )
        except Exception as e:
            self.logger.error(f"Error getting status: {e}")
            status_text = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"

        await self.bot.reply_to(message, status_text)

    async def handle_setkb(self, message: Message) -> None:
        """Handle /setkb command - configure knowledge base"""
        self.logger.info(f"[HANDLER] Setkb command from user {message.from_user.id}")

        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            help_text = (
                "üìö –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
                "/setkb <–Ω–∞–∑–≤–∞–Ω–∏–µ> - —Å–æ–∑–¥–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π\n"
                "/setkb <github_url> - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "/setkb my-notes\n"
                "/setkb https://github.com/user/knowledge-base\n"
            )
            await self.bot.reply_to(message, help_text)
            return

        kb_input = args[1].strip()

        if (
            kb_input.startswith("http://")
            or kb_input.startswith("https://")
            or kb_input.startswith("git@")
        ):
            success, msg, kb_path = self.repo_manager.clone_github_kb(kb_input)

            if success:
                kb_name = kb_path.name
                self.user_settings.set_user_kb(
                    message.from_user.id, kb_name, kb_type="github", github_url=kb_input
                )
                await self.bot.reply_to(
                    message, f"‚úÖ {msg}\n\n–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {kb_input}\n–õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å: {kb_path}"
                )
            else:
                await self.bot.reply_to(message, f"‚ùå {msg}")
        else:
            success, msg, kb_path = self.repo_manager.init_local_kb(kb_input)

            if success:
                self.user_settings.set_user_kb(message.from_user.id, kb_input, kb_type="local")
                await self.bot.reply_to(
                    message,
                    f"‚úÖ {msg}\n\n–õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å: {kb_path}\n" f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π",
                )
            else:
                await self.bot.reply_to(message, f"‚ùå {msg}")

    async def handle_kb_info(self, message: Message) -> None:
        """Handle /kb command - show knowledge base information"""
        self.logger.info(f"[HANDLER] KB info command from user {message.from_user.id}")

        user_kb = self.user_settings.get_user_kb(message.from_user.id)

        if not user_kb:
            await self.bot.reply_to(
                message, "‚ùå –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setkb –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
            )
            return

        kb_path = self.repo_manager.get_kb_path(user_kb["kb_name"])

        info_text = (
            f"üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π\n\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {user_kb['kb_name']}\n"
            f"–¢–∏–ø: {user_kb['kb_type']}\n"
        )

        if user_kb["kb_type"] == "github":
            info_text += f"GitHub: {user_kb.get('github_url', 'N/A')}\n"

        if kb_path:
            info_text += f"–õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å: {kb_path}\n"
        else:
            info_text += "‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n"

        await self.bot.reply_to(message, info_text)

    async def handle_note_mode(self, message: Message) -> None:
        """
        Handle /note command - activate note creation mode.

        In this mode, user messages are analyzed and saved to the knowledge base.
        The bot extracts key information and structures it as markdown notes.

        Args:
            message: Telegram message containing the /note command
        """
        self.logger.info(f"[HANDLER] Note mode command from user {message.from_user.id}")

        self.user_context_manager.set_user_mode(message.from_user.id, "note")

        await self.bot.reply_to(
            message,
            "üìù –†–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π.\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–µ–ø–æ—Å—Ç –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n\n"
            "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å: /ask | /agent",
        )

    async def handle_ask_mode(self, message: Message) -> None:
        """
        Handle /ask command - activate question answering mode.

        In this mode, the agent searches the knowledge base to answer user questions.
        Requires a configured knowledge base (/setkb).

        Args:
            message: Telegram message containing the /ask command
        """
        self.logger.info(f"[HANDLER] Ask mode command from user {message.from_user.id}")

        user_kb = self.user_settings.get_user_kb(message.from_user.id)

        # Treat non-dict or missing fields as not configured
        if not (isinstance(user_kb, dict) and user_kb.get("kb_name")):
            await self.bot.reply_to(
                message,
                "‚ùå –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setkb –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–∂–∏–º–∞ –≤–æ–ø—Ä–æ—Å–æ–≤.",
            )
            return

        self.user_context_manager.set_user_mode(message.from_user.id, "ask")

        await self.bot.reply_to(
            message,
            "ü§î –†–µ–∂–∏–º –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∞–≥–µ–Ω—Ç—É –æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º –≤–∞—à–µ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π.\n"
            "–ê–≥–µ–Ω—Ç –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.\n\n"
            "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å: /note | /agent",
        )

    async def handle_agent_mode(self, message: Message) -> None:
        """
        Handle /agent command - activate autonomous agent mode.

        In this mode, the agent has full access to the knowledge base and can:
        - Answer questions
        - Add new information
        - Edit existing notes
        - Restructure the knowledge base
        - Perform any KB-related tasks autonomously

        Requires a configured knowledge base (/setkb).

        Args:
            message: Telegram message containing the /agent command
        """
        self.logger.info(f"[HANDLER] Agent mode command from user {message.from_user.id}")

        user_kb = self.user_settings.get_user_kb(message.from_user.id)

        # Treat non-dict or missing fields as not configured
        if not (isinstance(user_kb, dict) and user_kb.get("kb_name")):
            await self.bot.reply_to(
                message,
                "‚ùå –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setkb –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–∂–∏–º–∞ –∞–≥–µ–Ω—Ç–∞.",
            )
            return

        self.user_context_manager.set_user_mode(message.from_user.id, "agent")

        await self.bot.reply_to(
            message,
            "ü§ñ –†–µ–∂–∏–º –∞–≥–µ–Ω—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
            "–¢–µ–ø–µ—Ä—å –∞–≥–µ–Ω—Ç –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –ª—é–±—ã–µ –∑–∞–¥–∞—á–∏ —Å –≤–∞—à–µ–π –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π:\n"
            "‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n"
            "‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n"
            "‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–º–µ—Ç–∫–∏\n"
            "‚Ä¢ –ü–µ—Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π\n"
            "‚Ä¢ –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!\n\n"
            "–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, –∏ –∞–≥–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç –∑–∞–¥–∞—á—É –∞–≤—Ç–æ–Ω–æ–º–Ω–æ.\n\n"
            "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å: /note | /ask",
        )

    async def handle_reset_context(self, message: Message) -> None:
        """Handle /resetcontext command - clear conversation context"""
        self.logger.info(f"[HANDLER] Reset context command from user {message.from_user.id}")

        # Clear conversation context for this user
        self.user_context_manager.clear_conversation_context(message.from_user.id)

        # Set reset point to current message ID
        # Future messages will start a new context from here
        self.user_context_manager.reset_conversation_context(
            message.from_user.id, message.message_id
        )

        await self.bot.reply_to(
            message,
            "üîÑ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å–±—Ä–æ—à–µ–Ω!\n\n"
            "–ù–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n"
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞\n"
            "‚Ä¢ CONTEXT_ENABLED - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞\n"
            "‚Ä¢ CONTEXT_MAX_TOKENS - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ",
        )

    # Message handlers

    async def handle_message(self, message: Message) -> None:
        """
        Handle all regular messages (unified handler for all content types).

        Routes messages to appropriate service based on current user mode.

        Args:
            message: Telegram message to process
        """
        # Skip if waiting for settings input
        if (
            self.settings_handlers
            and message.from_user.id in self.settings_handlers.waiting_for_input
        ):
            # Only accept text input in settings mode
            if message.content_type != "text":
                await self.bot.reply_to(
                    message,
                    "‚ö†Ô∏è –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
                )
                return
            else:
                # Let settings handler process text input
                self.logger.info(
                    f"Skipping text message from user {message.from_user.id} "
                    f"- waiting for settings input"
                )
                return

        # Log message info
        content_type = message.content_type
        log_msg = f"[HANDLER] {content_type.capitalize()} message from user {message.from_user.id}"
        if content_type == "text" and message.text:
            log_msg += f": {message.text[:50]}..."
        self.logger.info(log_msg)

        # For compatibility with existing tests, pass original message object
        await self.message_processor.process_message(message)

    async def handle_forwarded_message(self, message: Message) -> None:
        """
        Handle forwarded messages (all content types).

        Routes forwarded messages to message processor.

        Args:
            message: Forwarded Telegram message to process
        """
        # Skip if waiting for settings input
        if (
            self.settings_handlers
            and message.from_user.id in self.settings_handlers.waiting_for_input
        ):
            await self.bot.reply_to(
                message,
                "‚ö†Ô∏è –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è.\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            )
            return

        # Log message info
        content_type = message.content_type
        self.logger.info(
            f"[HANDLER] Forwarded {content_type} message from user {message.from_user.id}"
        )

        # For compatibility with existing tests, pass original message object
        await self.message_processor.process_message(message)
