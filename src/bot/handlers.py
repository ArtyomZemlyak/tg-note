"""
Telegram Bot Handlers
Handles all incoming message events from Telegram
"""

import asyncio
import logging
from pathlib import Path
from typing import Dict, Any
from telebot import TeleBot
from telebot.types import Message

from config import settings
from src.processor.message_aggregator import MessageAggregator
from src.processor.content_parser import ContentParser
from src.agents.stub_agent import StubAgent
from src.knowledge_base.manager import KnowledgeBaseManager
from src.tracker.processing_tracker import ProcessingTracker


class BotHandlers:
    """Telegram bot message handlers"""

    def __init__(self, bot: TeleBot, tracker: ProcessingTracker, kb_manager: KnowledgeBaseManager):
        self.bot = bot
        self.tracker = tracker
        self.kb_manager = kb_manager
        self.message_aggregator = MessageAggregator(settings.MESSAGE_GROUP_TIMEOUT)
        self.content_parser = ContentParser()
        self.agent = StubAgent()
        self.logger = logging.getLogger(__name__)

        # Register handlers
        self._register_handlers()

    def _register_handlers(self):
        """Register all bot handlers"""
        # Command handlers
        self.bot.message_handler(commands=["start"])(self.handle_start)
        self.bot.message_handler(commands=["help"])(self.handle_help)
        self.bot.message_handler(commands=["status"])(self.handle_status)

        # Message handlers - use func parameter to avoid conflicts
        self.bot.message_handler(
            func=lambda message: message.content_type == "text" and message.forward_from is None
        )(self.handle_text_message)
        self.bot.message_handler(func=lambda message: message.content_type == "photo")(
            self.handle_photo_message
        )
        self.bot.message_handler(func=lambda message: message.content_type == "document")(
            self.handle_document_message
        )

        # Forwarded messages
        self.bot.message_handler(func=lambda message: message.forward_from is not None)(
            self.handle_forwarded_message
        )

    def handle_start(self, message: Message) -> None:
        """Handle /start command"""
        self.logger.info(f"Start command from user {message.from_user.id}")

        welcome_text = (
            "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ tg-note!\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–º–µ—Ç–∫–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –∏–∑ –≤–∞—à–∏—Ö "
            "—Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ä–µ–ø–æ—Å—Ç–æ–≤.\n\n"
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ:\n"
            "‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            "‚Ä¢ –†–µ–ø–æ—Å—Ç—ã –Ω–æ–≤–æ—Å—Ç–µ–π –∏–ª–∏ —Å—Ç–∞—Ç–µ–π\n"
            "‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ø–æ–¥–ø–∏—Å—è–º–∏\n"
            "‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã\n\n"
            "–ë–æ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π.\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
            "/status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏"
        )

        self.bot.reply_to(message, welcome_text)

    def handle_help(self, message: Message) -> None:
        """Handle /help command"""
        self.logger.info(f"Help command from user {message.from_user.id}")

        help_text = (
            "üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ tg-note\n\n"
            "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–º–µ—Ç–∫–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞:\n"
            "‚Ä¢ üìù –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            "‚Ä¢ üîÑ –†–µ–ø–æ—Å—Ç—ã (forwarded messages)\n"
            "‚Ä¢ üì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ø–æ–¥–ø–∏—Å—è–º–∏\n"
            "‚Ä¢ üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã\n\n"
            "–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
            "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ä–µ–ø–æ—Å—Ç\n"
            "2. –ë–æ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç\n"
            "3. –ò–∑–≤–ª–µ—á–µ—Ç –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n"
            "4. –°–æ—Ö—Ä–∞–Ω–∏—Ç –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/status - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏\n"
            "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!"
        )

        self.bot.reply_to(message, help_text)

    def handle_status(self, message: Message) -> None:
        """Handle /status command"""
        self.logger.info(f"Status command from user {message.from_user.id}")

        try:
            stats = self.tracker.get_stats()
            status_text = (
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏\n\n"
                f"–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_processed']}\n"
                f"–û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: {stats['pending_groups']}\n"
                f"–ü–æ—Å–ª–µ–¥–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: {stats.get('last_processed', '–ù–∏–∫–æ–≥–¥–∞')}\n\n"
                f"–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: {settings.KB_PATH}\n"
                f"Git –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {'–í–∫–ª—é—á–µ–Ω–∞' if settings.KB_GIT_ENABLED else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}"
            )
        except Exception as e:
            self.logger.error(f"Error getting status: {e}")
            status_text = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"

        self.bot.reply_to(message, status_text)

    def handle_text_message(self, message: Message) -> None:
        """Handle regular text messages"""
        self.logger.info(f"Text message from user {message.from_user.id}: {message.text[:50]}...")
        self._process_message(message)

    def handle_photo_message(self, message: Message) -> None:
        """Handle photo messages"""
        self.logger.info(f"Photo message from user {message.from_user.id}")
        self._process_message(message)

    def handle_document_message(self, message: Message) -> None:
        """Handle document messages"""
        self.logger.info(f"Document message from user {message.from_user.id}")
        self._process_message(message)

    def handle_forwarded_message(self, message: Message) -> None:
        """Handle forwarded messages"""
        self.logger.info(f"Forwarded message from user {message.from_user.id}")
        self._process_message(message)

    def _process_message(self, message: Message) -> None:
        """Process any type of message"""
        try:
            # Send processing notification
            processing_msg = self.bot.reply_to(message, "üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ...")

            # Convert message to dict for aggregator
            message_dict = self._message_to_dict(message)

            # Add message to aggregator
            closed_group = self.message_aggregator.add_message(message.chat.id, message_dict)

            if closed_group:
                # Previous group was closed, process it
                asyncio.create_task(self._process_message_group(closed_group, processing_msg))
                # Start new group with current message
                self.message_aggregator.add_message(message.chat.id, message_dict)
                self.bot.edit_message_text(
                    "üîÑ –î–æ–±–∞–≤–ª–µ–Ω–æ –∫ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø–µ —Å–æ–æ–±—â–µ–Ω–∏–π...",
                    chat_id=processing_msg.chat.id,
                    message_id=processing_msg.message_id,
                )
            else:
                # Message added to existing group
                self.bot.edit_message_text(
                    "üîÑ –î–æ–±–∞–≤–ª–µ–Ω–æ –∫ –≥—Ä—É–ø–ø–µ —Å–æ–æ–±—â–µ–Ω–∏–π, –æ–∂–∏–¥–∞—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...",
                    chat_id=processing_msg.chat.id,
                    message_id=processing_msg.message_id,
                )

        except Exception as e:
            self.logger.error(f"Error processing message: {e}")
            try:
                self.bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
            except Exception:
                pass

    def _message_to_dict(self, message: Message) -> Dict[str, Any]:
        """Convert Telegram message to dictionary"""
        return {
            "message_id": message.message_id,
            "chat_id": message.chat.id,
            "user_id": message.from_user.id,
            "text": message.text or "",
            "caption": message.caption or "",
            "content_type": message.content_type,
            "forward_from": message.forward_from,
            "forward_from_message_id": message.forward_from_message_id,
            "date": message.date,
            "photo": message.photo,
            "document": message.document,
        }

    async def _process_message_group(self, group, processing_msg: Message) -> None:
        """Process a complete message group"""
        try:
            # Parse content
            content = self.content_parser.parse_message_group(group.messages)
            content_hash = self.content_parser.generate_content_hash(content["text"])

            # Check if already processed
            if self.tracker.is_processed(content_hash):
                self.bot.edit_message_text(
                    "‚úÖ –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ä–∞–Ω–µ–µ",
                    chat_id=processing_msg.chat.id,
                    message_id=processing_msg.message_id,
                )
                return

            # Process with agent
            self.bot.edit_message_text(
                "ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–Ω—Ç–µ–Ω—Ç...",
                chat_id=processing_msg.chat.id,
                message_id=processing_msg.message_id,
            )

            processed_content = await self.agent.process(content)

            # Save to knowledge base
            self.bot.edit_message_text(
                "üíæ –°–æ—Ö—Ä–∞–Ω—è—é –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π...",
                chat_id=processing_msg.chat.id,
                message_id=processing_msg.message_id,
            )

            kb_file = self.kb_manager.create_article(
                content=processed_content["markdown"],
                title=processed_content["title"],
                category=processed_content["category"],
                metadata=processed_content["metadata"]
            )

            # Mark as processed (use first message from group)
            first_message = group.messages[0] if group.messages else {}
            self.tracker.add_processed(
                content_hash=content_hash,
                message_ids=[first_message.get("message_id", 0)],
                chat_id=first_message.get("chat_id", 0),
                kb_file=str(kb_file),
                status="completed"
            )

            # Success notification
            self.bot.edit_message_text(
                f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n"
                f"üìÅ –§–∞–π–ª: `{Path(kb_file).name}`\n"
                f"üîó –ü—É—Ç—å: `{kb_file}`",
                chat_id=processing_msg.chat.id,
                message_id=processing_msg.message_id,
                parse_mode="Markdown",
            )

        except Exception as e:
            self.logger.error(f"Error processing message group: {e}")
            try:
                self.bot.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
                    chat_id=processing_msg.chat.id,
                    message_id=processing_msg.message_id,
                )
            except Exception:
                pass
