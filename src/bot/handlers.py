"""
Telegram Bot Handlers
Handles all incoming message events from Telegram (fully async)
"""

import logging
from typing import Dict, Any, Optional
from telebot.async_telebot import AsyncTeleBot
from telebot.types import Message

from config import settings
from src.processor.message_aggregator import MessageAggregator, MessageGroup
from src.processor.content_parser import ContentParser
from src.agents.agent_factory import AgentFactory
from src.knowledge_base.manager import KnowledgeBaseManager
from src.knowledge_base.repository import RepositoryManager
from src.knowledge_base.user_settings import UserSettings
from src.knowledge_base.git_ops import GitOperations
from src.tracker.processing_tracker import ProcessingTracker


class BotHandlers:
    """Telegram bot message handlers (fully async)"""
    
    def __init__(
        self, 
        bot: AsyncTeleBot, 
        tracker: ProcessingTracker,
        repo_manager: RepositoryManager,
        user_settings: UserSettings
    ):
        self.bot = bot
        self.tracker = tracker
        self.repo_manager = repo_manager
        self.user_settings = user_settings
        self.message_aggregator = MessageAggregator(settings.MESSAGE_GROUP_TIMEOUT)
        self.content_parser = ContentParser()
        
        # Initialize agent using factory based on settings
        self.agent = AgentFactory.from_settings(settings)
        self.logger = logging.getLogger(__name__)
        
        self.logger.info(f"Initialized agent: {type(self.agent).__name__}")
        
        # Set up timeout callback for background task
        self.message_aggregator.set_timeout_callback(self._handle_timeout)
    
    async def register_handlers_async(self):
        """Register all bot handlers (async)"""
        # Command handlers
        self.bot.message_handler(commands=['start'])(self.handle_start)
        self.bot.message_handler(commands=['help'])(self.handle_help)
        self.bot.message_handler(commands=['status'])(self.handle_status)
        self.bot.message_handler(commands=['setkb'])(self.handle_setkb)
        self.bot.message_handler(commands=['kb'])(self.handle_kb_info)
        
        # Forwarded messages - register first to catch all forwarded content
        self.bot.message_handler(func=self._is_forwarded_message)(self.handle_forwarded_message)
        
        # Regular message handlers - only for non-forwarded messages
        self.bot.message_handler(func=lambda message: message.content_type == 'text' and not self._is_forwarded_message(message))(self.handle_text_message)
        self.bot.message_handler(func=lambda message: message.content_type == 'photo' and not self._is_forwarded_message(message))(self.handle_photo_message)
        self.bot.message_handler(func=lambda message: message.content_type == 'document' and not self._is_forwarded_message(message))(self.handle_document_message)
    
    def _is_forwarded_message(self, message: Message) -> bool:
        """Check if message is forwarded from any source"""
        return (
            message.forward_from is not None or  # Forwarded from user
            message.forward_from_chat is not None or  # Forwarded from channel/group
            message.forward_sender_name is not None or  # Forwarded from privacy-enabled user
            message.forward_date is not None  # Forwarded message (any source)
        )
    
    def start_background_tasks(self) -> None:
        """Start background tasks for message processing"""
        self.logger.info("Starting background tasks")
        self.message_aggregator.start_background_task()
    
    def stop_background_tasks(self) -> None:
        """Stop background tasks"""
        self.logger.info("Stopping background tasks")
        self.message_aggregator.stop_background_task()
    
    async def _handle_timeout(self, chat_id: int, group: MessageGroup) -> None:
        """Handle a timed-out message group (async)"""
        try:
            self.logger.info(f"Processing timed-out group for chat {chat_id} with {len(group.messages)} messages")
            
            # Send notification about processing the timed-out group
            processing_msg = await self.bot.send_message(
                chat_id,
                "üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –≥—Ä—É–ø–ø—É —Å–æ–æ–±—â–µ–Ω–∏–π..."
            )
            
            # Process the group
            await self._process_message_group(group, processing_msg)
            
        except Exception as e:
            self.logger.error(f"Error handling timed-out group for chat {chat_id}: {e}", exc_info=True)
    
    async def handle_start(self, message: Message) -> None:
        """Handle /start command (async)"""
        self.logger.info(f"Start command from user {message.from_user.id}")
        
        welcome_text = (
            "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ tg-note!\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–º–µ—Ç–∫–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –∏–∑ –≤–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ä–µ–ø–æ—Å—Ç–æ–≤.\n\n"
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ:\n"
            "‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            "‚Ä¢ –†–µ–ø–æ—Å—Ç—ã –Ω–æ–≤–æ—Å—Ç–µ–π –∏–ª–∏ —Å—Ç–∞—Ç–µ–π\n"
            "‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ø–æ–¥–ø–∏—Å—è–º–∏\n"
            "‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã\n\n"
            "–ë–æ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π.\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
            "/status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏"
        )
        
        await self.bot.reply_to(message, welcome_text)
    
    async def handle_help(self, message: Message) -> None:
        """Handle /help command (async)"""
        self.logger.info(f"Help command from user {message.from_user.id}")
        
        help_text = (
            "üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ tg-note\n\n"
            "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–º–µ—Ç–∫–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞:\n"
            "‚Ä¢ üìù –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            "‚Ä¢ üîÑ –†–µ–ø–æ—Å—Ç—ã (forwarded messages)\n"
            "‚Ä¢ üì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ø–æ–¥–ø–∏—Å—è–º–∏\n"
            "‚Ä¢ üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã\n\n"
            "–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
            "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ä–µ–ø–æ—Å—Ç\n"
            "2. –ë–æ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç\n"
            "3. –ò–∑–≤–ª–µ—á–µ—Ç –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n"
            "4. –°–æ—Ö—Ä–∞–Ω–∏—Ç –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown\n\n"
            "**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
            "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/status - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏\n"
            "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "**–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:**\n"
            "/setkb <name|url> - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π\n"
            "/kb - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π\n\n"
            "**–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**\n"
            "/settings - –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫\n"
            "/viewsettings - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫\n"
            "/kbsettings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π\n"
            "/agentsettings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≥–µ–Ω—Ç–∞\n\n"
            "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!"
        )
        
        await self.bot.reply_to(message, help_text)
    
    async def handle_status(self, message: Message) -> None:
        """Handle /status command (async)"""
        self.logger.info(f"Status command from user {message.from_user.id}")
        
        try:
            stats = self.tracker.get_stats()
            user_kb = self.user_settings.get_user_kb(message.from_user.id)
            
            kb_info = "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setkb)"
            if user_kb:
                kb_info = f"{user_kb['kb_name']} ({user_kb['kb_type']})"
            
            status_text = (
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏\n\n"
                f"–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_processed']}\n"
                f"–û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: {stats['pending_groups']}\n"
                f"–ü–æ—Å–ª–µ–¥–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: {stats.get('last_processed', '–ù–∏–∫–æ–≥–¥–∞')}\n\n"
                f"–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: {kb_info}\n"
                f"Git –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {'–í–∫–ª—é—á–µ–Ω–∞' if settings.KB_GIT_ENABLED else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}"
            )
        except Exception as e:
            self.logger.error(f"Error getting status: {e}")
            status_text = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        
        await self.bot.reply_to(message, status_text)
    
    async def handle_setkb(self, message: Message) -> None:
        """Handle /setkb command - set up knowledge base (async)"""
        self.logger.info(f"Setkb command from user {message.from_user.id}")
        
        # Parse command arguments
        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            help_text = (
                "üìö –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
                "/setkb <–Ω–∞–∑–≤–∞–Ω–∏–µ> - —Å–æ–∑–¥–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π\n"
                "/setkb <github_url> - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "/setkb my-notes\n"
                "/setkb https://github.com/user/knowledge-base\n"
            )
            await self.bot.reply_to(message, help_text)
            return
        
        kb_input = args[1].strip()
        
        # Determine if it's a GitHub URL or local name
        if kb_input.startswith('http://') or kb_input.startswith('https://') or kb_input.startswith('git@'):
            # GitHub repository
            success, msg, kb_path = self.repo_manager.clone_github_kb(kb_input)
            
            if success:
                kb_name = kb_path.name
                self.user_settings.set_user_kb(
                    message.from_user.id,
                    kb_name,
                    kb_type="github",
                    github_url=kb_input
                )
                await self.bot.reply_to(
                    message,
                    f"‚úÖ {msg}\n\n"
                    f"–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {kb_input}\n"
                    f"–õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å: {kb_path}"
                )
            else:
                await self.bot.reply_to(message, f"‚ùå {msg}")
        else:
            # Local knowledge base
            success, msg, kb_path = self.repo_manager.init_local_kb(kb_input)
            
            if success:
                self.user_settings.set_user_kb(
                    message.from_user.id,
                    kb_input,
                    kb_type="local"
                )
                await self.bot.reply_to(
                    message,
                    f"‚úÖ {msg}\n\n"
                    f"–õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å: {kb_path}\n"
                    f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"
                )
            else:
                await self.bot.reply_to(message, f"‚ùå {msg}")
    
    async def handle_kb_info(self, message: Message) -> None:
        """Handle /kb command - show KB info (async)"""
        self.logger.info(f"KB info command from user {message.from_user.id}")
        
        user_kb = self.user_settings.get_user_kb(message.from_user.id)
        
        if not user_kb:
            await self.bot.reply_to(
                message,
                "‚ùå –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setkb –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
            )
            return
        
        kb_path = self.repo_manager.get_kb_path(user_kb['kb_name'])
        
        info_text = (
            f"üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π\n\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {user_kb['kb_name']}\n"
            f"–¢–∏–ø: {user_kb['kb_type']}\n"
        )
        
        if user_kb['kb_type'] == 'github':
            info_text += f"GitHub: {user_kb.get('github_url', 'N/A')}\n"
        
        if kb_path:
            info_text += f"–õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å: {kb_path}\n"
        else:
            info_text += "‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n"
        
        await self.bot.reply_to(message, info_text)
    
    async def handle_text_message(self, message: Message) -> None:
        """Handle regular text messages (async)"""
        self.logger.info(f"Text message from user {message.from_user.id}: {message.text[:50]}...")
        await self._process_message(message)
    
    async def handle_photo_message(self, message: Message) -> None:
        """Handle photo messages (async)"""
        self.logger.info(f"Photo message from user {message.from_user.id}")
        await self._process_message(message)
    
    async def handle_document_message(self, message: Message) -> None:
        """Handle document messages (async)"""
        self.logger.info(f"Document message from user {message.from_user.id}")
        await self._process_message(message)
    
    async def handle_forwarded_message(self, message: Message) -> None:
        """Handle forwarded messages (async)"""
        self.logger.info(f"Forwarded message from user {message.from_user.id}")
        await self._process_message(message)
    
    async def _process_message(self, message: Message) -> None:
        """Process any type of message (async)"""
        try:
            # Send processing notification
            processing_msg = await self.bot.reply_to(message, "üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ...")
            
            # Convert message to dict for aggregator
            message_dict = self._message_to_dict(message)
            
            # Add message to aggregator (fully async)
            closed_group = await self.message_aggregator.add_message(message.chat.id, message_dict)
            
            if closed_group:
                # Previous group was closed, process it with a separate notification
                prev_processing_msg = await self.bot.send_message(
                    message.chat.id, 
                    "üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø—Ä–µ–¥—ã–¥—É—â—É—é –≥—Ä—É–ø–ø—É —Å–æ–æ–±—â–µ–Ω–∏–π..."
                )
                await self._process_message_group(closed_group, prev_processing_msg)
                
                # Update current message status
                await self.bot.edit_message_text(
                    "üîÑ –î–æ–±–∞–≤–ª–µ–Ω–æ –∫ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø–µ —Å–æ–æ–±—â–µ–Ω–∏–π...",
                    chat_id=processing_msg.chat.id,
                    message_id=processing_msg.message_id
                )
            else:
                # Message added to existing group
                await self.bot.edit_message_text(
                    "üîÑ –î–æ–±–∞–≤–ª–µ–Ω–æ –∫ –≥—Ä—É–ø–ø–µ —Å–æ–æ–±—â–µ–Ω–∏–π, –æ–∂–∏–¥–∞—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...",
                    chat_id=processing_msg.chat.id,
                    message_id=processing_msg.message_id
                )
                
        except Exception as e:
            self.logger.error(f"Error processing message: {e}", exc_info=True)
            try:
                await self.bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
            except Exception:
                pass
    
    def _message_to_dict(self, message: Message) -> Dict[str, Any]:
        """Convert Telegram message to dictionary"""
        return {
            'message_id': message.message_id,
            'chat_id': message.chat.id,
            'user_id': message.from_user.id,
            'text': message.text or '',
            'caption': message.caption or '',
            'content_type': message.content_type,
            'forward_from': message.forward_from,
            'forward_from_chat': message.forward_from_chat,
            'forward_from_message_id': message.forward_from_message_id,
            'forward_sender_name': message.forward_sender_name,
            'forward_date': message.forward_date,
            'date': message.date,
            'photo': message.photo,
            'document': message.document
        }
    
    async def _process_message_group(self, group, processing_msg: Message) -> None:
        """Process a complete message group (async)"""
        try:
            # Get user_id from the first message in the group (original user message, not bot's processing_msg)
            if not group.messages:
                self.logger.warning("Empty message group, skipping processing")
                return
            
            user_id = group.messages[0].get('user_id')
            if not user_id:
                self.logger.error("Cannot determine user_id from message group")
                await self.bot.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    chat_id=processing_msg.chat.id,
                    message_id=processing_msg.message_id
                )
                return
            
            # Check if user has KB configured
            user_kb = self.user_settings.get_user_kb(user_id)
            
            if not user_kb:
                await self.bot.edit_message_text(
                    "‚ùå –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setkb –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π",
                    chat_id=processing_msg.chat.id,
                    message_id=processing_msg.message_id
                )
                return
            
            # Get KB path
            kb_path = self.repo_manager.get_kb_path(user_kb['kb_name'])
            if not kb_path:
                await self.bot.edit_message_text(
                    "‚ùå –õ–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–ø–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∑–∞–Ω–æ–≤–æ: /setkb",
                    chat_id=processing_msg.chat.id,
                    message_id=processing_msg.message_id
                )
                return
            
            # Create KB manager for user's KB
            kb_manager = KnowledgeBaseManager(str(kb_path))
            git_ops = GitOperations(str(kb_path), enabled=settings.KB_GIT_ENABLED)
            
            # Parse content
            content = self.content_parser.parse_group(group)
            content_hash = self.content_parser.generate_hash(content)
            
            # Check if already processed
            if self.tracker.is_processed(content_hash):
                await self.bot.edit_message_text(
                    "‚úÖ –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ä–∞–Ω–µ–µ",
                    chat_id=processing_msg.chat.id,
                    message_id=processing_msg.message_id
                )
                return
            
            # Process with agent
            await self.bot.edit_message_text(
                "ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–Ω—Ç–µ–Ω—Ç...",
                chat_id=processing_msg.chat.id,
                message_id=processing_msg.message_id
            )
            
            try:
                processed_content = await self.agent.process(content)
            except Exception as agent_error:
                self.logger.error(f"Agent processing failed: {agent_error}", exc_info=True)
                await self.bot.edit_message_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∞–≥–µ–Ω—Ç–æ–º:\n{str(agent_error)}\n\n"
                    f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ Qwen CLI –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.",
                    chat_id=processing_msg.chat.id,
                    message_id=processing_msg.message_id
                )
                return
            
            # Save to knowledge base
            await self.bot.edit_message_text(
                "üíæ –°–æ—Ö—Ä–∞–Ω—è—é –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π...",
                chat_id=processing_msg.chat.id,
                message_id=processing_msg.message_id
            )
            
            # Extract KB structure from processed content
            kb_structure = processed_content.get('kb_structure')
            title = processed_content.get('title')
            markdown = processed_content.get('markdown')
            metadata = processed_content.get('metadata')
            
            # Validate required fields
            if not kb_structure:
                self.logger.error("Agent did not return kb_structure")
                raise ValueError("Agent processing incomplete: missing kb_structure")
            
            if not title:
                self.logger.warning("Agent did not return title, using default")
                title = "Untitled Note"
            
            if not markdown:
                self.logger.error("Agent did not return markdown content")
                raise ValueError("Agent processing incomplete: missing markdown content")
            
            # Create article using KB structure from agent
            try:
                kb_file = kb_manager.create_article(
                    content=markdown,
                    title=title,
                    kb_structure=kb_structure,
                    metadata=metadata
                )
            except Exception as kb_error:
                self.logger.error(f"Failed to create KB article: {kb_error}", exc_info=True)
                await self.bot.edit_message_text(
                    f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π:\n{str(kb_error)}",
                    chat_id=processing_msg.chat.id,
                    message_id=processing_msg.message_id
                )
                return
            
            # Update index
            kb_manager.update_index(kb_file, title, kb_structure)
            
            # Git operations
            if settings.KB_GIT_ENABLED and git_ops.enabled:
                git_ops.add(str(kb_file))
                git_ops.add(str(kb_path / "index.md"))
                git_ops.commit(f"Add article: {title}")
                
                if settings.KB_GIT_AUTO_PUSH:
                    git_ops.push(settings.KB_GIT_REMOTE, settings.KB_GIT_BRANCH)
            
            # Mark as processed (use first message from group)
            if not group.messages:
                # Skip tracking for empty groups to avoid invalid entries
                self.logger.warning("Skipping tracker entry for empty message group")
            else:
                first_message = group.messages[0]
                message_ids = [msg.get('message_id') for msg in group.messages if msg.get('message_id')]
                chat_id = first_message.get('chat_id')
                
                if message_ids and chat_id:
                    self.tracker.add_processed(
                        content_hash=content_hash,
                        message_ids=message_ids,
                        chat_id=chat_id,
                        kb_file=str(kb_file),
                        status="completed"
                    )
                else:
                    self.logger.warning(f"Skipping tracker entry due to missing IDs: message_ids={message_ids}, chat_id={chat_id}")
            
            # Success notification with category info
            category_str = kb_structure.category
            if kb_structure.subcategory:
                category_str += f"/{kb_structure.subcategory}"
            
            await self.bot.edit_message_text(
                f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n"
                f"üìÅ –§–∞–π–ª: `{kb_file.name}`\n"
                f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: `{category_str}`\n"
                f"üè∑ –¢–µ–≥–∏: {', '.join(kb_structure.tags) if kb_structure.tags else '–Ω–µ—Ç'}\n"
                f"üîó –ü—É—Ç—å: `{kb_file.relative_to(kb_path)}`",
                chat_id=processing_msg.chat.id,
                message_id=processing_msg.message_id,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            self.logger.error(f"Error processing message group: {e}", exc_info=True)
            try:
                await self.bot.edit_message_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}",
                    chat_id=processing_msg.chat.id,
                    message_id=processing_msg.message_id
                )
            except Exception:
                pass
