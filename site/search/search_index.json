{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to tg-note Documentation","text":"**Intelligent Knowledge Base Builder**  Telegram bot that automatically transforms your messages, reposts, and articles into a structured knowledge base using AI agents.  [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT) [![Python 3.11+](https://img.shields.io/badge/python-3.11+-blue.svg)](https://www.python.org/downloads/)  [Get Started](getting-started/quick-start.md){ .md-button .md-button--primary } [View on GitHub](https://github.com/ArtyomZemlyak/tg-note){ .md-button }"},{"location":"#what-is-tg-note","title":"What is tg-note?","text":"<p>tg-note is a Telegram bot that acts as your personal knowledge curator. It receives messages, reposts, and articles through Telegram, analyzes them using AI agent systems, and automatically saves the important information to your GitHub-based knowledge base in structured Markdown format.</p> <p>Perfect for:</p> <ul> <li>\ud83d\udcda Building a personal knowledge base from Telegram channels</li> <li>\ud83d\udd2c Organizing research papers and scientific articles</li> <li>\ud83d\udcf0 Archiving news and insights from multiple sources</li> <li>\ud83e\udde0 Creating a searchable second brain</li> </ul>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li> <p> AI-Powered Analysis</p> <p>Intelligent content categorization and structuring using advanced agent systems</p> </li> <li> <p> Automatic Markdown</p> <p>Converts any content into well-formatted Markdown files with proper structure</p> </li> <li> <p> Smart Organization</p> <p>Automatic categorization by topics (AI, biology, physics, tech, etc.)</p> </li> <li> <p> GitHub Integration</p> <p>Direct commits to your knowledge base repository with version control</p> </li> <li> <p> Multi-User Support</p> <p>Each user can have their own personal knowledge base</p> </li> <li> <p> Flexible Configuration</p> <p>Configure bot settings directly via Telegram commands</p> </li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Get started with tg-note in just a few minutes:</p> 1. Installation2. Configuration3. Run <pre><code>git clone https://github.com/ArtyomZemlyak/tg-note.git\ncd tg-note\npoetry install\n</code></pre> <pre><code># Copy configuration files\ncp config.example.yaml config.yaml\n\n# Add your Telegram bot token to .env\necho \"TELEGRAM_BOT_TOKEN=your_token_here\" &gt; .env\n</code></pre> <pre><code>poetry run python main.py\n</code></pre> <p>Full Installation Guide \u2192</p>"},{"location":"#agent-types","title":"Agent Types","text":"<p>Choose the right agent for your needs:</p>"},{"location":"#qwen-code-cli-recommended","title":"Qwen Code CLI (Recommended)","text":"<p>Uses Qwen Code CLI for advanced AI processing.</p> <ul> <li>\u2705 Full integration with Qwen3-Coder models</li> <li>\u2705 Automatic TODO planning</li> <li>\u2705 Built-in tools: web search, git, github, shell</li> <li>\u2705 Free tier: 2000 requests/day</li> </ul> <p>Learn More \u2192</p>"},{"location":"#autonomous-agent","title":"Autonomous Agent","text":"<p>Python-based agent with OpenAI-compatible API support.</p> <ul> <li>\u2705 OpenAI-compatible API integration</li> <li>\u2705 Autonomous planning and decision-making</li> <li>\u2705 Function calling support</li> <li>\u2705 Works with various LLM providers</li> </ul> <p>Learn More \u2192</p>"},{"location":"#stub-agent","title":"Stub Agent","text":"<p>Simple stub agent for testing and MVP.</p> <ul> <li>\u26a1 Fast and lightweight</li> <li>\ud83d\udd27 No external dependencies</li> <li>\ud83e\uddea Perfect for testing</li> </ul> <p>Learn More \u2192</p>"},{"location":"#architecture-overview","title":"Architecture Overview","text":"<pre><code>graph TD\n    A[Telegram Bot] --&gt; B[Message Processor]\n    B --&gt; C[Agent System]\n    C --&gt; D[Knowledge Base Manager]\n    D --&gt; E[Git Operations]\n\n    style A fill:#e1f5ff\n    style C fill:#fff3e0\n    style D fill:#f3e5f5\n    style E fill:#e8f5e9\n</code></pre> <p>Detailed Architecture \u2192</p>"},{"location":"#documentation-sections","title":"Documentation Sections","text":"<ul> <li> <p> Getting Started</p> <p>Installation, configuration, and first steps</p> <p> Start Here</p> </li> <li> <p> User Guide</p> <p>Commands, content management, and settings</p> <p> Read Guide</p> </li> <li> <p> Agent System</p> <p>AI agents, tools, and autonomous processing</p> <p> Explore Agents</p> </li> <li> <p> Architecture</p> <p>System design and component details</p> <p> View Architecture</p> </li> <li> <p> Development</p> <p>Contributing, testing, and code quality</p> <p> Start Contributing</p> </li> <li> <p> Deployment</p> <p>Production setup, Docker, and CI/CD</p> <p> Deploy</p> </li> </ul>"},{"location":"#community-support","title":"Community &amp; Support","text":"<ul> <li> GitHub Repository</li> <li> Issue Tracker</li> <li> Discussions</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>   **Built with \u2764\ufe0f by [Artem Zemliak](https://github.com/ArtyomZemlyak)**  \u2b50 Star this repository if you find it helpful!"},{"location":"agents/autonomous-agent/","title":"Autonomous Agent Guide","text":"<p>Python-based autonomous agent with OpenAI-compatible API support for intelligent knowledge base building.</p>"},{"location":"agents/autonomous-agent/#overview","title":"Overview","text":"<p>The Autonomous Agent is a Python-based AI agent that uses OpenAI-compatible APIs to process messages and build your knowledge base. It features autonomous planning, decision-making, and tool execution capabilities.</p> <p>Unlike the Qwen Code CLI agent (which uses Node.js), the autonomous agent is pure Python and works with any OpenAI-compatible API endpoint, making it flexible for custom LLM providers.</p>"},{"location":"agents/autonomous-agent/#key-features","title":"Key Features","text":""},{"location":"agents/autonomous-agent/#autonomous-decision-making","title":"\ud83e\udd16 Autonomous Decision Making","text":"<ul> <li>Self-Planning - Creates execution plans autonomously</li> <li>Dynamic Tool Selection - Chooses appropriate tools based on context</li> <li>Iterative Refinement - Adapts strategy based on results</li> <li>Error Recovery - Handles failures gracefully</li> </ul>"},{"location":"agents/autonomous-agent/#built-in-tools","title":"\ud83d\udd27 Built-in Tools","text":"<ul> <li>Web Search - Search the internet for additional context</li> <li>Git Operations - Version control for knowledge base</li> <li>GitHub API - Repository management</li> <li>File Management - Create, read, update files in KB</li> <li>Folder Management - Organize KB structure</li> <li>Shell Commands - Execute safe shell operations (optional)</li> </ul>"},{"location":"agents/autonomous-agent/#llm-flexibility","title":"\ud83d\udd0c LLM Flexibility","text":"<ul> <li>OpenAI - Native support for GPT models</li> <li>Custom Endpoints - Use any OpenAI-compatible API</li> <li>Qwen - Works with Qwen models via compatible API</li> <li>Azure OpenAI - Enterprise deployment support</li> <li>Local Models - Compatible with local LLM servers</li> </ul>"},{"location":"agents/autonomous-agent/#function-calling","title":"\ud83c\udfaf Function Calling","text":"<ul> <li>Native function calling support</li> <li>Automatic tool discovery</li> <li>Structured output generation</li> <li>Type-safe parameter passing</li> </ul>"},{"location":"agents/autonomous-agent/#installation","title":"Installation","text":""},{"location":"agents/autonomous-agent/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11+</li> <li>Poetry (recommended) or pip</li> <li>OpenAI API key or compatible API endpoint</li> </ul>"},{"location":"agents/autonomous-agent/#setup","title":"Setup","text":"<ol> <li>Install dependencies (OpenAI library included):</li> </ol> <pre><code>poetry install\n</code></pre> <ol> <li>Configure environment variables:</li> </ol> <pre><code># .env file\nOPENAI_API_KEY=sk-...\nOPENAI_BASE_URL=https://api.openai.com/v1  # Optional, for custom endpoints\n</code></pre> <ol> <li>Update config.yaml:</li> </ol> <pre><code>AGENT_TYPE: \"autonomous\"\nAGENT_MODEL: \"gpt-3.5-turbo\"\nAGENT_TIMEOUT: 300\nAGENT_ENABLE_WEB_SEARCH: true\nAGENT_ENABLE_GIT: true\nAGENT_ENABLE_FILE_MANAGEMENT: true\n</code></pre>"},{"location":"agents/autonomous-agent/#configuration","title":"Configuration","text":""},{"location":"agents/autonomous-agent/#basic-configuration","title":"Basic Configuration","text":"<pre><code># config.yaml\nAGENT_TYPE: \"autonomous\"\nAGENT_MODEL: \"gpt-3.5-turbo\"  # or gpt-4, qwen-max, etc.\nAGENT_TIMEOUT: 300  # seconds\n</code></pre>"},{"location":"agents/autonomous-agent/#tool-permissions","title":"Tool Permissions","text":"<pre><code># Enable/disable specific tools\nAGENT_ENABLE_WEB_SEARCH: true\nAGENT_ENABLE_GIT: true\nAGENT_ENABLE_GITHUB: true\nAGENT_ENABLE_SHELL: false  # Disabled by default for security\nAGENT_ENABLE_FILE_MANAGEMENT: true\nAGENT_ENABLE_FOLDER_MANAGEMENT: true\n</code></pre>"},{"location":"agents/autonomous-agent/#advanced-settings","title":"Advanced Settings","text":"<pre><code># Custom instruction for the agent\nAGENT_INSTRUCTION: |\n  You are a knowledge base curator.\n  Analyze content, categorize it, and create well-structured Markdown files.\n\n# Maximum planning iterations\nAGENT_MAX_ITERATIONS: 10\n\n# Knowledge base path\nKB_PATH: ./knowledge_base\n</code></pre>"},{"location":"agents/autonomous-agent/#environment-variables","title":"Environment Variables","text":"<pre><code># OpenAI Configuration\nOPENAI_API_KEY=sk-...\nOPENAI_BASE_URL=https://api.openai.com/v1\n\n# Alternative: Use Qwen API\nOPENAI_API_KEY=sk-...\nOPENAI_BASE_URL=https://dashscope.aliyuncs.com/compatible-mode/v1\n\n# GitHub (optional, for GitHub tools)\nGITHUB_TOKEN=ghp_...\n</code></pre>"},{"location":"agents/autonomous-agent/#usage-examples","title":"Usage Examples","text":""},{"location":"agents/autonomous-agent/#using-with-openai","title":"Using with OpenAI","text":"<pre><code># config.yaml\nAGENT_TYPE: \"autonomous\"\nAGENT_MODEL: \"gpt-3.5-turbo\"\n</code></pre> <pre><code># .env\nOPENAI_API_KEY=sk-proj-...\n</code></pre>"},{"location":"agents/autonomous-agent/#using-with-qwen-api","title":"Using with Qwen API","text":"<pre><code># config.yaml\nAGENT_TYPE: \"autonomous\"\nAGENT_MODEL: \"qwen-max\"\n</code></pre> <pre><code># .env\nOPENAI_API_KEY=sk-...\nOPENAI_BASE_URL=https://dashscope.aliyuncs.com/compatible-mode/v1\n</code></pre>"},{"location":"agents/autonomous-agent/#using-with-azure-openai","title":"Using with Azure OpenAI","text":"<pre><code># config.yaml\nAGENT_TYPE: \"autonomous\"\nAGENT_MODEL: \"gpt-35-turbo\"\n</code></pre> <pre><code># .env\nOPENAI_API_KEY=your-azure-key\nOPENAI_BASE_URL=https://your-resource.openai.azure.com/\n</code></pre>"},{"location":"agents/autonomous-agent/#using-with-local-llm","title":"Using with Local LLM","text":"<pre><code># config.yaml\nAGENT_TYPE: \"autonomous\"\nAGENT_MODEL: \"local-model\"\n</code></pre> <pre><code># .env\nOPENAI_API_KEY=not-needed\nOPENAI_BASE_URL=http://localhost:8080/v1\n</code></pre>"},{"location":"agents/autonomous-agent/#how-it-works","title":"How It Works","text":""},{"location":"agents/autonomous-agent/#processing-pipeline","title":"Processing Pipeline","text":"<pre><code>graph LR\n    A[Message] --&gt; B[Autonomous Agent]\n    B --&gt; C{Plan}\n    C --&gt; D[Select Tool]\n    D --&gt; E[Execute]\n    E --&gt; F{Success?}\n    F --&gt;|Yes| G[Next Step]\n    F --&gt;|No| H[Adapt]\n    H --&gt; C\n    G --&gt; I{Done?}\n    I --&gt;|No| C\n    I --&gt;|Yes| J[Generate KB Entry]\n    J --&gt; K[Commit to Git]\n\n    style B fill:#fff3e0\n    style J fill:#e8f5e9\n</code></pre>"},{"location":"agents/autonomous-agent/#execution-flow","title":"Execution Flow","text":"<ol> <li>Receive Content</li> <li>Text, URLs, forwarded messages</li> <li> <p>Extract and parse information</p> </li> <li> <p>Autonomous Planning</p> </li> <li>LLM creates execution plan</li> <li>Decides which tools to use</li> <li> <p>Plans iterative steps</p> </li> <li> <p>Tool Execution</p> </li> <li>Web search for context</li> <li>Analyze content structure</li> <li>Create folders/files</li> <li> <p>Git operations</p> </li> <li> <p>Iterative Refinement</p> </li> <li>Evaluate results</li> <li>Adjust strategy if needed</li> <li> <p>Handle errors gracefully</p> </li> <li> <p>KB Generation</p> </li> <li>Create Markdown file</li> <li>Add metadata</li> <li> <p>Proper categorization</p> </li> <li> <p>Version Control</p> </li> <li>Git commit</li> <li>Push to remote (if enabled)</li> </ol>"},{"location":"agents/autonomous-agent/#available-tools","title":"Available Tools","text":""},{"location":"agents/autonomous-agent/#web-search-tool","title":"Web Search Tool","text":"<p>Search the internet for additional context.</p> <pre><code># Automatically used when agent needs more information\ntool: web_search\nparams:\n  query: \"machine learning basics\"\n</code></pre>"},{"location":"agents/autonomous-agent/#file-management-tools","title":"File Management Tools","text":"<p>Create and manage files in the knowledge base.</p> <pre><code># Create new file\ntool: file_create\nparams:\n  path: \"topics/ai/neural-networks.md\"\n  content: \"# Neural Networks\\n\\n...\"\n</code></pre>"},{"location":"agents/autonomous-agent/#folder-management-tools","title":"Folder Management Tools","text":"<p>Organize knowledge base structure.</p> <pre><code># Create folder\ntool: folder_create\nparams:\n  path: \"topics/new-category\"\n</code></pre>"},{"location":"agents/autonomous-agent/#git-tools","title":"Git Tools","text":"<p>Version control operations.</p> <pre><code># Safe git commands only\ntool: git_command\nparams:\n  command: \"git status\"\n</code></pre>"},{"location":"agents/autonomous-agent/#github-tools","title":"GitHub Tools","text":"<p>Repository management (requires GITHUB_TOKEN).</p> <pre><code># GitHub operations\ntool: github_api\nparams:\n  endpoint: \"/repos/:owner/:repo/issues\"\n  method: \"GET\"\n</code></pre>"},{"location":"agents/autonomous-agent/#performance","title":"Performance","text":""},{"location":"agents/autonomous-agent/#processing-time","title":"Processing Time","text":"Content Type Typical Time With Web Search Short text (&lt; 500 chars) 5-10s 10-20s Medium text (500-2000) 10-30s 20-60s Long text (&gt; 2000) 30-90s 60-180s With URLs 15-45s 30-120s"},{"location":"agents/autonomous-agent/#factors-affecting-speed","title":"Factors Affecting Speed","text":"<ul> <li>Model Selection - GPT-4 slower but higher quality</li> <li>Tool Usage - Web search adds latency</li> <li>Content Complexity - More analysis = longer time</li> <li>API Latency - Network and API response time</li> <li>Iterations - Complex tasks need more planning steps</li> </ul>"},{"location":"agents/autonomous-agent/#best-practices","title":"Best Practices","text":""},{"location":"agents/autonomous-agent/#model-selection","title":"Model Selection","text":"<p>GPT-3.5-turbo</p> <ul> <li>\u2705 Fast response time</li> <li>\u2705 Cost-effective</li> <li>\u2705 Good for simple content</li> <li>\u274c Less sophisticated analysis</li> </ul> <p>GPT-4</p> <ul> <li>\u2705 Best quality</li> <li>\u2705 Complex reasoning</li> <li>\u2705 Better categorization</li> <li>\u274c Slower and more expensive</li> </ul> <p>Qwen-max</p> <ul> <li>\u2705 Free tier available</li> <li>\u2705 Good quality</li> <li>\u2705 Chinese language support</li> <li>\u274c Requires Qwen API</li> </ul>"},{"location":"agents/autonomous-agent/#tool-configuration","title":"Tool Configuration","text":"<p>Enable for Production:</p> <pre><code>AGENT_ENABLE_WEB_SEARCH: true\nAGENT_ENABLE_GIT: true\nAGENT_ENABLE_FILE_MANAGEMENT: true\nAGENT_ENABLE_FOLDER_MANAGEMENT: true\n</code></pre> <p>Disable for Security:</p> <pre><code>AGENT_ENABLE_SHELL: false  # Keep disabled unless needed\nAGENT_ENABLE_GITHUB: false  # If not using GitHub API\n</code></pre>"},{"location":"agents/autonomous-agent/#custom-instructions","title":"Custom Instructions","text":"<p>Tailor agent behavior with custom instructions:</p> <pre><code>AGENT_INSTRUCTION: |\n  You are a scientific paper curator.\n\n  For each paper:\n  1. Extract: title, authors, abstract, key findings\n  2. Categorize by research field\n  3. Add relevant tags\n  4. Create bibliography entry\n\n  Use clear, academic language.\n</code></pre>"},{"location":"agents/autonomous-agent/#connections","title":"Connections (\u0421\u0432\u044f\u0437\u0438)","text":"<ul> <li>When creating relations, link only to existing files from the KB (skip files created in the same run).</li> <li>Provide a short, meaningful description (1\u20132 sentences) for each relation that explains the connection type (similarity, dependency, part-whole, alternative, sequence, overlapping tags).</li> </ul>"},{"location":"agents/autonomous-agent/#troubleshooting","title":"Troubleshooting","text":""},{"location":"agents/autonomous-agent/#agent-not-working","title":"Agent Not Working","text":"<p>Problem: Agent fails to start or process messages</p> <p>Solutions:</p> <ol> <li>Check API key: <code>echo $OPENAI_API_KEY</code></li> <li>Verify base URL if using custom endpoint</li> <li>Test API connection: <code>curl $OPENAI_BASE_URL/models</code></li> <li>Check logs: <code>tail -f logs/bot.log</code></li> </ol>"},{"location":"agents/autonomous-agent/#slow-processing","title":"Slow Processing","text":"<p>Problem: Agent takes too long to process</p> <p>Solutions:</p> <ol> <li>Use faster model (GPT-3.5 instead of GPT-4)</li> <li>Disable web search if not needed</li> <li>Reduce <code>AGENT_MAX_ITERATIONS</code></li> <li>Check network latency to API endpoint</li> </ol>"},{"location":"agents/autonomous-agent/#poor-quality-results","title":"Poor Quality Results","text":"<p>Problem: Agent produces low-quality KB entries</p> <p>Solutions:</p> <ol> <li>Upgrade to GPT-4 or better model</li> <li>Enable web search for more context</li> <li>Customize <code>AGENT_INSTRUCTION</code> for your use case</li> <li>Increase <code>AGENT_TIMEOUT</code> for complex content</li> </ol>"},{"location":"agents/autonomous-agent/#api-errors","title":"API Errors","text":"<p>Problem: OpenAI API errors (rate limits, etc.)</p> <p>Solutions:</p> <ol> <li>Check API quota and billing</li> <li>Implement retry logic (already built-in)</li> <li>Consider using different endpoint</li> <li>Monitor rate limits in dashboard</li> </ol>"},{"location":"agents/autonomous-agent/#comparison-with-other-agents","title":"Comparison with Other Agents","text":""},{"location":"agents/autonomous-agent/#vs-qwen-code-cli","title":"vs. Qwen Code CLI","text":"Feature Autonomous Qwen CLI Language Python Node.js Setup pip install npm install API OpenAI-compatible Qwen specific Flexibility High Medium Free Tier Depends on API 2000/day Vision Depends on model \u2705 Yes <p>Choose Autonomous when:</p> <ul> <li>Python-only environment</li> <li>Need custom LLM provider</li> <li>Already have OpenAI API</li> <li>Want maximum flexibility</li> </ul> <p>Choose Qwen CLI when:</p> <ul> <li>Want free tier (2000/day)</li> <li>Node.js is available</li> <li>Vision support is required</li> <li>Official Qwen integration preferred</li> </ul>"},{"location":"agents/autonomous-agent/#vs-stub-agent","title":"vs. Stub Agent","text":"Feature Autonomous Stub AI \u2705 Yes \u274c No Tools \u2705 Yes \u274c No Quality High Basic Speed Medium Fast Cost API cost Free <p>Use Autonomous for production, Stub for testing.</p>"},{"location":"agents/autonomous-agent/#advanced-features","title":"Advanced Features","text":""},{"location":"agents/autonomous-agent/#custom-llm-connectors","title":"Custom LLM Connectors","text":"<p>Implement custom connector for any LLM:</p> <pre><code>from src.agents.llm_connectors import BaseLLMConnector\n\nclass CustomConnector(BaseLLMConnector):\n    async def generate(self, messages, tools=None):\n        # Your custom implementation\n        pass\n</code></pre>"},{"location":"agents/autonomous-agent/#tool-registration","title":"Tool Registration","text":"<p>Register custom tools programmatically:</p> <pre><code>agent.register_tool(\"my_tool\", my_tool_function)\n</code></pre>"},{"location":"agents/autonomous-agent/#context-management","title":"Context Management","text":"<p>Agent maintains execution context:</p> <pre><code>context = AgentContext(task=\"Process message\")\ncontext.add_execution(execution)\ncontext.get_history()\n</code></pre>"},{"location":"agents/autonomous-agent/#example-code","title":"Example Code","text":"<p>See examples/autonomous_agent_example.py for complete examples:</p> <ul> <li>Basic usage</li> <li>Custom instructions</li> <li>Error handling</li> <li>Tool registration</li> </ul>"},{"location":"agents/autonomous-agent/#see-also","title":"See Also","text":"<ul> <li>Agent Overview</li> <li>Qwen Code CLI Agent</li> <li>Stub Agent</li> <li>Configuration Reference</li> </ul>"},{"location":"agents/kb-reading-tools/","title":"Knowledge Base Reading Tools","text":"<p>The autonomous agent provides tools to read and search content in your knowledge base. These tools let the agent inspect existing data before creating new content.</p>"},{"location":"agents/kb-reading-tools/#available-tools","title":"Available Tools","text":""},{"location":"agents/kb-reading-tools/#1-kb_read_file-read-files","title":"1. <code>kb_read_file</code> \u2014 Read files","text":"<p>Reads one or more files from the knowledge base.</p> <p>Parameters: - <code>paths</code> (array of strings, required) \u2014 List of relative file paths</p> <p>Example: <pre><code>{\n  \"paths\": [\"topics/ai/neural-networks.md\", \"topics/tech/python.md\"]\n}\n</code></pre></p> <p>Returns: <pre><code>{\n  \"success\": true,\n  \"files_read\": 2,\n  \"results\": [\n    {\n      \"path\": \"topics/ai/neural-networks.md\",\n      \"full_path\": \"/path/to/kb/topics/ai/neural-networks.md\",\n      \"content\": \"# Neural Networks\\n\\n...\",\n      \"size\": 1234\n    }\n  ],\n  \"errors\": null\n}\n</code></pre></p> <p>Notes: - Reads multiple files in a single call - Validates paths to prevent path traversal - Returns content and metadata - Handles per-file errors</p>"},{"location":"agents/kb-reading-tools/#2-kb_list_directory-list-directory-contents","title":"2. <code>kb_list_directory</code> \u2014 List directory contents","text":"<p>Lists files and folders at a given path.</p> <p>Parameters: - <code>path</code> (string, required) \u2014 Relative directory path; empty for root - <code>recursive</code> (boolean, optional) \u2014 Recursively list subdirectories (default false)</p> <p>Example: <pre><code>{\n  \"path\": \"topics/ai\",\n  \"recursive\": false\n}\n</code></pre></p> <p>Returns: <pre><code>{\n  \"success\": true,\n  \"path\": \"topics/ai\",\n  \"recursive\": false,\n  \"files\": [\n    { \"path\": \"topics/ai/neural-networks.md\", \"name\": \"neural-networks.md\", \"size\": 1234 }\n  ],\n  \"directories\": [\n    { \"path\": \"topics/ai/machine-learning\", \"name\": \"machine-learning\" }\n  ],\n  \"file_count\": 1,\n  \"directory_count\": 1\n}\n</code></pre></p>"},{"location":"agents/kb-reading-tools/#3-kb_search_files-search-files-by-name","title":"3. <code>kb_search_files</code> \u2014 Search files by name","text":"<p>Searches files and folders by name or glob pattern.</p> <p>Parameters: - <code>pattern</code> (string, required) \u2014 Glob pattern (<code>*</code>, <code>?</code>, <code>[]</code>) - <code>case_sensitive</code> (boolean, optional) \u2014 Case-sensitive search (default false)</p> <p>Examples: - <code>*.md</code> \u2014 all markdown files - <code>ai/**/*.md</code> \u2014 all markdown files under <code>ai</code> recursively - <code>*neural*</code> \u2014 names containing \"neural\"</p> <p>Example: <pre><code>{ \"pattern\": \"*neural*.md\", \"case_sensitive\": false }\n</code></pre></p> <p>Returns: <pre><code>{\n  \"success\": true,\n  \"pattern\": \"*neural*.md\",\n  \"case_sensitive\": false,\n  \"files\": [\n    { \"path\": \"topics/ai/neural-networks.md\", \"name\": \"neural-networks.md\", \"size\": 1234 }\n  ],\n  \"directories\": [],\n  \"file_count\": 1,\n  \"directory_count\": 0\n}\n</code></pre></p>"},{"location":"agents/kb-reading-tools/#4-kb_search_content-full-text-search","title":"4. <code>kb_search_content</code> \u2014 Full-text search","text":"<p>Searches text inside files.</p> <p>Parameters: - <code>query</code> (string, required) - <code>case_sensitive</code> (boolean, optional) \u2014 default false - <code>file_pattern</code> (string, optional) \u2014 glob to filter files (default <code>*.md</code>)</p> <p>Example: <pre><code>{ \"query\": \"machine learning\", \"case_sensitive\": false, \"file_pattern\": \"*.md\" }\n</code></pre></p> <p>Returns: <pre><code>{\n  \"success\": true,\n  \"query\": \"machine learning\",\n  \"case_sensitive\": false,\n  \"file_pattern\": \"*.md\",\n  \"matches\": [\n    {\n      \"path\": \"topics/ai/neural-networks.md\",\n      \"name\": \"neural-networks.md\",\n      \"occurrences\": 3,\n      \"matches\": [\n        {\n          \"line_number\": 5,\n          \"line\": \"Machine learning is a subset of AI\",\n          \"context\": \"# Introduction\\n\\nMachine learning is a subset of AI\\nthat focuses on...\"\n        }\n      ]\n    }\n  ],\n  \"files_found\": 1\n}\n</code></pre></p> <p>Security: - Validates paths to prevent traversal - Access is limited to <code>kb_root_path</code></p>"},{"location":"agents/kb-reading-tools/#usage-examples","title":"Usage examples","text":""},{"location":"agents/kb-reading-tools/#scenario-1-check-existing-content-before-creating","title":"Scenario 1: Check existing content before creating","text":"<pre><code># Search existing files\nresult = await agent._execute_tool({\n    \"tool_name\": \"kb_search_files\",\n    \"tool_params\": {\"pattern\": \"*neural*.md\"}\n})\n\n# If found, read them\nif result[\"file_count\"] &gt; 0:\n    read_result = await agent._execute_tool({\n        \"tool_name\": \"kb_read_file\",\n        \"tool_params\": {\"paths\": [f[\"path\"] for f in result[\"files\"]]}\n    })\n    # Analyze to avoid duplication\n</code></pre>"},{"location":"agents/kb-reading-tools/#scenario-2-structured-kb-exploration","title":"Scenario 2: Structured KB exploration","text":"<pre><code># List all categories\ndirs = await agent._execute_tool({\n    \"tool_name\": \"kb_list_directory\",\n    \"tool_params\": {\"path\": \"topics\", \"recursive\": False}\n})\n\n# For each category, get stats\nfor category in dirs[\"directories\"]:\n    files = await agent._execute_tool({\n        \"tool_name\": \"kb_list_directory\",\n        \"tool_params\": {\"path\": category[\"path\"], \"recursive\": True}\n    })\n</code></pre>"},{"location":"agents/kb-reading-tools/#scenario-3-find-related-topics","title":"Scenario 3: Find related topics","text":"<pre><code># Find all mentions of \"Python\"\npython_refs = await agent._execute_tool({\n    \"tool_name\": \"kb_search_content\",\n    \"tool_params\": {\"query\": \"Python\", \"file_pattern\": \"*.md\"}\n})\n</code></pre>"},{"location":"agents/kb-reading-tools/#integration-with-agent-loop","title":"Integration with agent loop","text":"<p>These tools are available in the agent toolset and can be called via function calling.</p> <pre><code>agent = AutonomousAgent(\n    llm_connector=openai_connector,\n    kb_root_path=Path(\"./my_knowledge_base\")\n)\n\nresult = await agent.process({\n    \"text\": \"Find and summarize all articles about machine learning\"\n})\n</code></pre> <p>LLM decides: 1. Which tools to use 2. In what order 3. How to combine results</p>"},{"location":"agents/kb-reading-tools/#performance","title":"Performance","text":"<p>Recommendations: - Read a handful of files at once (10\u201320 max) - Avoid recursive listings unless needed - Use specific glob patterns rather than <code>*</code> - Provide <code>file_pattern</code> for content searches</p> <p>Limits: - <code>kb_search_content</code> returns up to 5 matches per file - Recursive listing can be slow on large KBs</p>"},{"location":"agents/mcp-config-format/","title":"MCP Server Configuration Format","text":"<p>This document describes the standard MCP (Model Context Protocol) server configuration format used in this project.</p>"},{"location":"agents/mcp-config-format/#overview","title":"Overview","text":"<p>The configuration file <code>data/mcp_servers/mcp-hub.json</code> follows the standard MCP configuration format that is compatible with:</p> <ul> <li>\u2713 Cursor MCP</li> <li>\u2713 Claude Desktop</li> <li>\u2713 Qwen CLI</li> <li>\u2713 Other MCP clients</li> </ul>"},{"location":"agents/mcp-config-format/#standard-configuration-structure","title":"Standard Configuration Structure","text":"<p>All MCP server configurations follow this top-level structure:</p> <pre><code>{\n  \"mcpServers\": {\n    \"server-name\": {\n      // Server configuration here\n    }\n  }\n}\n</code></pre>"},{"location":"agents/mcp-config-format/#httpsse-transport-default","title":"HTTP/SSE Transport (Default)","text":"<p>For servers using HTTP with Server-Sent Events (SSE), the configuration format is:</p> <pre><code>{\n  \"mcpServers\": {\n    \"mcp-hub\": {\n      \"url\": \"http://127.0.0.1:8765/sse\",\n      \"timeout\": 10000,\n      \"trust\": true,\n      \"description\": \"MCP Hub - Built-in memory tools and server registry\",\n      \"tools\": [\"store_memory\", \"retrieve_memory\", \"list_categories\"]\n    }\n  }\n}\n</code></pre>"},{"location":"agents/mcp-config-format/#httpsse-fields","title":"HTTP/SSE Fields","text":"Field Type Required Description <code>url</code> string \u2713 SSE endpoint URL (typically <code>/sse</code> path) <code>timeout</code> number \u2713 Connection timeout in milliseconds <code>trust</code> boolean \u2713 Whether to trust this server <code>description</code> string \u2713 Human-readable server description"},{"location":"agents/mcp-config-format/#advantages-of-httpsse","title":"Advantages of HTTP/SSE","text":"<ul> <li>\u2713 Better compatibility with network environments</li> <li>\u2713 Easier debugging with standard HTTP tools</li> <li>\u2713 Single server instance can handle multiple clients</li> <li>\u2713 Works across different processes and machines</li> </ul>"},{"location":"agents/mcp-config-format/#stdio-transport","title":"stdio Transport","text":"<p>For servers using standard input/output, the configuration format is:</p> <pre><code>{\n  \"mcpServers\": {\n    \"mcp-hub\": {\n      \"command\": \"python\",\n      \"args\": [\"-m\", \"src.mcp.mcp_hub_server\"],\n      \"cwd\": \"/path/to/project\",\n      \"env\": {},\n      \"timeout\": 10000,\n      \"trust\": true,\n      \"description\": \"MCP Hub - Built-in memory tools and server registry\"\n    }\n  }\n}\n</code></pre>"},{"location":"agents/mcp-config-format/#stdio-fields","title":"stdio Fields","text":"Field Type Required Description <code>command</code> string \u2713 Command to execute (e.g., \"python\", \"node\") <code>args</code> array \u2713 Command arguments <code>cwd</code> string \u2713 Working directory for the process <code>env</code> object \u2713 Environment variables <code>timeout</code> number \u2713 Connection timeout in milliseconds <code>trust</code> boolean \u2713 Whether to trust this server <code>description</code> string \u2713 Human-readable server description"},{"location":"agents/mcp-config-format/#advantages-of-stdio","title":"Advantages of stdio","text":"<ul> <li>\u2713 Simpler for local-only scenarios</li> <li>\u2713 One server instance per client</li> <li>\u2713 No network ports required</li> <li>\u2713 Easier process isolation</li> </ul>"},{"location":"agents/mcp-config-format/#our-implementation","title":"Our Implementation","text":""},{"location":"agents/mcp-config-format/#generated-configuration","title":"Generated Configuration","text":"<p>When the bot starts, it automatically generates <code>data/mcp_servers/mcp-hub.json</code> with:</p> <ol> <li>HTTP/SSE configuration (default) - Used for client connections</li> <li>stdio variant (reference) - Available in <code>_stdio_variant</code> field for alternative setups</li> </ol> <p>Example generated file:</p> <pre><code>{\n  \"mcpServers\": {\n    \"mcp-hub\": {\n      \"url\": \"http://127.0.0.1:8765/sse\",\n      \"timeout\": 10000,\n      \"trust\": true,\n      \"description\": \"MCP Hub - Built-in memory tools and server registry\",\n      \"_transport\": \"http\",\n      \"_command\": \"python\",\n      \"_args\": [\"-m\", \"src.mcp.mcp_hub_server\", \"--host\", \"127.0.0.1\", \"--port\", \"8765\"],\n      \"_cwd\": \"/workspace\"\n    }\n  }\n}\n</code></pre>"},{"location":"agents/mcp-config-format/#internal-metadata-fields","title":"Internal Metadata Fields","text":"<p>Fields prefixed with <code>_</code> are used internally and are not part of the standard MCP format:</p> <ul> <li><code>_transport</code>: Transport type (\"http\" or \"stdio\")</li> <li><code>_command</code>: Command for internal process management</li> <li><code>_args</code>: Arguments for internal process management</li> <li><code>_cwd</code>: Working directory for internal process management</li> <li><code>_stdio_variant</code>: Complete stdio configuration for reference</li> </ul> <p>These fields are ignored by standard MCP clients and provide additional metadata for our internal tooling.</p>"},{"location":"agents/mcp-config-format/#using-the-configuration","title":"Using the Configuration","text":""},{"location":"agents/mcp-config-format/#with-qwen-cli","title":"With Qwen CLI","text":"<p>The Qwen CLI configuration generator (<code>qwen_config_generator.py</code>) creates compatible configurations:</p> <pre><code>from src.agents.mcp.qwen_config_generator import setup_qwen_mcp_config\n\n# HTTP/SSE mode (default)\nsetup_qwen_mcp_config(\n    global_config=True,\n    use_http=True,\n    http_port=8765\n)\n\n# stdio mode\nsetup_qwen_mcp_config(\n    global_config=True,\n    use_http=False\n)\n</code></pre>"},{"location":"agents/mcp-config-format/#with-python-mcp-client","title":"With Python MCP Client","text":"<pre><code>from src.agents.mcp.memory.memory_tool import MemoryMCPTool\n\ntool = MemoryMCPTool()\nconfig = tool.mcp_server_config\n\n# Config is automatically loaded from mcp-hub.json (with legacy fallbacks)\n# and supports both HTTP/SSE and stdio formats\n</code></pre>"},{"location":"agents/mcp-config-format/#with-cursor-claude-desktop","title":"With Cursor / Claude Desktop","text":"<p>Copy the configuration (without internal <code>_</code> fields) to:</p> <ul> <li>Cursor: <code>.mcp.json</code> in project root</li> <li>Claude Desktop: <code>~/Library/Application Support/Claude/claude_desktop_config.json</code> (macOS)</li> </ul>"},{"location":"agents/mcp-config-format/#validation","title":"Validation","text":"<p>To validate your configuration:</p> <pre><code>python3 test_mcp_config_format_simple.py\n</code></pre> <p>This will:</p> <ol> <li>Create a sample configuration</li> <li>Validate the format</li> <li>Show compatibility information</li> <li>Display both HTTP/SSE and stdio variants</li> </ol>"},{"location":"agents/mcp-config-format/#references","title":"References","text":"<ul> <li>Model Context Protocol Specification</li> <li>Cursor MCP Documentation</li> <li>Claude Desktop MCP Support</li> <li>Qwen Code CLI Agent</li> </ul>"},{"location":"agents/mcp-config-format/#migration-from-old-format","title":"Migration from Old Format","text":"<p>If you have an old-format configuration file, it will be automatically replaced with the standard format when the bot starts. The old format looked like:</p> <pre><code>{\n  \"name\": \"mem-agent\",\n  \"command\": \"python\",\n  \"args\": [...],\n  \"working_dir\": \"...\",\n  \"enabled\": true,\n  \"transport\": \"http\"\n}\n</code></pre> <p>This non-standard format is no longer supported. Delete the old <code>mem-agent.json</code> and let the bot recreate it in the standard format.</p>"},{"location":"agents/mcp-server-registry/","title":"MCP Server Registry","text":"<p>The MCP (Model Context Protocol) Server Registry provides a flexible system for discovering, managing, and connecting to MCP servers through simple JSON configuration files.</p>"},{"location":"agents/mcp-server-registry/#overview","title":"Overview","text":"<p>The registry system allows you to:</p> <ul> <li>Discover servers automatically from JSON configuration files</li> <li>Enable/disable servers through configuration</li> <li>Add custom MCP servers by uploading JSON files</li> <li>Integrate external MCP servers without modifying code</li> </ul>"},{"location":"agents/mcp-server-registry/#architecture","title":"Architecture","text":"<p>The MCP server system consists of three main components:</p> <ol> <li>MCP Server Registry - Discovers and manages server configurations</li> <li>MCP Registry Client - Connects to enabled servers</li> <li>MCP Tools - Agent tools that use MCP servers</li> </ol> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         Agent with MCP Support              \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                             \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u2502\n\u2502  \u2502   MCP Registry Client             \u2502     \u2502\n\u2502  \u2502   - Discovers enabled servers     \u2502     \u2502\n\u2502  \u2502   - Creates MCP clients           \u2502     \u2502\n\u2502  \u2502   - Manages connections           \u2502     \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2502\n\u2502           \u2502                                 \u2502\n\u2502           \u25bc                                 \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u2502\n\u2502  \u2502   MCP Server Registry             \u2502     \u2502\n\u2502  \u2502   - Scans data/mcp_servers/*.json \u2502     \u2502\n\u2502  \u2502   - Loads server configurations   \u2502     \u2502\n\u2502  \u2502   - Manages enable/disable state  \u2502     \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2502\n\u2502                                             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"agents/mcp-server-registry/#server-configuration","title":"Server Configuration","text":""},{"location":"agents/mcp-server-registry/#json-format","title":"JSON Format","text":"<p>MCP server configurations are stored as JSON files in <code>data/mcp_servers/</code>:</p> <pre><code>{\n  \"name\": \"server-name\",\n  \"description\": \"Human-readable description of the server\",\n  \"command\": \"python\",\n  \"args\": [\"-m\", \"package.module\"],\n  \"env\": {\n    \"ENV_VAR\": \"value\"\n  },\n  \"working_dir\": \"/path/to/directory\",\n  \"enabled\": true\n}\n</code></pre>"},{"location":"agents/mcp-server-registry/#fields","title":"Fields","text":"<ul> <li>name (required): Unique identifier for the server</li> <li>description (required): Human-readable description</li> <li>command (required): Command to execute the server process</li> <li>args (optional): Command-line arguments as array</li> <li>env (optional): Environment variables as object</li> <li>working_dir (optional): Working directory for the server process</li> <li>enabled (optional, default: true): Whether the server is enabled</li> </ul>"},{"location":"agents/mcp-server-registry/#example-memory-agent-server","title":"Example: Memory Agent Server","text":"<pre><code>{\n  \"name\": \"mem-agent\",\n  \"description\": \"Local memory agent with intelligent memory management\",\n  \"command\": \"python\",\n  \"args\": [\"-m\", \"src.mem_agent.server\"],\n  \"working_dir\": \"/workspace\",\n  \"enabled\": true\n}\n</code></pre>"},{"location":"agents/mcp-server-registry/#adding-mcp-servers","title":"Adding MCP Servers","text":""},{"location":"agents/mcp-server-registry/#method-1-installation-script","title":"Method 1: Installation Script","text":"<p>For built-in servers like mem-agent, use the installation script:</p> <pre><code>python scripts/install_mem_agent.py\n</code></pre> <p>This automatically:</p> <ol> <li>Installs dependencies</li> <li>Downloads required models</li> <li>Creates the MCP server configuration</li> <li>Sets up directory structure</li> </ol>"},{"location":"agents/mcp-server-registry/#method-2-manual-configuration","title":"Method 2: Manual Configuration","text":"<p>Create a JSON file in <code>data/mcp_servers/</code>:</p> <pre><code>cat &gt; data/mcp_servers/my-server.json &lt;&lt; EOF\n{\n  \"name\": \"my-server\",\n  \"description\": \"My custom MCP server\",\n  \"command\": \"npx\",\n  \"args\": [\"@my-org/mcp-server\"],\n  \"enabled\": true\n}\nEOF\n</code></pre>"},{"location":"agents/mcp-server-registry/#method-3-programmatic-addition","title":"Method 3: Programmatic Addition","text":"<pre><code>from src.mcp_registry import MCPServersManager\n\nmanager = MCPServersManager()\nmanager.initialize()\n\n# Add from JSON string\njson_config = '''\n{\n  \"name\": \"custom-server\",\n  \"description\": \"Custom MCP server\",\n  \"command\": \"node\",\n  \"args\": [\"server.js\"]\n}\n'''\n\nsuccess = manager.add_server_from_json(json_config)\n</code></pre>"},{"location":"agents/mcp-server-registry/#managing-servers","title":"Managing Servers","text":""},{"location":"agents/mcp-server-registry/#list-all-servers","title":"List All Servers","text":"<pre><code>from src.mcp_registry import MCPServersManager\n\nmanager = MCPServersManager()\nmanager.initialize()\n\n# Get all servers\nall_servers = manager.get_all_servers()\nfor server in all_servers:\n    status = \"enabled\" if server.enabled else \"disabled\"\n    print(f\"{server.name}: {server.description} ({status})\")\n\n# Get only enabled servers\nenabled_servers = manager.get_enabled_servers()\nprint(f\"\\nEnabled servers: {len(enabled_servers)}\")\n</code></pre>"},{"location":"agents/mcp-server-registry/#enabledisable-servers","title":"Enable/Disable Servers","text":"<pre><code># Enable a server\nmanager.enable_server(\"mem-agent\")\n\n# Disable a server\nmanager.disable_server(\"mem-agent\")\n\n# Get summary\nsummary = manager.get_servers_summary()\nprint(f\"Total: {summary['total']}, Enabled: {summary['enabled']}\")\n</code></pre>"},{"location":"agents/mcp-server-registry/#remove-server","title":"Remove Server","text":"<pre><code># Remove server configuration\nmanager.remove_server(\"my-server\")\n</code></pre>"},{"location":"agents/mcp-server-registry/#using-mcp-servers-in-agents","title":"Using MCP Servers in Agents","text":""},{"location":"agents/mcp-server-registry/#automatic-discovery","title":"Automatic Discovery","text":"<p>The MCP registry client automatically discovers and connects to enabled servers:</p> <pre><code>from src.agents.mcp import MCPRegistryClient\n\n# Create registry client\nclient = MCPRegistryClient()\nclient.initialize()\n\n# Connect to all enabled servers\nconnected = await client.connect_all_enabled()\nprint(f\"Connected to {len(connected)} servers\")\n\n# List connected servers\nfor name in connected:\n    print(f\"- {name}\")\n</code></pre>"},{"location":"agents/mcp-server-registry/#using-specific-server","title":"Using Specific Server","text":"<pre><code># Get a specific server's client\nmem_agent_client = client.get_client(\"mem-agent\")\n\nif mem_agent_client and mem_agent_client.is_connected:\n    # Use the client\n    result = await mem_agent_client.call_tool(\n        \"use_memory_agent\",\n        {\"question\": \"What's my name?\"}\n    )\n    print(result)\n</code></pre>"},{"location":"agents/mcp-server-registry/#bot-integration","title":"Bot Integration","text":"<p>Users can add MCP servers through the Telegram bot by uploading JSON files.</p>"},{"location":"agents/mcp-server-registry/#future-bot-command-todo","title":"Future Bot Command (TODO)","text":"<pre><code>/mcp add &lt;server-name&gt;\n</code></pre> <p>Then upload a JSON file with the server configuration.</p> <pre><code>/mcp list\n/mcp enable &lt;server-name&gt;\n/mcp disable &lt;server-name&gt;\n/mcp remove &lt;server-name&gt;\n</code></pre>"},{"location":"agents/mcp-server-registry/#configuration-in-settings","title":"Configuration in Settings","text":"<p>MCP servers can be configured through <code>config.yaml</code> or environment variables:</p> <pre><code># Enable MCP support\nAGENT_ENABLE_MCP: true\nAGENT_ENABLE_MCP_MEMORY: true\n\n# MCP servers postfix (per-user within KB)\n\n# Memory agent settings\nMEM_AGENT_MODEL: BAAI/bge-m3\nMEM_AGENT_MODEL_PRECISION: 4bit\nMEM_AGENT_BACKEND: auto\n</code></pre>"},{"location":"agents/mcp-server-registry/#best-practices","title":"Best Practices","text":""},{"location":"agents/mcp-server-registry/#server-configuration_1","title":"Server Configuration","text":"<ol> <li>Use descriptive names: Make server names clear and unique</li> <li>Provide good descriptions: Help users understand what the server does</li> <li>Set appropriate timeouts: Configure server timeouts based on expected response time</li> <li>Use relative paths: When possible, use relative paths for portability</li> </ol>"},{"location":"agents/mcp-server-registry/#security","title":"Security","text":"<ol> <li>Validate server configurations: Check JSON files before adding</li> <li>Limit server permissions: Use working_dir to restrict file access</li> <li>Review environment variables: Don't expose sensitive credentials</li> <li>Monitor server processes: Ensure servers don't leak resources</li> </ol>"},{"location":"agents/mcp-server-registry/#performance","title":"Performance","text":"<ol> <li>Enable only needed servers: Disable unused servers to save resources</li> <li>Use connection pooling: Reuse MCP clients when possible</li> <li>Handle errors gracefully: Implement proper error handling for server failures</li> </ol>"},{"location":"agents/mcp-server-registry/#troubleshooting","title":"Troubleshooting","text":""},{"location":"agents/mcp-server-registry/#server-wont-connect","title":"Server Won't Connect","text":"<ol> <li>Check if server is enabled:</li> </ol> <pre><code>server = manager.get_server(\"server-name\")\nprint(f\"Enabled: {server.enabled}\")\n</code></pre> <ol> <li>Verify command and args are correct:</li> </ol> <pre><code>print(f\"Command: {server.command}\")\nprint(f\"Args: {server.args}\")\n</code></pre> <ol> <li>Check server process logs:</li> </ol> <pre><code># Run server manually to see errors\npython -m src.mem_agent.server\n</code></pre>"},{"location":"agents/mcp-server-registry/#server-configuration-not-loading","title":"Server Configuration Not Loading","text":"<ol> <li>Verify JSON file location:</li> </ol> <pre><code>ls -la data/mcp_servers/\n</code></pre> <ol> <li>Check JSON syntax:</li> </ol> <pre><code>python -m json.tool data/mcp_servers/server-name.json\n</code></pre> <ol> <li>Re-discover servers:</li> </ol> <pre><code>manager = MCPServersManager()\nmanager.initialize()  # Forces re-discovery\n</code></pre>"},{"location":"agents/mcp-server-registry/#memory-agent-issues","title":"Memory Agent Issues","text":"<p>See mem-agent-setup.md for specific mem-agent troubleshooting.</p>"},{"location":"agents/mcp-server-registry/#see-also","title":"See Also","text":"<ul> <li>MCP Tools - Overview of MCP tools for agents</li> <li>Memory Agent Setup - Detailed mem-agent setup guide</li> <li>Agent Architecture - Overall agent architecture</li> </ul>"},{"location":"agents/mcp-tools/","title":"MCP (Model Context Protocol) Tools","text":"<p>The autonomous agent supports MCP (Model Context Protocol) tools, allowing you to connect external tools and services as agent capabilities.</p>"},{"location":"agents/mcp-tools/#overview","title":"Overview","text":"<p>MCP is a protocol for connecting AI agents to external tools and data sources. The agent can communicate with MCP servers to access their tools and functionality.</p>"},{"location":"agents/mcp-tools/#built-in-mcp-tools","title":"Built-in MCP Tools","text":"<p>The MCP Hub provides built-in tools that are dynamically available based on configuration and dependencies.</p> <p>Tool availability is checked at startup - disabled tools will NOT appear in the tools list.</p> <p>Memory Tools (Conditionally Available): - Tools: <code>memory_store</code>, <code>memory_search</code>, <code>mcp_memory</code> (multi-action) - Requirement: <code>AGENT_ENABLE_MCP_MEMORY: true</code> (default: false) - Dependencies: None (uses basic JSON storage) - Total: 3 tools when enabled</p> <p>Vector Search Tools (Conditionally Available): - Tools: <code>vector_search</code>, <code>reindex_vector</code> - Requirements:   - Configuration: <code>VECTOR_SEARCH_ENABLED: true</code> (default: false)   - Dependencies: <code>pip install -e '.[vector-search]'</code> - Total: 2 tools when enabled</p> <p>Possible Configurations: - 0 tools: Both disabled (minimal mode) - 3 tools: Only memory enabled (typical setup) - 2 tools: Only vector search enabled (rare) - 5 tools: Both enabled (full features)</p>"},{"location":"agents/mcp-tools/#memory-tools","title":"Memory Tools","text":"<p>\u2699\ufe0f Configurable via AGENT_ENABLE_MCP_MEMORY</p> <p>Personal note-taking and search system for the agent using JSON storage (no dependencies required).</p> <p>Availability: These tools are available when: - Configuration: <code>AGENT_ENABLE_MCP_MEMORY: true</code> in config.yaml (default: false) - Dependencies: None (uses basic JSON storage with automatic fallback)</p> <p>Purpose: This tool is specifically designed for the main agent to:</p> <ul> <li>Record notes: Write down important information, findings, or context during task execution</li> <li>Search notes: Find and recall previously recorded information</li> <li>Maintain working memory: Keep context across multiple LLM calls within a single session</li> </ul> <p>Use Cases:</p> <ul> <li>During complex multi-step tasks, the agent records findings and retrieves them later</li> <li>Autonomous agents (like qwen code cli) making many LLM calls in one session</li> <li>Maintaining context when the agent needs to remember what it discovered earlier</li> </ul> <p>Tools (agent-level):</p> <ul> <li><code>memory_store</code> - Store information in memory</li> <li><code>memory_search</code> - Retrieve information from memory</li> <li><code>mcp_memory</code> - Unified multi-action interface (store/search/list)</li> </ul> <p>Note: If disabled, these tools will NOT appear in the MCP tools list.</p>"},{"location":"agents/mcp-tools/#vector-search-tools","title":"Vector Search Tools","text":"<p>\u2699\ufe0f Configurable via VECTOR_SEARCH_ENABLED + Dependencies Required</p> <p>Semantic vector search in knowledge base using AI-powered embeddings.</p> <p>Availability: These tools are available when: 1. Configuration: <code>VECTOR_SEARCH_ENABLED: true</code> in config.yaml (default: false) 2. Dependencies: Vector search packages installed (<code>pip install -e '.[vector-search]'</code>)    - sentence-transformers (for embeddings)    - faiss-cpu or qdrant-client (for vector storage)</p> <p>Purpose: This tool provides semantic search capabilities for the knowledge base:</p> <ul> <li>Vector Search: Find relevant information using natural language queries</li> <li>Semantic Understanding: Search by meaning, not just keywords</li> <li>Reindexing: Update the vector index when knowledge base changes</li> </ul> <p>Use Cases:</p> <ul> <li>Finding relevant documentation using natural language questions</li> <li>Semantic search that understands context and meaning</li> <li>Searching for similar concepts even without exact keyword matches</li> </ul> <p>Tools:</p> <ul> <li><code>vector_search</code> - Semantic search in knowledge base</li> <li><code>reindex_vector</code> - Reindex knowledge base for vector search</li> </ul> <p>Note: If disabled or dependencies missing, these tools will NOT appear in the MCP tools list.</p>"},{"location":"agents/mcp-tools/#configuration","title":"Configuration","text":""},{"location":"agents/mcp-tools/#enable-mcp-tools","title":"Enable MCP Tools","text":"<p>Add to your <code>config.yaml</code>:</p> <pre><code># MCP Settings\nAGENT_ENABLE_MCP: true\nAGENT_ENABLE_MCP_MEMORY: true\n\n# Vector Search Settings\nVECTOR_SEARCH_ENABLED: true\nVECTOR_EMBEDDING_PROVIDER: sentence_transformers\nVECTOR_EMBEDDING_MODEL: all-MiniLM-L6-v2\n# Optional vector store selection (default: faiss)\n# VECTOR_STORE_PROVIDER: faiss  # or qdrant\n</code></pre> <p>Or set environment variables:</p> <pre><code>export AGENT_ENABLE_MCP=true\nexport AGENT_ENABLE_MCP_MEMORY=true\n\n# Vector Search\nexport VECTOR_SEARCH_ENABLED=true\nexport VECTOR_EMBEDDING_PROVIDER=sentence_transformers\nexport VECTOR_EMBEDDING_MODEL=all-MiniLM-L6-v2\n# Optional:\n# export VECTOR_STORE_PROVIDER=faiss\n</code></pre>"},{"location":"agents/mcp-tools/#install-mcp-server","title":"Install MCP Server","text":"<p>Most setups do not require an external MCP server for memory \u2014 the MCP Hub provides built\u2011in memory tools with JSON storage. If you plan to use the advanced LLM\u2011powered \"mem-agent\" storage type, you may optionally install the Node.js server <code>mem-agent-mcp</code>:</p> <pre><code># Install globally\nnpm install -g @firstbatch/mem-agent-mcp\n\n# Or use npx (no installation required)\n# The tool will automatically use npx if the server is not installed\n</code></pre>"},{"location":"agents/mcp-tools/#set-api-keys","title":"Set API Keys","text":"<p>The memory agent requires an LLM API key:</p> <pre><code># For OpenAI\nexport OPENAI_API_KEY=your_key_here\n\n# For Anthropic\nexport ANTHROPIC_API_KEY=your_key_here\n</code></pre>"},{"location":"agents/mcp-tools/#usage","title":"Usage","text":""},{"location":"agents/mcp-tools/#enable-in-code","title":"Enable in Code","text":"<pre><code>from src.agents.autonomous_agent import AutonomousAgent\nfrom src.agents.llm_connectors import OpenAIConnector\n\nagent = AutonomousAgent(\n    llm_connector=OpenAIConnector(api_key=\"your_key\"),\n    enable_mcp=True,\n    enable_mcp_memory=True,\n    enable_vector_search=True,\n    max_iterations=10\n)\n</code></pre>"},{"location":"agents/mcp-tools/#record-notes-store","title":"Record Notes (Store)","text":"<pre><code># The agent records a note during task execution\nresult = await agent.tool_manager.execute(\n    \"memory_store\",\n    {\n        \"content\": \"Found SQL injection vulnerability in login endpoint /api/auth\",\n        \"tags\": [\"security\", \"findings\"]\n    }\n)\n</code></pre>"},{"location":"agents/mcp-tools/#search-notes-recall","title":"Search Notes (Recall)","text":"<pre><code># Later, the agent searches its notes to remember\nresult = await agent.tool_manager.execute(\n    \"memory_search\",\n    {\n        \"query\": \"What security issues did I find?\",\n        \"limit\": 5\n    }\n)\n</code></pre>"},{"location":"agents/mcp-tools/#unified-note-management","title":"Unified Note Management","text":"<pre><code># Record a note\nawait agent.tool_manager.execute(\n    \"mcp_memory\",\n    {\n        \"action\": \"store\",\n        \"content\": \"Database uses PostgreSQL 14 with pgvector extension\",\n        \"context\": \"Infrastructure analysis\"\n    }\n)\n\n# Search notes to recall information\nawait agent.tool_manager.execute(\n    \"mcp_memory\",\n    {\n        \"action\": \"search\",\n        \"content\": \"What database technology is used?\"\n    }\n)\n\n# List all recorded notes\nawait agent.tool_manager.execute(\n    \"mcp_memory\",\n    {\n        \"action\": \"list\"\n    }\n)\n</code></pre>"},{"location":"agents/mcp-tools/#vector-search-in-knowledge-base","title":"Vector Search in Knowledge Base","text":"<pre><code># Semantic search in knowledge base\nresult = await agent.tool_manager.execute(\n    \"kb_vector_search\",\n    {\n        \"query\": \"How do I configure authentication?\",\n        \"top_k\": 5\n    }\n)\n\n# Reindex knowledge base after updates\nresult = await agent.tool_manager.execute(\n    \"kb_reindex_vector\",\n    {\n        \"force\": False  # Set to True to force reindexing\n    }\n)\n</code></pre>"},{"location":"agents/mcp-tools/#how-it-works","title":"How It Works","text":""},{"location":"agents/mcp-tools/#mcp-architecture","title":"MCP Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Autonomous Agent   \u2502\n\u2502                     \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502  Tool Manager \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n           \u2502\n           \u2502 Function Calls\n           \u2502\n           \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   MCP Client         \u2502\n\u2502   (Python)           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n           \u2502\n           \u2502 JSON-RPC over stdio\n           \u2502\n           \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   MCP Server         \u2502\n\u2502   (Node.js)          \u2502\n\u2502                      \u2502\n\u2502  mem-agent-mcp       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n           \u2502\n           \u2502 API Calls\n           \u2502\n           \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   LLM API            \u2502\n\u2502   (OpenAI, etc.)     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"agents/mcp-tools/#communication-flow","title":"Communication Flow","text":"<ol> <li>Agent Decision: The agent decides to use an MCP tool</li> <li>Tool Execution: The tool manager calls the MCP tool</li> <li>MCP Connection: The MCP client connects to the server (if not already connected)</li> <li>JSON-RPC Request: The client sends a JSON-RPC request over stdio</li> <li>Server Processing: The MCP server processes the request</li> <li>LLM Interaction: The server may call an LLM API for processing</li> <li>Response: The result is sent back through the chain</li> </ol>"},{"location":"agents/mcp-tools/#creating-custom-mcp-tools","title":"Creating Custom MCP Tools","text":"<p>You can create custom MCP tools by extending the <code>BaseMCPTool</code> class:</p> <pre><code>from src.mcp.base_mcp_tool import BaseMCPTool\nfrom src.mcp.client import MCPServerConfig\n\nclass MyCustomMCPTool(BaseMCPTool):\n    @property\n    def name(self) -&gt; str:\n        return \"my_custom_tool\"\n\n    @property\n    def description(self) -&gt; str:\n        return \"Description of what the tool does\"\n\n    @property\n    def parameters_schema(self) -&gt; Dict[str, Any]:\n        return {\n            \"type\": \"object\",\n            \"properties\": {\n                \"param1\": {\"type\": \"string\"},\n            },\n            \"required\": [\"param1\"]\n        }\n\n    @property\n    def mcp_server_config(self) -&gt; MCPServerConfig:\n        return MCPServerConfig(\n            command=\"npx\",\n            args=[\"@your/mcp-server\"],\n            env=os.environ.copy()\n        )\n\n    @property\n    def mcp_tool_name(self) -&gt; str:\n        return \"tool_name_in_server\"\n</code></pre>"},{"location":"agents/mcp-tools/#connecting-any-mcp-server","title":"Connecting Any MCP Server","text":"<p>To connect any MCP-compatible server:</p> <ol> <li>Install the MCP server (usually via npm)</li> <li>Create a tool class extending <code>BaseMCPTool</code></li> <li>Configure the server in <code>mcp_server_config</code></li> <li>Enable the tool in your configuration</li> <li>Register the tool in the tool manager</li> </ol> <p>See <code>src/mcp/memory/memory_tool.py</code> for a complete example.</p>"},{"location":"agents/mcp-tools/#troubleshooting","title":"Troubleshooting","text":""},{"location":"agents/mcp-tools/#mcp-server-not-found","title":"MCP Server Not Found","text":"<pre><code>Error: Failed to connect to MCP server\n</code></pre> <p>Solution: Install the MCP server:</p> <pre><code>npm install -g @firstbatch/mem-agent-mcp\n</code></pre>"},{"location":"agents/mcp-tools/#api-key-missing","title":"API Key Missing","text":"<pre><code>Error: API key not found\n</code></pre> <p>Solution: Set the appropriate API key:</p> <pre><code>export OPENAI_API_KEY=your_key_here\n</code></pre>"},{"location":"agents/mcp-tools/#connection-issues","title":"Connection Issues","text":"<pre><code>Error: Server process exited immediately\n</code></pre> <p>Solutions:</p> <ol> <li>Check that Node.js is installed: <code>node --version</code></li> <li>Check server installation: <code>npm list -g @firstbatch/mem-agent-mcp</code></li> <li>Try running the server manually: <code>npx @firstbatch/mem-agent-mcp</code></li> <li>Check server logs for errors</li> </ol>"},{"location":"agents/mcp-tools/#examples","title":"Examples","text":"<p>See <code>examples/mcp_memory_agent_example.py</code> for complete working examples.</p>"},{"location":"agents/mcp-tools/#references","title":"References","text":"<ul> <li>MCP Protocol Specification</li> <li>bge-m3 Model</li> <li>mem-agent-mcp Server</li> <li>MCP Python SDK</li> </ul>"},{"location":"agents/mem-agent-setup/","title":"Memory System Setup Guide","text":"<p>This guide covers the installation, configuration, and usage of the MCP Memory system - a flexible note-taking and search system for autonomous agents with multiple storage backends.</p>"},{"location":"agents/mem-agent-setup/#overview","title":"Overview","text":"<p>The MCP Memory system is a local note-taking and search system specifically designed for autonomous agents. The agent uses it to:</p> <ul> <li>Record notes: Write down important information, findings, or context during task execution</li> <li>Search notes: Find and recall previously recorded information to \"remember\" details</li> <li>Maintain context: Keep working memory across multiple LLM calls within a single session</li> <li>Organize information: Intelligently structure and link related information (advanced modes)</li> </ul> <p>This is particularly useful for autonomous agents (like qwen code cli) that make many LLM calls within one continuous session.</p> <p>Deployment Model: The mem-agent system is designed for Docker-first deployment. LLM model inference is handled by separate containers (vLLM, SGLang, or LM Studio), not by direct Python dependencies. This keeps the main application lightweight and scalable.</p>"},{"location":"agents/mem-agent-setup/#storage-types","title":"Storage Types","text":"<p>The system supports three storage backends:</p>"},{"location":"agents/mem-agent-setup/#1-json-storage-default","title":"1. JSON Storage (Default)","text":"<ul> <li>Simple and Fast: File-based JSON storage with substring search</li> <li>No Dependencies: No ML models or additional libraries required</li> <li>Lightweight: Minimal memory footprint</li> <li>Best for: Most users, small to medium memory sizes, simple search needs</li> </ul>"},{"location":"agents/mem-agent-setup/#2-vector-storage","title":"2. Vector Storage","text":"<ul> <li>AI-Powered: Semantic search using embeddings from HuggingFace models (e.g., <code>BAAI/bge-m3</code>)</li> <li>Smart Search: Understands meaning, not just keywords</li> <li>Best for: Large memory sizes, complex queries, semantic understanding needed</li> <li>Requires: Additional dependencies (transformers, sentence-transformers)</li> </ul>"},{"location":"agents/mem-agent-setup/#3-mem-agent-storage-advanced","title":"3. Mem-Agent Storage (Advanced)","text":"<ul> <li>LLM-Based: Uses an LLM (driaforall/mem-agent) to reason about memory operations</li> <li>Structured Memory: Obsidian-style markdown files with wiki-links</li> <li>Intelligent Organization: Automatically creates and links entities, maintains relationships</li> <li>Best for: Complex scenarios requiring intelligent memory organization</li> <li>Requires: LLM inference container (vLLM/SGLang/LM Studio), lightweight dependencies (fastmcp)</li> </ul> <p>The storage type is configured via <code>MEM_AGENT_STORAGE_TYPE</code> setting (default: <code>json</code>).</p>"},{"location":"agents/mem-agent-setup/#quick-start","title":"Quick Start","text":""},{"location":"agents/mem-agent-setup/#docker-deployment-recommended","title":"Docker Deployment (Recommended)","text":"<p>The recommended way to deploy mem-agent is using Docker containers:</p> <pre><code># Start all services (bot, MCP hub, vLLM server)\ndocker-compose up -d\n\n# Or with SGLang backend for faster inference\ndocker-compose -f docker-compose.yml -f docker-compose.sglang.yml up -d\n\n# Or without GPU (JSON storage mode only)\ndocker-compose -f docker-compose.simple.yml up -d\n</code></pre> <p>The Docker setup automatically: 1. Installs lightweight dependencies (fastmcp, etc.) 2. Runs the LLM model in a separate container (vLLM/SGLang) 3. Configures MCP hub with memory tools 4. Sets up proper networking between containers</p> <p>See Docker Deployment Guide for more details.</p>"},{"location":"agents/mem-agent-setup/#local-installation-development-only","title":"Local Installation (Development Only)","text":"<p>For local development without Docker:</p> <pre><code>python scripts/install_mem_agent.py\n</code></pre> <p>Note: This will install lightweight dependencies only. You'll need to run a separate LLM server (vLLM, SGLang, or LM Studio) for mem-agent storage type.</p>"},{"location":"agents/mem-agent-setup/#configuration","title":"Configuration","text":"<p>Enable memory system in your <code>config.yaml</code>:</p> <pre><code># Enable MCP support\nAGENT_ENABLE_MCP: true\nAGENT_ENABLE_MCP_MEMORY: true\n\n# Memory storage settings\nMEM_AGENT_STORAGE_TYPE: json  # Storage type: \"json\", \"vector\", or \"mem-agent\"\nMEM_AGENT_MODEL: BAAI/bge-m3  # Model for embeddings (vector) or LLM (mem-agent)\nMEM_AGENT_MODEL_PRECISION: 4bit\nMEM_AGENT_BACKEND: auto\nMEM_AGENT_MAX_TOOL_TURNS: 20  # For mem-agent storage type only\n\n# MCP settings\n</code></pre> <p>Or use environment variables in <code>.env</code>:</p> <pre><code>AGENT_ENABLE_MCP=true\nAGENT_ENABLE_MCP_MEMORY=true\nMEM_AGENT_STORAGE_TYPE=json  # \"json\", \"vector\", or \"mem-agent\"\nMEM_AGENT_MODEL=BAAI/bge-m3  # or driaforall/mem-agent for LLM-based\nMEM_AGENT_MODEL_PRECISION=4bit\nMEM_AGENT_BACKEND=auto\n</code></pre>"},{"location":"agents/mem-agent-setup/#choosing-storage-type","title":"Choosing Storage Type","text":"<p>Use JSON storage (default) if:</p> <ul> <li>You want fast, lightweight storage</li> <li>Simple keyword search is sufficient</li> <li>You don't want to download ML models</li> <li>You have limited resources</li> </ul> <p>Use Vector storage if:</p> <ul> <li>You need semantic search (understands meaning)</li> <li>You have large amounts of memories</li> <li>You want AI-powered relevance ranking</li> <li>You have resources for ML models</li> </ul> <p>Use Mem-Agent storage if:</p> <ul> <li>You need intelligent memory organization</li> <li>You want structured Obsidian-style notes with wiki-links</li> <li>You need the system to understand relationships between entities</li> <li>You have resources for running an LLM</li> </ul> <p>To enable vector storage:</p> <ol> <li>Set <code>MEM_AGENT_STORAGE_TYPE: vector</code> in config</li> <li>Install embedding model dependencies (development only):</li> </ol> <pre><code>pip install sentence-transformers transformers torch\n</code></pre> <ol> <li>The embedding model will be downloaded automatically on first use</li> </ol> <p>To enable mem-agent storage:</p> <ol> <li>Set <code>MEM_AGENT_STORAGE_TYPE: mem-agent</code> in config</li> <li>Set <code>MEM_AGENT_MODEL: driaforall/mem-agent</code> in config</li> <li> <p>Docker (Recommended): Start vLLM/SGLang container - model downloads automatically:    <pre><code>docker-compose up -d vllm-server  # or use sglang overlay\n</code></pre></p> </li> <li> <p>Local Development: Run LLM server separately:    <pre><code># Option A: vLLM\nvllm serve driaforall/mem-agent --host 127.0.0.1 --port 8001\n\n# Option B: LM Studio - load model via UI\n# Option C: SGLang\npython -m sglang.launch_server --model driaforall/mem-agent --port 8001\n</code></pre></p> </li> <li> <p>Configure endpoint in <code>.env</code> or <code>config.yaml</code>:    <pre><code>MEM_AGENT_BASE_URL=http://127.0.0.1:8001/v1\nMEM_AGENT_OPENAI_API_KEY=lm-studio\n</code></pre></p> </li> </ol>"},{"location":"agents/mem-agent-setup/#verification","title":"Verification","text":"<p>Test that mem-agent is installed correctly:</p> <pre><code># Check if model is downloaded\nhuggingface-cli scan-cache | grep mem-agent\n\n# Verify MCP server configuration exists\ncat data/mcp_servers/mem-agent.json\n\n# Check memory directory (per-user)\nls -la data/memory/user_123/\n</code></pre>"},{"location":"agents/mem-agent-setup/#advanced-installation","title":"Advanced Installation","text":""},{"location":"agents/mem-agent-setup/#custom-model-location","title":"Custom Model Location","text":"<pre><code>python scripts/install_mem_agent.py \\\n  --model BAAI/bge-m3 \\\n  --precision 8bit \\\n  --workspace /path/to/workspace\n</code></pre>"},{"location":"agents/mem-agent-setup/#skip-model-download","title":"Skip Model Download","text":"<p>If you've already downloaded the model:</p> <pre><code>python scripts/install_mem_agent.py --skip-model-download\n</code></pre>"},{"location":"agents/mem-agent-setup/#platform-specific-backends","title":"Platform-Specific Backends","text":"<p>IMPORTANT: Direct Python backends (transformers, MLX, vLLM pip packages) are DEPRECATED for production use.</p> <p>Use Docker containers or external LLM servers instead:</p>"},{"location":"agents/mem-agent-setup/#docker-deployment-recommended_1","title":"Docker Deployment (Recommended)","text":"<pre><code># Linux/GPU: vLLM container\ndocker-compose up -d vllm-server\n\n# Linux/GPU: SGLang container (faster)\ndocker-compose -f docker-compose.yml -f docker-compose.sglang.yml up -d\n\n# macOS/No GPU: LM Studio\n# Download and run LM Studio, load driaforall/mem-agent model\n# Configure: MEM_AGENT_BASE_URL=http://host.docker.internal:1234/v1\n</code></pre>"},{"location":"agents/mem-agent-setup/#local-development","title":"Local Development","text":"<pre><code># Option 1: LM Studio (easiest, works on all platforms)\n# 1. Install LM Studio from https://lmstudio.ai/\n# 2. Load driaforall/mem-agent model\n# 3. Configure:\nexport MEM_AGENT_BASE_URL=http://127.0.0.1:1234/v1\nexport MEM_AGENT_OPENAI_API_KEY=lm-studio\n\n# Option 2: vLLM (Linux with GPU)\n# Install: pip install vllm\nvllm serve driaforall/mem-agent --host 127.0.0.1 --port 8001\nexport MEM_AGENT_BASE_URL=http://127.0.0.1:8001/v1\n\n# Option 3: SGLang (Linux with GPU, faster than vLLM)\n# Install: pip install sglang\npython -m sglang.launch_server --model driaforall/mem-agent --port 8001\nexport MEM_AGENT_BASE_URL=http://127.0.0.1:8001/v1\n</code></pre>"},{"location":"agents/mem-agent-setup/#memory-structure","title":"Memory Structure","text":"<p>The memory agent uses an Obsidian-like file structure stored per-user within each knowledge base:</p> <pre><code>knowledge_bases/\n\u2514\u2500\u2500 {user_kb_name}/       # Each user has their own KB\n    \u251c\u2500\u2500 .mcp_servers/     # Per-user MCP server configs\n    \u2502   \u2514\u2500\u2500 mem-agent.json\n    \u251c\u2500\u2500 memory/           # Per-user memory (postfix configurable)\n    \u2502   \u251c\u2500\u2500 user.md       # Personal information\n    \u2502   \u2514\u2500\u2500 entities/     # Entity files\n    \u2502       \u251c\u2500\u2500 person_name.md\n    \u2502       \u251c\u2500\u2500 company_name.md\n    \u2502       \u2514\u2500\u2500 place_name.md\n    \u2514\u2500\u2500 topics/           # User's notes\n</code></pre> <p>Key Points:</p> <ul> <li>Memory path is constructed as: <code>{kb_path}/{MEM_AGENT_MEMORY_POSTFIX}</code></li> <li>MCP servers are stored at: <code>{kb_path}/{MCP_SERVERS_POSTFIX}</code></li> <li>Each user gets their own isolated memory and MCP configuration</li> </ul>"},{"location":"agents/mem-agent-setup/#usermd-structure","title":"user.md Structure","text":"<pre><code># User Information\n- user_name: John Doe\n- user_age: 30\n- user_location: San Francisco, CA\n\n## User Relationships\n- employer: [[entities/acme_corp.md]]\n- spouse: [[entities/jane_doe.md]]\n\n## Preferences\n- favorite_color: blue\n- favorite_food: pizza\n</code></pre>"},{"location":"agents/mem-agent-setup/#entity-file-structure","title":"Entity File Structure","text":"<pre><code># Acme Corporation\n- entity_type: Company\n- industry: Technology\n- location: San Francisco, CA\n- founded: 2010\n\n## Employees\n- ceo: [[entities/john_smith.md]]\n</code></pre>"},{"location":"agents/mem-agent-setup/#available-tools","title":"Available Tools","text":"<p>The MCP Memory server provides three tools that the agent can use:</p>"},{"location":"agents/mem-agent-setup/#1-store_memory","title":"1. <code>store_memory</code>","text":"<p>Stores information in memory for later retrieval.</p> <p>Parameters: - <code>content</code> (string, required): Content to store in memory - <code>category</code> (string, optional): Category for organization (e.g., 'tasks', 'notes', 'ideas'). Default: \"general\" - <code>tags</code> (array of strings, optional): Tags for categorization - <code>metadata</code> (object, optional): Additional metadata</p> <p>Example: <pre><code>{\n  \"content\": \"Found authentication vulnerability in login.py\",\n  \"category\": \"security\",\n  \"tags\": [\"vulnerability\", \"authentication\"]\n}\n</code></pre></p>"},{"location":"agents/mem-agent-setup/#2-retrieve_memory","title":"2. <code>retrieve_memory</code>","text":"<p>Retrieves information from memory.</p> <p>Parameters: - <code>query</code> (string, optional): Search query. Returns all memories if not specified - <code>category</code> (string, optional): Filter by category - <code>tags</code> (array of strings, optional): Filter by tags - <code>limit</code> (integer, optional): Maximum number of results. Default: 10</p> <p>Example: <pre><code>{\n  \"query\": \"authentication\",\n  \"category\": \"security\",\n  \"limit\": 5\n}\n</code></pre></p>"},{"location":"agents/mem-agent-setup/#3-list_categories","title":"3. <code>list_categories</code>","text":"<p>Lists all memory categories with counts.</p> <p>Parameters: None</p> <p>Returns: List of categories with memory counts</p>"},{"location":"agents/mem-agent-setup/#usage","title":"Usage","text":""},{"location":"agents/mem-agent-setup/#through-agent","title":"Through Agent","text":"<p>The agent automatically uses mem-agent when enabled to record notes and search them:</p> <pre><code>from src.agents import AgentFactory\nfrom config.settings import settings\n\n# Create agent with mem-agent enabled\nagent = AgentFactory.from_settings(settings)\n\n# The agent can record notes during task execution\n# For example, during a complex task:\nresult = await agent.process({\n    \"text\": \"Analyze this codebase and suggest improvements\"\n})\n# The agent internally records findings like:\n# - \"Found authentication vulnerability in login.py\"\n# - \"Database queries missing indexes in user_service.py\"\n# - \"Found 15 TODO comments that need attention\"\n\n# Later in the same session, the agent can search its notes:\n# When asked about specific findings, the agent searches:\n# \"What security issues did I find?\"\n# And retrieves the authentication vulnerability note\n</code></pre>"},{"location":"agents/mem-agent-setup/#direct-api-advanced","title":"Direct API (Advanced)","text":"<pre><code>from config.settings import settings\nfrom pathlib import Path\n\n# Memory agent settings are now part of the main settings module\n# Construct paths based on user's KB:\nkb_path = Path(\"./knowledge_bases/user_kb_name\")  # Get from user settings\n\nprint(f\"Model: {settings.MEM_AGENT_MODEL}\")\nprint(f\"Memory postfix: {settings.MEM_AGENT_MEMORY_POSTFIX}\")\nprint(f\"Full memory path: {settings.get_mem_agent_memory_path(kb_path)}\")\nprint(f\"MCP servers dir: {settings.get_mcp_servers_dir(kb_path)}\")\nprint(f\"Backend: {settings.get_mem_agent_backend()}\")\n\n# The MemoryAgent and MemoryAgentMCPServer classes are planned for future development\n</code></pre>"},{"location":"agents/mem-agent-setup/#model-selection","title":"Model Selection","text":""},{"location":"agents/mem-agent-setup/#available-models","title":"Available Models","text":"<ul> <li>BAAI/bge-m3 (default) - High-quality multilingual embedding model</li> <li>Any sentence-transformers compatible model can be used</li> </ul>"},{"location":"agents/mem-agent-setup/#changing-models","title":"Changing Models","text":"<ol> <li>Update configuration:</li> </ol> <pre><code>MEM_AGENT_MODEL: sentence-transformers/all-MiniLM-L6-v2\nMEM_AGENT_MODEL_PRECISION: fp16\n</code></pre> <ol> <li>Download new model:</li> </ol> <pre><code>huggingface-cli download BAAI/bge-m3\n</code></pre> <ol> <li>Restart the application</li> </ol>"},{"location":"agents/mem-agent-setup/#model-download-management","title":"Model Download Management","text":"<p>Models are cached in HuggingFace cache directory:</p> <pre><code># Check downloaded models\nhuggingface-cli scan-cache\n\n# Delete specific model\nhuggingface-cli delete-cache --repo BAAI/bge-m3\n\n# Clear entire cache\nhuggingface-cli delete-cache\n</code></pre>"},{"location":"agents/mem-agent-setup/#configuration-options","title":"Configuration Options","text":""},{"location":"agents/mem-agent-setup/#settings-reference","title":"Settings Reference","text":"Setting Default Description <code>MEM_AGENT_STORAGE_TYPE</code> <code>json</code> Storage type: <code>json</code>, <code>vector</code>, or <code>mem-agent</code> <code>MEM_AGENT_MODEL</code> <code>BAAI/bge-m3</code> Model ID (embeddings for vector, LLM for mem-agent) <code>MEM_AGENT_MODEL_PRECISION</code> <code>4bit</code> Model precision (4bit, 8bit, fp16) <code>MEM_AGENT_BACKEND</code> <code>auto</code> Backend (auto, vllm, mlx, transformers) <code>MEM_AGENT_MAX_TOOL_TURNS</code> <code>20</code> Max tool execution iterations (mem-agent only) <code>MEM_AGENT_TIMEOUT</code> <code>20</code> Timeout for code execution (mem-agent only) <code>MEM_AGENT_BASE_URL</code> <code>null</code> OpenAI-compatible endpoint URL (e.g., http://localhost:8001/v1) - configure in config.yaml or env <code>MEM_AGENT_OPENAI_API_KEY</code> <code>null</code> API key for the endpoint (use \"lm-studio\" for local) - configure in config.yaml or env <code>MEM_AGENT_FILE_SIZE_LIMIT</code> <code>1048576</code> Max file size - 1MB (mem-agent only) <code>MEM_AGENT_DIR_SIZE_LIMIT</code> <code>10485760</code> Max directory size - 10MB (mem-agent only) <code>MEM_AGENT_MEMORY_SIZE_LIMIT</code> <code>104857600</code> Max total memory - 100MB (mem-agent only)"},{"location":"agents/mem-agent-setup/#storage-type-comparison","title":"Storage Type Comparison","text":"Feature JSON Storage Vector Storage Mem-Agent Storage Search Type Substring match Semantic similarity LLM-powered understanding Speed Very fast Moderate Slower (LLM inference) Memory Usage Minimal Higher (embedding model) Highest (LLM model) Dependencies None transformers, sentence-transformers fastmcp (+ external LLM server) Model Download Not required Required (~400MB) Required (~8GB, in container/server) Organization Simple key-value Embeddings-based Structured Obsidian-style Best Use Case Simple searches Semantic queries Complex reasoning &amp; organization Example Query \"vulnerability\" \u2192 exact match \"security issue\" \u2192 semantic match Natural language queries with context"},{"location":"agents/mem-agent-setup/#backend-selection-logic","title":"Backend Selection Logic","text":"<p>The <code>auto</code> backend automatically selects the best available option:</p> <ol> <li>macOS: MLX if available, else Transformers</li> <li>Linux: vLLM if available, else Transformers</li> <li>Windows: Transformers</li> </ol>"},{"location":"agents/mem-agent-setup/#performance-tuning","title":"Performance Tuning","text":""},{"location":"agents/mem-agent-setup/#gpu-acceleration-vllm","title":"GPU Acceleration (vLLM)","text":"<p>For best performance on Linux with GPU:</p> <pre><code>MEM_AGENT_BACKEND: vllm\nMEM_AGENT_MODEL_PRECISION: fp16\n</code></pre> <p>Adjust vLLM parameters:</p> <pre><code># Note: vLLM is for LLM inference, not for embeddings\n# For embeddings, the model is loaded directly via sentence-transformers\n# vllm serve BAAI/bge-m3 \\\n#   --host 127.0.0.1 \\\n#   --port 8001 \\\n  --tensor-parallel-size 1\n</code></pre>"},{"location":"agents/mem-agent-setup/#memory-limits","title":"Memory Limits","text":"<p>Adjust memory size limits based on your use case:</p> <pre><code># For power users with lots of memories\nMEM_AGENT_FILE_SIZE_LIMIT: 5242880      # 5MB per file\nMEM_AGENT_DIR_SIZE_LIMIT: 52428800      # 50MB per directory  \nMEM_AGENT_MEMORY_SIZE_LIMIT: 524288000  # 500MB total\n</code></pre>"},{"location":"agents/mem-agent-setup/#response-time","title":"Response Time","text":"<p>Reduce max tool turns for faster responses:</p> <pre><code>MEM_AGENT_MAX_TOOL_TURNS: 10  # Faster but less thorough\n</code></pre>"},{"location":"agents/mem-agent-setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"agents/mem-agent-setup/#model-download-issues","title":"Model Download Issues","text":"<p>Problem: Model download fails or is very slow</p> <p>Solutions:</p> <ol> <li>Check internet connection</li> <li>Try using a HuggingFace mirror:</li> </ol> <pre><code>export HF_ENDPOINT=https://hf-mirror.com\n</code></pre> <ol> <li>Download manually:</li> </ol> <pre><code>huggingface-cli download BAAI/bge-m3 --local-dir ./models/bge-m3\n</code></pre>"},{"location":"agents/mem-agent-setup/#backend-issues","title":"Backend Issues","text":"<p>Problem: Backend initialization fails</p> <p>Solutions:</p> <ol> <li>For vLLM errors:</li> </ol> <pre><code># Ensure CUDA is available\npython -c \"import torch; print(torch.cuda.is_available())\"\n\n# Reinstall vLLM\npip uninstall vllm\npip install vllm --no-cache-dir\n</code></pre> <ol> <li>For MLX errors:</li> </ol> <pre><code># Ensure on macOS with Apple Silicon\nuname -m  # Should show arm64\n\n# Reinstall MLX\npip uninstall mlx mlx-lm\npip install mlx mlx-lm\n</code></pre> <ol> <li>Fallback to transformers:</li> </ol> <pre><code>MEM_AGENT_BACKEND: transformers\n</code></pre>"},{"location":"agents/mem-agent-setup/#memory-path-issues","title":"Memory Path Issues","text":"<p>Problem: Memory files not being created</p> <p>Solutions:</p> <ol> <li>Check permissions:</li> </ol> <pre><code># Replace {user_kb} with actual KB name\nls -la data/memory/user_{user_id}/\nchmod -R 755 data/memory/user_{user_id}/\n</code></pre> <ol> <li>Verify path in configuration:</li> </ol> <pre><code>from config.settings import settings\nfrom pathlib import Path\n\nuser_id = 123\nprint(f\"Full path: {settings.get_mem_agent_memory_dir(user_id)}\")\n</code></pre> <ol> <li>Create manually:</li> </ol> <pre><code># Replace {user_kb} with actual KB name\nmkdir -p data/memory/user_{user_id}/entities\ntouch data/memory/user_{user_id}/user.md\n</code></pre>"},{"location":"agents/mem-agent-setup/#mcp-server-connection-issues","title":"MCP Server Connection Issues","text":"<p>Problem: Agent can't connect to mem-agent MCP server</p> <p>Solutions:</p> <ol> <li>Verify server configuration follows standard MCP format:</li> </ol> <pre><code>cat data/mcp_servers/mem-agent.json\n</code></pre> <p>Should contain:</p> <pre><code>{\n  \"mcpServers\": {\n    \"mem-agent\": {\n      \"url\": \"http://127.0.0.1:8765/sse\",\n      \"timeout\": 10000,\n      \"trust\": true,\n      \"description\": \"...\"\n    }\n  }\n}\n</code></pre> <p>See MCP Configuration Format for details.</p> <ol> <li>Verify HTTP server is running:</li> </ol> <pre><code># Server should auto-start with bot\n# Check logs for: \"[MCPServerManager] \u2713 Server 'mem-agent' started successfully\"\n</code></pre> <ol> <li>Test server manually:</li> </ol> <pre><code>python -m src.agents.mcp.mem_agent_server_http --host 127.0.0.1 --port 8765\n</code></pre> <ol> <li>Test SSE endpoint:</li> </ol> <pre><code>curl http://127.0.0.1:8765/sse\n</code></pre>"},{"location":"agents/mem-agent-setup/#best-practices","title":"Best Practices","text":""},{"location":"agents/mem-agent-setup/#memory-organization","title":"Memory Organization","text":"<ol> <li>Use descriptive entity names: <code>jane_doe.md</code>, not <code>person1.md</code></li> <li>Link entities: Use <code>[[entities/name.md]]</code> for relationships</li> <li>Keep files focused: One entity per file</li> <li>Update regularly: Memory agent will update files as it learns</li> </ol>"},{"location":"agents/mem-agent-setup/#model-selection_1","title":"Model Selection","text":"<ol> <li>Start with 4-bit: Good balance of size and performance</li> <li>Upgrade to 8-bit: If you have more RAM and want better quality</li> <li>Use fp16: Only on GPU with plenty of VRAM</li> </ol>"},{"location":"agents/mem-agent-setup/#security","title":"Security","text":"<ol> <li>Review memories: Periodically check <code>data/memory/user_{user_id}/</code> for sensitive info</li> <li>Set size limits: Prevent memory from growing too large</li> <li>Backup regularly: Memory files are plain text, easy to backup</li> <li>Per-user isolation: Each user has isolated memory and MCP configs in their KB</li> <li>Knowledge base integration: Memory is stored within your knowledge base structure</li> </ol>"},{"location":"agents/mem-agent-setup/#see-also","title":"See Also","text":"<ul> <li>MCP Server Registry - Managing MCP servers</li> <li>MCP Tools - Using MCP tools in agents</li> <li>Configuration - Complete configuration reference</li> </ul>"},{"location":"agents/overview/","title":"Agent System Overview","text":"<p>Understanding the AI agent system in tg-note.</p>"},{"location":"agents/overview/#what-are-agents","title":"What are Agents?","text":"<p>Agents are AI-powered systems that process your messages and transform them into structured knowledge base entries. They analyze content, categorize it, extract key information, and generate well-formatted Markdown files.</p>"},{"location":"agents/overview/#available-agents","title":"Available Agents","text":"<p>tg-note supports three types of agents, each with different capabilities and use cases.</p>"},{"location":"agents/overview/#comparison-table","title":"Comparison Table","text":"Feature Qwen Code CLI Autonomous Stub AI Processing \u2705 Advanced \u2705 Advanced \u274c Basic Auto Planning \u2705 Yes \u2705 Yes \u274c No Web Search \u2705 Built-in \u2705 Built-in \u274c No Git Operations \u2705 Built-in \u2705 Built-in \u274c No Function Calling \u2705 Yes \u2705 Yes \u274c No External Dependencies Node.js OpenAI lib None Free Tier 2000/day Depends on API Free Best For Production Custom APIs Testing/MVP"},{"location":"agents/overview/#1-qwen-code-cli-recommended","title":"1. Qwen Code CLI \u2b50 Recommended","text":"<p>The most powerful agent using the official Qwen Code CLI tool.</p>"},{"location":"agents/overview/#features","title":"Features","text":"<ul> <li>\u2705 Advanced AI Processing - Qwen3-Coder models</li> <li>\u2705 Automatic Planning - Creates and executes TODO plans</li> <li>\u2705 Built-in Tools - Web search, Git, GitHub, Shell</li> <li>\u2705 Vision Support - Can analyze images</li> <li>\u2705 Free Tier - 2000 requests/day, 60 req/min</li> </ul>"},{"location":"agents/overview/#installation","title":"Installation","text":"<pre><code># Install Node.js 20+\nnpm install -g @qwen-code/qwen-code@latest\n\n# Authenticate\nqwen\n\n# Configure\nAGENT_TYPE: \"qwen_code_cli\"\n</code></pre>"},{"location":"agents/overview/#when-to-use","title":"When to Use","text":"<ul> <li>\u2705 Production deployments</li> <li>\u2705 Need best quality output</li> <li>\u2705 Want automatic planning</li> <li>\u2705 Can install Node.js</li> </ul> <p>Full Documentation \u2192</p>"},{"location":"agents/overview/#2-autonomous-agent","title":"2. Autonomous Agent","text":"<p>Python-based agent with OpenAI-compatible API support.</p>"},{"location":"agents/overview/#features_1","title":"Features","text":"<ul> <li>\u2705 OpenAI-Compatible - Works with OpenAI, Qwen, and other compatible APIs</li> <li>\u2705 Autonomous Planning - Self-planning and decision-making</li> <li>\u2705 Function Calling - Native function calling support</li> <li>\u2705 Built-in Tools - Web search, Git, GitHub, file management</li> <li>\u2705 Flexible - Custom LLM connectors</li> </ul>"},{"location":"agents/overview/#installation_1","title":"Installation","text":"<pre><code># OpenAI library included in requirements\npoetry install\n\n# Configure\nAGENT_TYPE: \"autonomous\"\nAGENT_MODEL: \"gpt-3.5-turbo\"  # or any compatible model\n</code></pre>"},{"location":"agents/overview/#configuration","title":"Configuration","text":"<p>Environment Variables:</p> <pre><code>OPENAI_API_KEY=sk-...\nOPENAI_BASE_URL=https://api.openai.com/v1  # Optional\n</code></pre> <p>YAML Settings:</p> <pre><code>AGENT_TYPE: \"autonomous\"\nAGENT_MODEL: \"gpt-3.5-turbo\"\nAGENT_ENABLE_WEB_SEARCH: true\nAGENT_ENABLE_GIT: true\nAGENT_ENABLE_FILE_MANAGEMENT: true\n</code></pre>"},{"location":"agents/overview/#when-to-use_1","title":"When to Use","text":"<ul> <li>\u2705 OpenAI or compatible API available</li> <li>\u2705 Need autonomous planning</li> <li>\u2705 Custom LLM provider (Qwen, Azure, etc.)</li> <li>\u2705 Python-only environment</li> <li>\u274c Don't want to use Node.js</li> </ul> <p>Full Documentation \u2192</p>"},{"location":"agents/overview/#3-stub-agent","title":"3. Stub Agent","text":"<p>Simple testing agent without AI.</p>"},{"location":"agents/overview/#features_2","title":"Features","text":"<ul> <li>\u2705 Fast - No API calls</li> <li>\u2705 Simple - Basic categorization</li> <li>\u2705 No Dependencies - Works out of the box</li> <li>\u274c Limited - No AI analysis</li> </ul>"},{"location":"agents/overview/#configuration_1","title":"Configuration","text":"<pre><code>AGENT_TYPE: \"stub\"\n</code></pre>"},{"location":"agents/overview/#when-to-use_2","title":"When to Use","text":"<ul> <li>\u2705 Testing and development</li> <li>\u2705 MVP/prototype</li> <li>\u2705 No API keys available</li> <li>\u274c Production use</li> </ul> <p>Full Documentation \u2192</p>"},{"location":"agents/overview/#how-agents-work","title":"How Agents Work","text":""},{"location":"agents/overview/#processing-pipeline","title":"Processing Pipeline","text":"<pre><code>graph LR\n    A[Message] --&gt; B[Agent]\n    B --&gt; C{Analyze}\n    C --&gt; D[Categorize]\n    D --&gt; E[Extract Info]\n    E --&gt; F[Generate Markdown]\n    F --&gt; G[Save to KB]\n\n    style B fill:#fff3e0\n    style F fill:#e8f5e9\n</code></pre>"},{"location":"agents/overview/#agent-workflow","title":"Agent Workflow","text":"<ol> <li>Receive Content</li> <li>Text messages</li> <li>URLs</li> <li>Forwarded posts</li> <li> <p>Media</p> </li> <li> <p>Analyze</p> </li> <li>Understand topic</li> <li>Extract key points</li> <li> <p>Identify category</p> </li> <li> <p>Process</p> </li> <li>Search for context (if enabled)</li> <li>Gather additional info</li> <li> <p>Structure content</p> </li> <li> <p>Generate</p> </li> <li>Create Markdown file</li> <li>Add metadata</li> <li> <p>Format properly</p> </li> <li> <p>Save</p> </li> <li>Write to KB</li> <li>Commit to Git</li> <li>Notify user</li> </ol>"},{"location":"agents/overview/#choosing-an-agent","title":"Choosing an Agent","text":""},{"location":"agents/overview/#decision-tree","title":"Decision Tree","text":"<pre><code>graph TD\n    A[Choose Agent] --&gt; B{Production or Testing?}\n    B --&gt;|Production| C{Can install Node.js?}\n    B --&gt;|Testing| G[Stub Agent]\n    C --&gt;|Yes| D[Qwen Code CLI \u2b50]\n    C --&gt;|No| E{Have OpenAI-compatible API?}\n    E --&gt;|Yes| F[Autonomous Agent]\n    E --&gt;|No| G\n\n    style D fill:#c8e6c9\n    style F fill:#b3e5fc\n    style G fill:#ffccbc\n</code></pre>"},{"location":"agents/overview/#recommendations","title":"Recommendations","text":""},{"location":"agents/overview/#for-production","title":"For Production","text":"<p>\u2192 Qwen Code CLI</p> <ul> <li>Best quality results</li> <li>Automatic planning</li> <li>Built-in tools</li> <li>Free tier available</li> </ul>"},{"location":"agents/overview/#for-testing","title":"For Testing","text":"<p>\u2192 Stub Agent</p> <ul> <li>Quick setup</li> <li>No dependencies</li> <li>Fast iteration</li> </ul>"},{"location":"agents/overview/#agent-configuration","title":"Agent Configuration","text":""},{"location":"agents/overview/#global-settings","title":"Global Settings","text":"<p>Set in <code>config.yaml</code>:</p> <pre><code># Agent Selection\nAGENT_TYPE: \"qwen_code_cli\"\n\n# Common Settings\nAGENT_MODEL: \"qwen-max\"\nAGENT_TIMEOUT: 300\n\n# Tool Permissions\nAGENT_ENABLE_WEB_SEARCH: true\nAGENT_ENABLE_GIT: true\nAGENT_ENABLE_GITHUB: true\nAGENT_ENABLE_SHELL: false\n</code></pre>"},{"location":"agents/overview/#per-user-settings","title":"Per-User Settings","text":"<p>Users can override via Telegram:</p> <pre><code>/agentsettings\n</code></pre>"},{"location":"agents/overview/#agent-capabilities","title":"Agent Capabilities","text":""},{"location":"agents/overview/#content-analysis","title":"Content Analysis","text":"<p>All agents can:</p> <ul> <li>Extract text content</li> <li>Identify topics</li> <li>Generate titles</li> <li>Create metadata</li> </ul> <p>Advanced agents (Qwen) add:</p> <ul> <li>Deep semantic understanding</li> <li>Context enrichment</li> <li>Smart categorization</li> <li>Quality summaries</li> </ul>"},{"location":"agents/overview/#tool-usage","title":"Tool Usage","text":"Tool Qwen CLI Autonomous Stub Web Search \u2705 \u2705 \u274c Git Ops \u2705 \u2705 \u274c GitHub API \u2705 \u2705 \u274c Shell \u2705 \u2705 \u274c File Management \u2705 \u2705 \u274c Vision \u2705 \u2705* \u274c <p>*Vision support depends on the LLM model used</p>"},{"location":"agents/overview/#performance","title":"Performance","text":""},{"location":"agents/overview/#typical-processing-time","title":"Typical Processing Time","text":"Agent Short Text Medium Text Long Text Qwen CLI 5-15s 15-45s 45-120s Autonomous 5-20s 15-60s 60-180s Stub &lt;1s &lt;1s &lt;1s"},{"location":"agents/overview/#factors-affecting-speed","title":"Factors Affecting Speed","text":"<ul> <li>Content length</li> <li>URL complexity</li> <li>Web search usage</li> <li>API response time</li> <li>Network latency</li> </ul>"},{"location":"agents/overview/#see-also","title":"See Also","text":"<ul> <li>Qwen Code CLI Guide</li> <li>Autonomous Agent Guide</li> <li>Stub Agent Reference</li> </ul>"},{"location":"agents/qwen-cli-debug-trace/","title":"Qwen CLI Agent - DEBUG tracing","text":""},{"location":"agents/qwen-cli-debug-trace/#overview","title":"Overview","text":"<p>QwenCodeCLIAgent supports detailed DEBUG logging for troubleshooting and monitoring qwen-code CLI execution. You get a full execution trace including:</p> <ul> <li>CLI commands and arguments</li> <li>Input (prompt)</li> <li>Output (result)</li> <li>Environment variables</li> <li>Timing</li> <li>Errors and warnings</li> </ul>"},{"location":"agents/qwen-cli-debug-trace/#quick-start","title":"Quick start","text":""},{"location":"agents/qwen-cli-debug-trace/#1-configure-logging","title":"1. Configure logging","text":"<pre><code>from pathlib import Path\nfrom config.logging_config import setup_logging\n\n# Enable DEBUG logging\nsetup_logging(\n    log_level=\"DEBUG\",\n    log_file=Path(\"logs/qwen_debug.log\"),\n    enable_debug_trace=True\n)\n</code></pre>"},{"location":"agents/qwen-cli-debug-trace/#2-use-the-agent","title":"2. Use the agent","text":"<pre><code>from src.agents.qwen_code_cli_agent import QwenCodeCLIAgent\n\n# Create agent\nagent = QwenCodeCLIAgent(\n    enable_web_search=True,\n    enable_git=True,\n    timeout=300\n)\n\n# Process content\ncontent = {\n    \"text\": \"Your text for processing\",\n    \"urls\": [\"https://example.com\"]\n}\n\nresult = await agent.process(content)\n</code></pre>"},{"location":"agents/qwen-cli-debug-trace/#3-check-logs","title":"3. Check logs","text":"<p>Logs will be written to:</p> <ul> <li><code>logs/qwen_debug.log</code> \u2014 main log (all levels)</li> <li><code>logs/qwen_debug_debug.log</code> \u2014 DEBUG-only messages</li> </ul>"},{"location":"agents/qwen-cli-debug-trace/#what-gets-logged","title":"What gets logged","text":""},{"location":"agents/qwen-cli-debug-trace/#agent-initialization","title":"Agent initialization","text":"<pre><code>[DEBUG] [QwenCodeCLIAgent._check_cli_available] Checking qwen CLI availability...\n[DEBUG] [QwenCodeCLIAgent._check_cli_available] CLI path: qwen\n[DEBUG] [QwenCodeCLIAgent._check_cli_available] Running command: qwen --version\n[DEBUG] [QwenCodeCLIAgent._check_cli_available] Return code: 0\n[DEBUG] [QwenCodeCLIAgent._check_cli_available] STDOUT: qwen version 1.0.0\n[DEBUG] [QwenCodeCLIAgent._check_cli_available] STDERR:\n</code></pre>"},{"location":"agents/qwen-cli-debug-trace/#cli-execution","title":"CLI execution","text":"<pre><code>[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli] === CLI EXECUTION TRACE START ===\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli] Command: qwen\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli] Working dir: /workspace\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli] Environment variables:\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli]   OPENAI_API_KEY=sk-xxxxx...\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli]   OPENAI_BASE_URL=https://api.openai.com\n\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli] === STDIN (PROMPT) ===\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli] Prompt length: 1234 characters\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli] Prompt preview (first 500 chars):\nYou are an autonomous content processing agent...\n\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli] === FULL PROMPT ===\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli]\n&lt;full prompt text&gt;\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli] === END FULL PROMPT ===\n\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli] Starting subprocess at 1234567890.123\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli] Process created with PID: 12345\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli] Sending prompt to stdin...\n\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli] Process completed in 15.42s\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli] Process return code: 0\n\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli] === STDERR OUTPUT ===\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli] STDERR length: 0 characters\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli] STDERR is empty\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli] === END STDERR OUTPUT ===\n\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli] === STDOUT OUTPUT ===\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli] STDOUT length: 5678 characters\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli] STDOUT preview (first 500 chars):\n# Machine Learning Article\n...\n\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli] === FULL STDOUT ===\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli]\n&lt;full result text&gt;\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli] === END FULL STDOUT ===\n\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli] === CLI EXECUTION TRACE END ===\n</code></pre>"},{"location":"agents/qwen-cli-debug-trace/#result-processing","title":"Result processing","text":"<pre><code>[DEBUG] [QwenCodeCLIAgent] STEP 1: Preparing prompt for qwen-code\n[DEBUG] [QwenCodeCLIAgent] Prepared prompt length: 1234 characters\n\n[DEBUG] [QwenCodeCLIAgent] STEP 2: Executing qwen-code CLI\n[DEBUG] [QwenCodeCLIAgent] Received result length: 5678 characters\n\n[DEBUG] [QwenCodeCLIAgent] STEP 3: Parsing agent response with standard parser\n[DEBUG] [QwenCodeCLIAgent] Result text preview (first 500 chars): ...\n[DEBUG] [QwenCodeCLIAgent] Files created: ['path/to/file.md']\n[DEBUG] [QwenCodeCLIAgent] Folders created: ['path/to/folder']\n\n[INFO] [QwenCodeCLIAgent] Successfully processed content: title='Machine Learning'\n</code></pre>"},{"location":"agents/qwen-cli-debug-trace/#log-levels","title":"Log levels","text":""},{"location":"agents/qwen-cli-debug-trace/#debug","title":"DEBUG","text":"<ul> <li>Use in development</li> <li>Full CLI execution details</li> </ul>"},{"location":"agents/qwen-cli-debug-trace/#info","title":"INFO","text":"<ul> <li>Use in production</li> <li>Key events only</li> </ul>"},{"location":"agents/qwen-cli-debug-trace/#warning","title":"WARNING","text":"<ul> <li>Minimal logging, warnings only</li> </ul>"},{"location":"agents/qwen-cli-debug-trace/#error","title":"ERROR","text":"<ul> <li>Critical errors only</li> </ul>"},{"location":"agents/qwen-cli-debug-trace/#examples","title":"Examples","text":""},{"location":"agents/qwen-cli-debug-trace/#example-1-debugging-cli-issues","title":"Example 1: Debugging CLI issues","text":"<pre><code>import asyncio\nfrom pathlib import Path\nfrom config.logging_config import setup_logging\nfrom src.agents.qwen_code_cli_agent import QwenCodeCLIAgent\n\nasync def debug_cli_issue():\n    # Enable detailed logging\n    setup_logging(\n        log_level=\"DEBUG\",\n        log_file=Path(\"logs/debug.log\"),\n        enable_debug_trace=True\n    )\n\n    agent = QwenCodeCLIAgent(timeout=60)\n\n    try:\n        result = await agent.process({\"text\": \"Test content\", \"urls\": []})\n        print(f\"Success: {result['title']}\")\n    except Exception as e:\n        print(f\"Error: {e}\")\n        print(\"Check logs/debug.log and logs/debug_debug.log for details\")\n\nasyncio.run(debug_cli_issue())\n</code></pre>"},{"location":"agents/qwen-cli-debug-trace/#example-2-production-monitoring","title":"Example 2: Production monitoring","text":"<pre><code>import asyncio\nfrom pathlib import Path\nfrom config.logging_config import setup_logging\nfrom src.agents.qwen_code_cli_agent import QwenCodeCLIAgent\n\nasync def production_monitoring():\n    # Moderate logging for production\n    setup_logging(\n        log_level=\"INFO\",\n        log_file=Path(\"logs/production.log\"),\n        enable_debug_trace=False\n    )\n\n    agent = QwenCodeCLIAgent()\n    result = await agent.process(content)\n\n    # Logs contain only important events (start/end, title/category, errors)\n\nasyncio.run(production_monitoring())\n</code></pre>"},{"location":"agents/qwen-cli-debug-trace/#example-3-performance-analysis","title":"Example 3: Performance analysis","text":"<pre><code>import asyncio\nimport time\nfrom pathlib import Path\nfrom config.logging_config import setup_logging\nfrom src.agents.qwen_code_cli_agent import QwenCodeCLIAgent\n\nasync def performance_analysis():\n    # DEBUG for timing analysis\n    setup_logging(\n        log_level=\"DEBUG\",\n        log_file=Path(\"logs/performance.log\"),\n        enable_debug_trace=True\n    )\n\n    agent = QwenCodeCLIAgent()\n\n    start = time.time()\n    result = await agent.process(content)\n    end = time.time()\n\n    print(f\"Total time: {end - start:.2f}s\")\n    # Logs include detailed timing for each step\n\nasyncio.run(performance_analysis())\n</code></pre>"},{"location":"agents/qwen-cli-debug-trace/#reading-logs","title":"Reading logs","text":""},{"location":"agents/qwen-cli-debug-trace/#log-file-structure","title":"Log file structure","text":"<ol> <li>Main log (<code>logs/qwen_debug.log</code>): All levels, rotation 10 MB, retention 7 days, ZIP compression</li> <li>Debug-only log (<code>logs/qwen_debug_debug.log</code>): DEBUG only, rotation 50 MB, retention 3 days, ZIP compression</li> </ol>"},{"location":"agents/qwen-cli-debug-trace/#entry-format","title":"Entry format","text":"<pre><code>2024-10-03 15:30:45.123 | DEBUG    | qwen_code_cli_agent:_execute_qwen_cli:270 | [QwenCodeCLIAgent._execute_qwen_cli] Executing qwen-code CLI...\n\u2502                         \u2502           \u2502                      \u2502                    \u2502\n\u2502                         \u2502           \u2502                      \u2502                    \u2514\u2500 Message\n\u2502                         \u2502           \u2502                      \u2514\u2500 Line number\n\u2502                         \u2502           \u2514\u2500 Function\n\u2502                         \u2514\u2500 Level\n\u2514\u2500 Timestamp\n</code></pre>"},{"location":"agents/qwen-cli-debug-trace/#searching-logs","title":"Searching logs","text":"<pre><code># Find all CLI executions\ngrep \"CLI EXECUTION TRACE\" logs/qwen_debug.log\n\n# Find errors\ngrep \"ERROR\" logs/qwen_debug.log\n\n# Find timing\ngrep \"Process completed in\" logs/qwen_debug.log\n\n# Only prompts\ngrep -A 20 \"FULL PROMPT\" logs/qwen_debug_debug.log\n\n# Only results\ngrep -A 50 \"FULL STDOUT\" logs/qwen_debug_debug.log\n</code></pre>"},{"location":"agents/qwen-cli-debug-trace/#security","title":"Security","text":""},{"location":"agents/qwen-cli-debug-trace/#masking-sensitive-data","title":"Masking sensitive data","text":"<p>API keys and tokens are masked in logs:</p> <pre><code># Environment variables:\nOPENAI_API_KEY=sk-1234567890abcdef1234567890abcdef\n\n# In logs:\nOPENAI_API_KEY=sk-12345...\n</code></pre>"},{"location":"agents/qwen-cli-debug-trace/#protected-variables","title":"Protected variables","text":"<p>Masked variables include those containing:</p> <ul> <li><code>KEY</code></li> <li><code>TOKEN</code></li> <li><code>SECRET</code></li> <li><code>PASSWORD</code></li> </ul>"},{"location":"agents/qwen-cli-debug-trace/#performance","title":"Performance","text":""},{"location":"agents/qwen-cli-debug-trace/#overhead","title":"Overhead","text":"Level Overhead Log size Recommendation DEBUG ~5-10% Large Development INFO ~1-2% Medium Production WARNING &lt;1% Small Production ERROR &lt;0.5% Minimal Production"},{"location":"agents/qwen-cli-debug-trace/#recommendations","title":"Recommendations","text":"<ul> <li>Development/Testing: DEBUG + enable_debug_trace</li> <li>Staging: INFO or DEBUG as needed; disable debug trace unless required</li> <li>Production: INFO/WARNING; enable DEBUG temporarily for incident analysis</li> </ul>"},{"location":"agents/qwen-cli-debug-trace/#troubleshooting","title":"Troubleshooting","text":""},{"location":"agents/qwen-cli-debug-trace/#problem-no-logs-created","title":"Problem: No logs created","text":"<p>Solution: Ensure log directory exists and call setup_logging with DEBUG level.</p>"},{"location":"agents/qwen-cli-debug-trace/#problem-too-many-logs","title":"Problem: Too many logs","text":"<p>Solution: Reduce log level to INFO or WARNING; disable debug trace.</p>"},{"location":"agents/qwen-cli-debug-trace/#problem-no-detailed-cli-trace","title":"Problem: No detailed CLI trace","text":"<p>Solution: Use DEBUG level and enable_debug_trace=True.</p>"},{"location":"agents/qwen-cli-debug-trace/#problem-logs-too-large","title":"Problem: Logs too large","text":"<p>Solution: Adjust rotation/retention settings for log files.</p>"},{"location":"agents/qwen-code-cli/","title":"Qwen Code CLI Agent","text":"<p>Complete guide to using the Qwen Code CLI agent.</p>"},{"location":"agents/qwen-code-cli/#overview","title":"Overview","text":"<p>The Qwen Code CLI agent is the most powerful option, using the official qwen-code CLI tool for advanced AI processing.</p>"},{"location":"agents/qwen-code-cli/#features","title":"Features","text":"<ul> <li>\u2705 Full integration with Qwen3-Coder models</li> <li>\u2705 Automatic TODO planning</li> <li>\u2705 Built-in tools: web search, git, github, shell</li> <li>\u2705 Free tier: 2000 requests/day</li> <li>\u2705 Vision model support</li> <li>\u2705 DEBUG \u0442\u0440\u0435\u0439\u0441\u0438\u043d\u0433 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f CLI - \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u2192</li> </ul>"},{"location":"agents/qwen-code-cli/#installation","title":"Installation","text":""},{"location":"agents/qwen-code-cli/#1-install-nodejs-20","title":"1. Install Node.js 20+","text":"<pre><code># Ubuntu/Debian\ncurl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -\nsudo apt-get install -y nodejs\n\n# macOS\nbrew install node@20\n\n# Windows\n# Download from nodejs.org\n</code></pre>"},{"location":"agents/qwen-code-cli/#2-install-qwen-code-cli","title":"2. Install Qwen Code CLI","text":"<pre><code>npm install -g @qwen-code/qwen-code@latest\n</code></pre> <p>Docker: The bot image already includes Node.js 20 and the Qwen CLI. You only need to authenticate inside the running container once (persisted via <code>~/.qwen</code> bind mount):</p> <pre><code>docker exec -it tg-note-bot bash -lc \"qwen\"\n</code></pre>"},{"location":"agents/qwen-code-cli/#3-verify-installation","title":"3. Verify Installation","text":"<pre><code>qwen --version\n</code></pre>"},{"location":"agents/qwen-code-cli/#4-authenticate","title":"4. Authenticate","text":"<pre><code>qwen\n</code></pre> <p>Follow the prompts to authenticate via qwen.ai.</p>"},{"location":"agents/qwen-code-cli/#5-configure-approval-mode-important","title":"5. Configure Approval Mode (IMPORTANT!)","text":"<p>\u26a0\ufe0f \u041a\u0420\u0418\u0422\u0418\u0427\u0415\u0421\u041a\u0418 \u0412\u0410\u0416\u041d\u041e: \u0414\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b CLI \u0441 \u0431\u043e\u0442\u043e\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0440\u0435\u0436\u0438\u043c \u043e\u0434\u043e\u0431\u0440\u0435\u043d\u0438\u044f \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432:</p> <pre><code>qwen\n/approval-mode yolo --project\n</code></pre> <p>Docker one-liners for non-interactive application:</p> <pre><code>docker exec -it tg-note-bot bash -lc \"qwen &lt;&lt;&lt;'/approval-mode yolo --project'\"\n</code></pre> <p>\u0417\u0430\u0447\u0435\u043c \u044d\u0442\u043e \u043d\u0443\u0436\u043d\u043e?</p> <ul> <li>CLI \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u0440\u0443\u0447\u043d\u043e\u0433\u043e \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f</li> <li>\u0411\u043e\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0432 \u0430\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0438 \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0441 CLI \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e</li> <li>\u0420\u0435\u0436\u0438\u043c <code>yolo</code> \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043e\u0434\u043e\u0431\u0440\u044f\u0435\u0442 \u0432\u0441\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0430\u0433\u0435\u043d\u0442\u0430</li> </ul> <p>\u26a0\ufe0f \u0412\u043d\u0438\u043c\u0430\u043d\u0438\u0435! \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0435\u0436\u0438\u043c\u0430 <code>yolo</code> - \u043d\u0430 \u0432\u0430\u0448 \u0441\u0442\u0440\u0430\u0445 \u0438 \u0440\u0438\u0441\u043a. \u0410\u0433\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442 \u043f\u043e\u043b\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0444\u0430\u0439\u043b\u043e\u0432\u044b\u043c \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u043c \u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c.</p> <p>\u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0440\u0435\u0436\u0438\u043c\u044b \u043e\u0434\u043e\u0431\u0440\u0435\u043d\u0438\u044f:</p> <ul> <li><code>plan</code> - \u0442\u043e\u043b\u044c\u043a\u043e \u0430\u043d\u0430\u043b\u0438\u0437, \u0431\u0435\u0437 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0444\u0430\u0439\u043b\u043e\u0432</li> <li><code>default</code> - \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0444\u0430\u0439\u043b\u043e\u0432 \u0438 \u043a\u043e\u043c\u0430\u043d\u0434</li> <li><code>auto-edit</code> - \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043e\u0434\u043e\u0431\u0440\u044f\u0435\u0442 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u043e\u0432</li> <li><code>yolo</code> - \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043e\u0434\u043e\u0431\u0440\u044f\u0435\u0442 \u0432\u0441\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 (\u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0431\u043e\u0442\u0430)</li> </ul> <p>\u041e\u0431\u043b\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f:</p> <ul> <li><code>--session</code> - \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0441\u0435\u0441\u0441\u0438\u0438</li> <li><code>--project</code> - \u0434\u043b\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 (\u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f)</li> <li><code>--user</code> - \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f</li> </ul> <p>\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u043e\u0437\u043d\u0430\u043a\u043e\u043c\u0438\u0442\u044c\u0441\u044f \u0441 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0435\u0439 qwen-code-cli \u0434\u043b\u044f \u043f\u043e\u043b\u043d\u043e\u0433\u043e \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0438 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0439.</p>"},{"location":"agents/qwen-code-cli/#configuration","title":"Configuration","text":"<p>Update <code>config.yaml</code>:</p> <pre><code>AGENT_TYPE: \"qwen_code_cli\"\nAGENT_QWEN_CLI_PATH: \"qwen\"\nAGENT_TIMEOUT: 300\nAGENT_ENABLE_WEB_SEARCH: true\nAGENT_ENABLE_GIT: true\nAGENT_ENABLE_GITHUB: true\nAGENT_ENABLE_SHELL: false\n</code></pre> <p>Tip: The CLI path is configurable via <code>AGENT_QWEN_CLI_PATH</code> and defaults to <code>qwen</code>. Ensure <code>qwen --version</code> succeeds on your system before enabling this agent.</p>"},{"location":"agents/qwen-code-cli/#how-it-works","title":"How It Works","text":"<ol> <li>Message received</li> <li>Agent prepares prompt</li> <li>CLI working directory set to user's knowledge base path</li> <li>Calls <code>qwen</code> CLI in KB directory</li> <li>Qwen creates TODO plan</li> <li>Executes plan with tools (files created in correct KB location)</li> <li>Returns structured markdown</li> <li>Saved to KB</li> </ol> <p>Important: The CLI automatically runs inside your knowledge base directory (<code>knowledge_bases/your-kb-name/</code>). This ensures that any files created by the agent are saved to the correct location in your knowledge base structure.</p>"},{"location":"agents/qwen-code-cli/#connection-descriptions","title":"Connection Descriptions (\u0421\u0432\u044f\u0437\u0438)","text":"<ul> <li>Agent must add links only to EXISTING KB files (not those created in the same run).</li> <li>Each link MUST include a meaningful description (1\u20132 sentences) explaining the nature of the connection: similarity/difference, dependency, part-whole, alternative, sequence, overlapping concepts.</li> <li>Avoid generic placeholders like \u201c\u0421\u0432\u044f\u0437\u0430\u043d\u043d\u0430\u044f \u0442\u0435\u043c\u0430\u201d.</li> </ul>"},{"location":"agents/qwen-code-cli/#troubleshooting","title":"Troubleshooting","text":""},{"location":"agents/qwen-code-cli/#files-created-in-wrong-location","title":"Files Created in Wrong Location","text":"<p>\u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430: CLI \u0441\u043e\u0437\u0434\u0430\u0451\u0442 \u0444\u0430\u0439\u043b\u044b \u0432 \u043a\u043e\u0440\u043d\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430, \u0430 \u043d\u0435 \u0432 <code>knowledge_bases/your-kb-name/</code></p> <p>\u0420\u0435\u0448\u0435\u043d\u0438\u0435: \u042d\u0442\u043e \u0431\u044b\u043b\u043e \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0432\u0435\u0440\u0441\u0438\u0438. \u0411\u043e\u0442 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0440\u0430\u0431\u043e\u0447\u0443\u044e \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044e CLI \u0432 \u043f\u0443\u0442\u044c \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u044b \u0437\u043d\u0430\u043d\u0438\u0439 \u043f\u0435\u0440\u0435\u0434 \u043a\u0430\u0436\u0434\u044b\u043c \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u043c. \u0423\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044c, \u0447\u0442\u043e \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u0443\u044e \u0432\u0435\u0440\u0441\u0438\u044e \u0431\u043e\u0442\u0430.</p> <p>\u041a\u0430\u043a \u044d\u0442\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442:</p> <ul> <li>\u041f\u0440\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0431\u043e\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043f\u0443\u0442\u044c \u043a \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435 \u0437\u043d\u0430\u043d\u0438\u0439</li> <li>\u041f\u0435\u0440\u0435\u0434 \u0432\u044b\u0437\u043e\u0432\u043e\u043c <code>qwen</code> CLI \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442\u0441\u044f <code>working_directory</code> \u0432 \u044d\u0442\u043e\u0442 \u043f\u0443\u0442\u044c</li> <li>\u0412\u0441\u0435 \u0444\u0430\u0439\u043b\u044b, \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0435 \u0430\u0433\u0435\u043d\u0442\u043e\u043c, \u043f\u043e\u043f\u0430\u0434\u0430\u044e\u0442 \u0432 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 KB</li> </ul>"},{"location":"agents/qwen-code-cli/#cli-requires-manual-approval","title":"CLI Requires Manual Approval","text":"<p>\u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430: CLI \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f, \u0431\u043e\u0442 \u0437\u0430\u0432\u0438\u0441\u0430\u0435\u0442</p> <p>\u0420\u0435\u0448\u0435\u043d\u0438\u0435: \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u0442\u0435 \u0440\u0435\u0436\u0438\u043c <code>yolo</code> \u043a\u0430\u043a \u043e\u043f\u0438\u0441\u0430\u043d\u043e \u0432 \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438:</p> <pre><code>qwen\n/approval-mode yolo --project\n</code></pre> <p>\u041f\u043e\u0447\u0435\u043c\u0443 \u044d\u0442\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e:</p> <ul> <li>CLI \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435</li> <li>\u0411\u043e\u0442 \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0441 CLI \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435</li> <li>\u0420\u0435\u0436\u0438\u043c <code>yolo</code> \u043e\u0442\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432\u0441\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f</li> </ul>"},{"location":"agents/qwen-code-cli/#authentication-issues","title":"Authentication Issues","text":"<p>\u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430: CLI \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f</p> <p>\u0420\u0435\u0448\u0435\u043d\u0438\u0435:</p> <ol> <li>\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 <code>qwen</code> \u0432 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435</li> <li>\u0421\u043b\u0435\u0434\u0443\u0439\u0442\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f\u043c \u0434\u043b\u044f OAuth \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0447\u0435\u0440\u0435\u0437 qwen.ai</li> <li>\u041b\u0438\u0431\u043e \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u0442\u0435 OpenAI-\u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u044b\u0439 API:</li> </ol> <pre><code>export OPENAI_API_KEY=\"your-key\"\nexport OPENAI_BASE_URL=\"your-url\"\n</code></pre>"},{"location":"agents/qwen-code-cli/#cli-not-found","title":"CLI Not Found","text":"<p>\u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430: <code>qwen: command not found</code></p> <p>\u0420\u0435\u0448\u0435\u043d\u0438\u0435:</p> <ol> <li>\u041f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0443: <code>npm list -g @qwen-code/qwen-code</code></li> <li>\u041f\u0435\u0440\u0435\u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435: <code>npm install -g @qwen-code/qwen-code@latest</code></li> <li>\u041f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435 PATH: <code>echo $PATH</code></li> <li>\u0415\u0441\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 nvm: \u0443\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044c, \u0447\u0442\u043e Node.js \u0430\u043a\u0442\u0438\u0432\u0438\u0440\u043e\u0432\u0430\u043d</li> </ol>"},{"location":"agents/qwen-code-cli/#see-also","title":"See Also","text":"<ul> <li>Agent Overview</li> <li>Autonomous Agent</li> <li>Stub Agent</li> </ul>"},{"location":"agents/stub-agent/","title":"Stub Agent","text":"<p>Simple testing agent for development.</p>"},{"location":"agents/stub-agent/#overview","title":"Overview","text":"<p>Basic agent for testing without AI processing.</p>"},{"location":"agents/stub-agent/#features","title":"Features","text":"<ul> <li>\u2705 Fast - No API calls</li> <li>\u2705 Simple - Basic categorization</li> <li>\u2705 No dependencies</li> </ul>"},{"location":"agents/stub-agent/#configuration","title":"Configuration","text":"<pre><code>AGENT_TYPE: \"stub\"\n</code></pre>"},{"location":"agents/stub-agent/#see-also","title":"See Also","text":"<ul> <li>Agent Overview</li> </ul>"},{"location":"architecture/agent-architecture/","title":"Agent Architecture","text":""},{"location":"architecture/agent-architecture/#overview","title":"Overview","text":"<p>The Agent system is the core AI component of tg-note responsible for analyzing content, generating structured notes, and executing autonomous tasks. The architecture supports multiple agent implementations with a common interface, allowing flexibility in choosing the right AI backend for your needs.</p>"},{"location":"architecture/agent-architecture/#agent-system-design","title":"Agent System Design","text":""},{"location":"architecture/agent-architecture/#core-principles","title":"Core Principles","text":"<ol> <li>Pluggable Architecture: Easy to add new agent types</li> <li>Common Interface: All agents implement <code>BaseAgent</code></li> <li>Tool Integration: Rich tool ecosystem for extended capabilities</li> <li>Async-First: Non-blocking operations</li> <li>User Isolation: Per-user agent instances and context</li> </ol>"},{"location":"architecture/agent-architecture/#architecture-diagram","title":"Architecture Diagram","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    Service Layer                              \u2502\n\u2502  (NoteCreationService, AgentTaskService, etc.)               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                            \u2502\n                            \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    Agent Factory                              \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u2502\n\u2502  \u2502 Creates agent instances based on configuration:    \u2502      \u2502\n\u2502  \u2502  - AGENT_TYPE: stub | qwen_code_cli | autonomous  \u2502      \u2502\n\u2502  \u2502  - Per-user instance caching                       \u2502      \u2502\n\u2502  \u2502  - Tool configuration                              \u2502      \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502                    \u2502                    \u2502\n        \u25bc                    \u25bc                    \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  StubAgent    \u2502  \u2502 QwenCodeCLI     \u2502  \u2502 Autonomous      \u2502\n\u2502               \u2502  \u2502 Agent           \u2502  \u2502 Agent           \u2502\n\u2502  - Testing    \u2502  \u2502                 \u2502  \u2502                 \u2502\n\u2502  - MVP        \u2502  \u2502 - Subprocess    \u2502  \u2502 - Python API    \u2502\n\u2502  - No AI      \u2502  \u2502 - Qwen Native   \u2502  \u2502 - OpenAI-compat \u2502\n\u2502               \u2502  \u2502 - Free tier     \u2502  \u2502 - Full control  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n        \u2502                   \u2502                    \u2502\n        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                            \u2502\n                            \u2502 All implement BaseAgent\n                            \u2502\n                            \u25bc\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502          BaseAgent Interface            \u2502\n        \u2502                                         \u2502\n        \u2502  async def process(...)                 \u2502\n        \u2502  async def execute_task(...)            \u2502\n        \u2502  get_available_tools()                  \u2502\n        \u2502  set_working_directory(...)             \u2502\n        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                         \u2502\n                         \u2502 Uses tools\n                         \u2502\n                         \u25bc\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502           Tool System                   \u2502\n        \u2502                                         \u2502\n        \u2502  - File Tools                           \u2502\n        \u2502  - Folder Tools                         \u2502\n        \u2502  - Git Tools                            \u2502\n        \u2502  - GitHub Tools                         \u2502\n        \u2502  - Web Search Tools                     \u2502\n        \u2502  - KB Reading Tools                     \u2502\n        \u2502  - Vector Search Tools                  \u2502\n        \u2502  - MCP Tools (DynamicMCPTool)           \u2502\n        \u2502  - Planning Tools                       \u2502\n        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/agent-architecture/#component-details","title":"Component Details","text":""},{"location":"architecture/agent-architecture/#baseagent-abstract-interface","title":"BaseAgent (Abstract Interface)","text":"<p>Location: <code>src/agents/base_agent.py</code></p> <p>Purpose: Defines the contract that all agents must implement</p> <p>Key Methods:</p> <pre><code>class BaseAgent(ABC):\n    @abstractmethod\n    async def process(\n        self,\n        messages: List[Dict[str, str]],\n        user_id: int,\n        kb_path: Path,\n        context: Optional[Dict[str, Any]] = None\n    ) -&gt; Dict[str, Any]:\n        \"\"\"Process messages and generate structured note\"\"\"\n        pass\n\n    @abstractmethod\n    async def execute_task(\n        self,\n        task: str,\n        user_id: int,\n        kb_path: Path,\n        context: Optional[Dict[str, Any]] = None\n    ) -&gt; Dict[str, Any]:\n        \"\"\"Execute autonomous task (agent mode)\"\"\"\n        pass\n\n    @abstractmethod\n    def get_available_tools(self) -&gt; List[str]:\n        \"\"\"Get list of available tool names\"\"\"\n        pass\n\n    def set_working_directory(self, directory: Path) -&gt; None:\n        \"\"\"Set agent working directory (optional)\"\"\"\n        pass\n</code></pre> <p>Response Format:</p> <pre><code>{\n    \"content\": str,              # Generated markdown content\n    \"category\": str,             # Topic category (ai, biology, physics, etc.)\n    \"files_created\": List[str],  # Paths of created files\n    \"files_edited\": List[str],   # Paths of edited files\n    \"files_deleted\": List[str],  # Paths of deleted files\n    \"folders_created\": List[str],# Paths of created folders\n    \"links\": List[Dict],         # Relations to other notes\n    \"metadata\": Dict[str, Any]   # Additional metadata\n}\n</code></pre>"},{"location":"architecture/agent-architecture/#agentfactory","title":"AgentFactory","text":"<p>Location: <code>src/agents/agent_factory.py</code></p> <p>Purpose: Creates and caches agent instances based on configuration</p> <p>Key Features:</p> <ul> <li>Type-based instantiation: Reads <code>AGENT_TYPE</code> from settings</li> <li>Per-user caching: One agent instance per user (stateful conversations)</li> <li>Tool configuration: Enables/disables tools based on settings</li> <li>MCP integration: Automatically connects MCP tools if enabled</li> </ul> <p>Usage:</p> <pre><code>from src.agents.agent_factory import AgentFactory\n\nfactory = AgentFactory(settings, mcp_client_factory)\n\n# Get or create agent for user\nagent = await factory.get_agent(user_id=123)\n\n# Process content\nresult = await agent.process(\n    messages=[{\"role\": \"user\", \"content\": \"Important article about AI\"}],\n    user_id=123,\n    kb_path=Path(\"/path/to/kb\")\n)\n</code></pre> <p>Agent Selection Logic:</p> <pre><code>if AGENT_TYPE == \"stub\":\n    return StubAgent()\nelif AGENT_TYPE == \"qwen_code_cli\":\n    return QwenCodeCLIAgent(settings)\nelif AGENT_TYPE == \"autonomous\":\n    return AutonomousAgent(settings, tools)\nelse:\n    raise ValueError(f\"Unknown agent type: {AGENT_TYPE}\")\n</code></pre>"},{"location":"architecture/agent-architecture/#agent-implementations","title":"Agent Implementations","text":""},{"location":"architecture/agent-architecture/#1-stubagent","title":"1. StubAgent","text":"<p>Location: <code>src/agents/stub_agent.py</code></p> <p>Purpose: Simple testing agent without AI dependencies</p> <p>Characteristics:</p> <ul> <li>\u2705 Fast and lightweight</li> <li>\u2705 No external API calls</li> <li>\u2705 Predictable output</li> <li>\u274c No real AI analysis</li> <li>\u274c Basic categorization (random)</li> </ul> <p>Use Cases:</p> <ul> <li>Unit testing</li> <li>MVP development</li> <li>CI/CD pipelines</li> <li>Development without API keys</li> </ul> <p>Example Response:</p> <pre><code>{\n    \"content\": \"# Processed Note\\n\\n[User content here]\",\n    \"category\": \"general\",\n    \"files_created\": [],\n    \"files_edited\": [],\n    \"files_deleted\": [],\n    \"folders_created\": [],\n    \"links\": [],\n    \"metadata\": {\"agent\": \"stub\", \"processing_time\": 0.1}\n}\n</code></pre> <p>Configuration:</p> <pre><code>AGENT_TYPE: \"stub\"\n</code></pre>"},{"location":"architecture/agent-architecture/#2-qwencodecliagent","title":"2. QwenCodeCLIAgent","text":"<p>Location: <code>src/agents/qwen_code_cli_agent.py</code></p> <p>Purpose: Integration with Qwen Code CLI (subprocess)</p> <p>Characteristics:</p> <ul> <li>\u2705 Uses Qwen3-Coder models</li> <li>\u2705 Free tier: 2000 requests/day</li> <li>\u2705 Built-in tools (web, git, github, shell)</li> <li>\u2705 TODO planning</li> <li>\u2705 Vision model support</li> <li>\u2705 Native MCP support (via <code>.qwen/settings.json</code>)</li> <li>\u26a0\ufe0f Subprocess overhead</li> <li>\u26a0\ufe0f Node.js dependency</li> </ul> <p>How It Works:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  QwenCodeCLIAgent    \u2502\n\u2502  (Python)            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n           \u2502\n           \u2502 subprocess.Popen()\n           \u2502\n           \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  qwen CLI            \u2502\n\u2502  (Node.js)           \u2502\n\u2502                      \u2502\n\u2502  - Qwen3 Model       \u2502\n\u2502  - Built-in tools    \u2502\n\u2502  - MCP client        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Tool Configuration:</p> <pre><code>AGENT_TYPE: \"qwen_code_cli\"\nAGENT_QWEN_CLI_PATH: \"qwen\"\nAGENT_ENABLE_WEB_SEARCH: true\nAGENT_ENABLE_GIT: true\nAGENT_ENABLE_GITHUB: true\nAGENT_ENABLE_SHELL: false  # Security: disabled by default\nAGENT_ENABLE_MCP: true      # Enable MCP support\n</code></pre> <p>MCP Configuration (optional, <code>.qwen/settings.json</code>):</p> <pre><code>{\n  \"mcpServers\": {\n    \"mcp-hub\": {\n      \"url\": \"http://127.0.0.1:8765/sse\",\n      \"timeout\": 10000,\n      \"trust\": true,\n      \"description\": \"MCP Hub with memory tools\"\n    }\n  },\n  \"allowMCPServers\": [\"mcp-hub\"]\n}\n</code></pre> <p>Prompt Engineering:</p> <p>The agent uses specialized prompts for different tasks:</p> <ul> <li>Note creation: \"Analyze the following messages and create a structured markdown note...\"</li> <li>Question answering: \"Answer the following question based on the KB content...\"</li> <li>Task execution: \"Execute the following task in the knowledge base...\"</li> </ul> <p>Response Parsing:</p> <p>The agent parses qwen CLI output to extract:</p> <ul> <li>Markdown content</li> <li>File operations (created, edited, deleted)</li> <li>Folder operations</li> <li>Category detection</li> <li>Links/relations</li> </ul> <p>Debugging:</p> <pre><code># Enable debug logs\nLOG_LEVEL: DEBUG\n\n# Run qwen CLI manually for testing\nqwen --work-dir /path/to/kb --prompt \"Test prompt\"\n</code></pre>"},{"location":"architecture/agent-architecture/#3-autonomousagent","title":"3. AutonomousAgent","text":"<p>Location: <code>src/agents/autonomous_agent.py</code></p> <p>Purpose: Python-based agent with OpenAI-compatible API</p> <p>Characteristics:</p> <ul> <li>\u2705 Full Python integration</li> <li>\u2705 OpenAI-compatible API (OpenAI, Azure, custom endpoints)</li> <li>\u2705 Function calling support</li> <li>\u2705 Rich tool ecosystem (Python-native)</li> <li>\u2705 MCP tools via Python client</li> <li>\u2705 Autonomous planning and execution</li> <li>\u26a0\ufe0f Requires API key</li> <li>\u26a0\ufe0f API costs (provider-dependent)</li> </ul> <p>How It Works:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  AutonomousAgent     \u2502\n\u2502  (Python)            \u2502\n\u2502                      \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502 LLM Connector  \u2502\u2500\u2500\u253c\u2500\u2500\u2500\u25ba OpenAI API\n\u2502  \u2502 (OpenAI/Azure) \u2502  \u2502     (or compatible)\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502                      \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502 Tool Registry  \u2502  \u2502\n\u2502  \u2502  - File tools  \u2502  \u2502\n\u2502  \u2502  - Git tools   \u2502  \u2502\n\u2502  \u2502  - Web tools   \u2502  \u2502\n\u2502  \u2502  - MCP tools   \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Tool Integration:</p> <pre><code># Tools are registered and passed to LLM as function definitions\ntools = [\n    FileTool(),\n    GitTool(),\n    WebSearchTool(),\n    DynamicMCPTool(mcp_client),  # MCP integration\n    VectorSearchTool(),\n]\n\n# LLM receives tool definitions\nfunctions = [tool.to_openai_function() for tool in tools]\n\n# LLM calls tools via function calling\nresponse = await openai_client.chat.completions.create(\n    model=\"gpt-3.5-turbo\",\n    messages=messages,\n    functions=functions,\n    function_call=\"auto\"\n)\n</code></pre> <p>MCP Integration:</p> <pre><code>from src.mcp.dynamic_mcp_tools import DynamicMCPTool\n\n# Create MCP tool that wraps all MCP server tools\nmcp_tool = DynamicMCPTool(mcp_client_factory, user_id)\n\n# MCP tool provides access to:\n# - Built-in memory tools (store_memory, retrieve_memory)\n# - External MCP servers (from registry)\n# - All tools appear as native Python functions to the agent\n</code></pre> <p>Configuration:</p> <pre><code>AGENT_TYPE: \"autonomous\"\nAGENT_MODEL: \"gpt-3.5-turbo\"\nAGENT_MAX_ITERATIONS: 10\nAGENT_TIMEOUT: 300\nAGENT_ENABLE_WEB_SEARCH: true\nAGENT_ENABLE_FILE_MANAGEMENT: true\nAGENT_ENABLE_FOLDER_MANAGEMENT: true\nAGENT_ENABLE_GIT: true\nAGENT_ENABLE_GITHUB: true\nAGENT_ENABLE_SHELL: false\nAGENT_ENABLE_MCP: true\n</code></pre> <p>Environment Variables:</p> <pre><code>OPENAI_API_KEY=sk-...\nOPENAI_BASE_URL=https://api.openai.com/v1  # Optional, for custom endpoints\n</code></pre> <p>Autonomous Loop:</p> <pre><code>for iteration in range(max_iterations):\n    # 1. Get LLM response\n    response = await llm.chat(messages, functions)\n\n    # 2. Check if function call requested\n    if response.function_call:\n        tool_name = response.function_call.name\n        tool_args = json.loads(response.function_call.arguments)\n\n        # 3. Execute tool\n        result = await tools[tool_name].execute(**tool_args)\n\n        # 4. Add result to messages\n        messages.append({\n            \"role\": \"function\",\n            \"name\": tool_name,\n            \"content\": json.dumps(result)\n        })\n    else:\n        # 5. Final answer received\n        break\n</code></pre> <p>Prompt System:</p> <p>The agent uses system prompts to guide behavior:</p> <pre><code>SYSTEM_PROMPT = \"\"\"\nYou are an AI assistant helping to organize a knowledge base.\n\nYour task is to:\n1. Analyze the provided content\n2. Extract key information\n3. Create a well-structured markdown note\n4. Categorize content by topic\n5. Create links to related notes\n\nAvailable tools: {tool_list}\n\nKnowledge base structure:\n- topics/ai/ - AI and machine learning\n- topics/biology/ - Biology and life sciences\n- topics/physics/ - Physics and chemistry\n- topics/tech/ - Technology and engineering\n- ...\n\"\"\"\n</code></pre>"},{"location":"architecture/agent-architecture/#tool-system","title":"Tool System","text":""},{"location":"architecture/agent-architecture/#tool-architecture","title":"Tool Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                     Tool Registry                           \u2502\n\u2502  (src/agents/tools/registry.py)                            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502                    \u2502                     \u2502\n        \u25bc                    \u25bc                     \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  File Tools   \u2502  \u2502  Git Tools       \u2502  \u2502  Web Tools     \u2502\n\u2502               \u2502  \u2502                  \u2502  \u2502                \u2502\n\u2502  - create     \u2502  \u2502  - commit        \u2502  \u2502  - search      \u2502\n\u2502  - read       \u2502  \u2502  - push          \u2502  \u2502  - fetch       \u2502\n\u2502  - update     \u2502  \u2502  - branch        \u2502  \u2502                \u2502\n\u2502  - delete     \u2502  \u2502  - status        \u2502  \u2502                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Folder Tools  \u2502  \u2502 GitHub Tools     \u2502  \u2502 KB Reading     \u2502\n\u2502               \u2502  \u2502                  \u2502  \u2502 Tools          \u2502\n\u2502  - create     \u2502  \u2502  - create_issue  \u2502  \u2502                \u2502\n\u2502  - list       \u2502  \u2502  - create_pr     \u2502  \u2502  - search_kb   \u2502\n\u2502  - delete     \u2502  \u2502  - comment       \u2502  \u2502  - list_files  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Vector Search \u2502  \u2502  MCP Tools       \u2502\n\u2502 Tools         \u2502  \u2502  (Dynamic)       \u2502\n\u2502               \u2502  \u2502                  \u2502\n\u2502  - semantic   \u2502  \u2502  - memory        \u2502\n\u2502  - similarity \u2502  \u2502  - custom        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/agent-architecture/#tool-categories","title":"Tool Categories","text":""},{"location":"architecture/agent-architecture/#1-file-tools-srcagentstoolsfile_toolspy","title":"1. File Tools (<code>src/agents/tools/file_tools.py</code>)","text":"<p>Purpose: File system operations</p> <p>Available Tools:</p> <ul> <li><code>create_file(path, content)</code>: Create new file</li> <li><code>read_file(path)</code>: Read file contents</li> <li><code>update_file(path, content)</code>: Update file</li> <li><code>delete_file(path)</code>: Delete file</li> <li><code>list_files(directory)</code>: List files in directory</li> </ul> <p>Safety Features:</p> <ul> <li>Path validation (prevent path traversal)</li> <li>Working directory restriction</li> <li>Backup before overwrite</li> <li>Atomic operations</li> </ul>"},{"location":"architecture/agent-architecture/#2-folder-tools-srcagentstoolsfolder_toolspy","title":"2. Folder Tools (<code>src/agents/tools/folder_tools.py</code>)","text":"<p>Purpose: Directory management</p> <p>Available Tools:</p> <ul> <li><code>create_folder(path)</code>: Create directory</li> <li><code>delete_folder(path)</code>: Delete directory (recursive)</li> <li><code>list_folders(directory)</code>: List subdirectories</li> </ul>"},{"location":"architecture/agent-architecture/#3-git-tools-srcagentstoolsgit_toolspy","title":"3. Git Tools (<code>src/agents/tools/git_tools.py</code>)","text":"<p>Purpose: Git operations</p> <p>Available Tools:</p> <ul> <li><code>git_commit(message)</code>: Commit changes</li> <li><code>git_push()</code>: Push to remote</li> <li><code>git_status()</code>: Check repository status</li> <li><code>git_branch()</code>: Manage branches</li> <li><code>git_pull()</code>: Pull from remote</li> </ul> <p>Integration: Uses <code>GitOperations</code> from KB layer</p>"},{"location":"architecture/agent-architecture/#4-github-tools-srcagentstoolsgithub_toolspy","title":"4. GitHub Tools (<code>src/agents/tools/github_tools.py</code>)","text":"<p>Purpose: GitHub API operations</p> <p>Available Tools:</p> <ul> <li><code>create_github_issue(title, body)</code>: Create issue</li> <li><code>create_github_pr(title, body, branch)</code>: Create pull request</li> <li><code>comment_on_issue(issue_number, comment)</code>: Add comment</li> </ul> <p>Requires: <code>GITHUB_TOKEN</code> environment variable</p>"},{"location":"architecture/agent-architecture/#5-web-tools-srcagentstoolsweb_toolspy","title":"5. Web Tools (<code>src/agents/tools/web_tools.py</code>)","text":"<p>Purpose: Web search and fetching</p> <p>Available Tools:</p> <ul> <li><code>web_search(query)</code>: Search the web</li> <li><code>fetch_url(url)</code>: Fetch webpage content</li> </ul> <p>Backends:</p> <ul> <li>DuckDuckGo (default, no API key)</li> <li>Google Custom Search (requires API key)</li> </ul>"},{"location":"architecture/agent-architecture/#6-kb-reading-tools-srcagentstoolskb_reading_toolspy","title":"6. KB Reading Tools (<code>src/agents/tools/kb_reading_tools.py</code>)","text":"<p>Purpose: Knowledge base search and reading</p> <p>Available Tools:</p> <ul> <li><code>search_kb(query)</code>: Search KB content</li> <li><code>list_kb_files(path)</code>: List files in KB</li> <li><code>get_kb_structure()</code>: Get KB directory structure</li> </ul> <p>Integration: Direct access to KB file system</p>"},{"location":"architecture/agent-architecture/#7-vector-search-tools-srcagentstoolsvector_search_toolspy","title":"7. Vector Search Tools (<code>src/agents/tools/vector_search_tools.py</code>)","text":"<p>Purpose: Semantic search in KB</p> <p>Available Tools:</p> <ul> <li><code>vector_search(query, top_k)</code>: Semantic search</li> <li><code>similarity_search(text, threshold)</code>: Find similar content</li> </ul> <p>Backends:</p> <ul> <li>FAISS (local)</li> <li>Qdrant (server-based)</li> </ul>"},{"location":"architecture/agent-architecture/#8-mcp-tools-dynamic","title":"8. MCP Tools (Dynamic)","text":"<p>Purpose: Access to MCP protocol tools</p> <p>Available Tools: Dynamic, based on connected MCP servers</p> <p>Built-in (via MCP Hub):</p> <ul> <li><code>store_memory(content, category, user_id)</code>: Store memory</li> <li><code>retrieve_memory(query, user_id, category)</code>: Retrieve memory</li> <li><code>list_categories(user_id)</code>: List memory categories</li> </ul> <p>External: Any tools from registered MCP servers</p> <p>See Also: MCP Architecture, MCP Tools</p>"},{"location":"architecture/agent-architecture/#tool-configuration","title":"Tool Configuration","text":"<p>Tools are enabled/disabled via settings:</p> <pre><code># File/Folder tools\nAGENT_ENABLE_FILE_MANAGEMENT: true\nAGENT_ENABLE_FOLDER_MANAGEMENT: true\n\n# Git tools\nAGENT_ENABLE_GIT: true\n\n# GitHub tools\nAGENT_ENABLE_GITHUB: true\n\n# Shell tools (security risk - disabled by default)\nAGENT_ENABLE_SHELL: false\n\n# Web tools\nAGENT_ENABLE_WEB_SEARCH: true\n\n# MCP tools\nAGENT_ENABLE_MCP: true\nAGENT_ENABLE_MCP_MEMORY: true\n\n# Vector search\nAGENT_ENABLE_VECTOR_SEARCH: true\n</code></pre>"},{"location":"architecture/agent-architecture/#agent-lifecycle","title":"Agent Lifecycle","text":""},{"location":"architecture/agent-architecture/#1-initialization","title":"1. Initialization","text":"<pre><code># Create agent via factory\nagent = await agent_factory.get_agent(user_id=123)\n\n# Configure working directory (if needed)\nagent.set_working_directory(kb_path)\n\n# Agent is now ready to process requests\n</code></pre>"},{"location":"architecture/agent-architecture/#2-processing","title":"2. Processing","text":"<pre><code># Process content (note mode)\nresult = await agent.process(\n    messages=[\n        {\"role\": \"user\", \"content\": \"Important article about quantum computing\"}\n    ],\n    user_id=123,\n    kb_path=Path(\"/path/to/kb\"),\n    context={\"previous_messages\": [...]}\n)\n</code></pre>"},{"location":"architecture/agent-architecture/#3-task-execution","title":"3. Task Execution","text":"<pre><code># Execute task (agent mode)\nresult = await agent.execute_task(\n    task=\"Find all notes about AI and create a summary document\",\n    user_id=123,\n    kb_path=Path(\"/path/to/kb\"),\n    context={\"previous_tasks\": [...]}\n)\n</code></pre>"},{"location":"architecture/agent-architecture/#4-cleanup","title":"4. Cleanup","text":"<pre><code># Agent instances are cached per user\n# No explicit cleanup needed (managed by factory)\n</code></pre>"},{"location":"architecture/agent-architecture/#agent-context","title":"Agent Context","text":""},{"location":"architecture/agent-architecture/#user-context","title":"User Context","text":"<p>Each user has isolated context:</p> <pre><code>{\n    \"user_id\": 123,\n    \"kb_path\": Path(\"/path/to/kb\"),\n    \"previous_messages\": [...],  # Conversation history\n    \"working_directory\": Path(\"/path/to/kb/topics\"),\n    \"preferences\": {...}  # User settings\n}\n</code></pre>"},{"location":"architecture/agent-architecture/#conversation-context","title":"Conversation Context","text":"<p>Maintained by <code>UserContextManager</code>:</p> <pre><code>from src.services.user_context_manager import UserContextManager\n\ncontext_manager = UserContextManager()\n\n# Add message to context\ncontext_manager.add_message(\n    user_id=123,\n    role=\"user\",\n    content=\"Tell me about AI\"\n)\n\n# Get context for agent\ncontext = context_manager.get_context(user_id=123, max_messages=10)\n</code></pre>"},{"location":"architecture/agent-architecture/#agent-selection-guide","title":"Agent Selection Guide","text":""},{"location":"architecture/agent-architecture/#use-stubagent-when","title":"Use StubAgent When:","text":"<ul> <li>\u2705 Testing without API keys</li> <li>\u2705 CI/CD pipelines</li> <li>\u2705 MVP development</li> <li>\u2705 Quick prototyping</li> </ul>"},{"location":"architecture/agent-architecture/#use-qwencodecliagent-when","title":"Use QwenCodeCLIAgent When:","text":"<ul> <li>\u2705 You want free tier (2000/day)</li> <li>\u2705 You need vision model</li> <li>\u2705 You prefer official Qwen integration</li> <li>\u2705 Subprocess overhead is acceptable</li> <li>\u2705 Node.js is available</li> </ul>"},{"location":"architecture/agent-architecture/#use-autonomousagent-when","title":"Use AutonomousAgent When:","text":"<ul> <li>\u2705 You need MCP tools (Python native)</li> <li>\u2705 You have OpenAI-compatible API</li> <li>\u2705 You need custom tool development</li> <li>\u2705 You want full Python control</li> <li>\u2705 Function calling is important</li> </ul>"},{"location":"architecture/agent-architecture/#performance-considerations","title":"Performance Considerations","text":""},{"location":"architecture/agent-architecture/#response-time","title":"Response Time","text":"<ul> <li>StubAgent: &lt; 100ms (no API calls)</li> <li>QwenCodeCLIAgent: 2-10s (subprocess + API)</li> <li>AutonomousAgent: 3-15s (API + function calls)</li> </ul>"},{"location":"architecture/agent-architecture/#memory-usage","title":"Memory Usage","text":"<ul> <li>StubAgent: ~10 MB</li> <li>QwenCodeCLIAgent: ~50 MB (subprocess)</li> <li>AutonomousAgent: ~30 MB (Python only)</li> </ul>"},{"location":"architecture/agent-architecture/#concurrency","title":"Concurrency","text":"<ul> <li>Agents are cached per user</li> <li>Multiple users = multiple agent instances</li> <li>Async operations allow concurrent processing</li> <li>Rate limiting prevents API abuse</li> </ul>"},{"location":"architecture/agent-architecture/#error-handling","title":"Error Handling","text":""},{"location":"architecture/agent-architecture/#agent-failures","title":"Agent Failures","text":"<pre><code>try:\n    result = await agent.process(messages, user_id, kb_path)\nexcept AgentTimeoutError:\n    # Agent took too long\n    notify_user(\"Processing timed out. Please try again.\")\nexcept AgentAPIError as e:\n    # API error (rate limit, auth, etc.)\n    notify_user(f\"AI service error: {e.message}\")\nexcept Exception as e:\n    # Unexpected error\n    log_error(e)\n    notify_user(\"An error occurred. Please try again.\")\n</code></pre>"},{"location":"architecture/agent-architecture/#graceful-degradation","title":"Graceful Degradation","text":"<ul> <li>If agent fails, system continues running</li> <li>User receives error notification</li> <li>Logs contain detailed error information</li> <li>System state remains consistent</li> </ul>"},{"location":"architecture/agent-architecture/#testing-agents","title":"Testing Agents","text":""},{"location":"architecture/agent-architecture/#unit-testing","title":"Unit Testing","text":"<pre><code>import pytest\nfrom src.agents.stub_agent import StubAgent\n\n@pytest.mark.asyncio\nasync def test_stub_agent_process():\n    agent = StubAgent()\n\n    result = await agent.process(\n        messages=[{\"role\": \"user\", \"content\": \"Test\"}],\n        user_id=123,\n        kb_path=Path(\"/tmp/test_kb\")\n    )\n\n    assert \"content\" in result\n    assert \"category\" in result\n    assert result[\"category\"] in [\"ai\", \"biology\", \"physics\", \"tech\", \"general\"]\n</code></pre>"},{"location":"architecture/agent-architecture/#integration-testing","title":"Integration Testing","text":"<pre><code>@pytest.mark.asyncio\nasync def test_autonomous_agent_with_tools():\n    agent = AutonomousAgent(settings, tools=[FileTool(), GitTool()])\n\n    result = await agent.execute_task(\n        task=\"Create a file named test.md with content 'Hello'\",\n        user_id=123,\n        kb_path=Path(\"/tmp/test_kb\")\n    )\n\n    assert Path(\"/tmp/test_kb/test.md\").exists()\n    assert Path(\"/tmp/test_kb/test.md\").read_text() == \"Hello\"\n</code></pre>"},{"location":"architecture/agent-architecture/#mocking","title":"Mocking","text":"<pre><code>from unittest.mock import AsyncMock, MagicMock\n\n# Mock OpenAI client\nmock_openai = AsyncMock()\nmock_openai.chat.completions.create.return_value = MagicMock(\n    choices=[MagicMock(message=MagicMock(content=\"Generated content\"))]\n)\n\n# Test agent with mock\nagent = AutonomousAgent(settings, llm_client=mock_openai)\n</code></pre>"},{"location":"architecture/agent-architecture/#related-documentation","title":"Related Documentation","text":"<ul> <li>Agent Overview - User-facing agent documentation</li> <li>Autonomous Agent - Autonomous agent setup</li> <li>Qwen Code CLI - Qwen CLI integration</li> <li>Stub Agent - Testing agent</li> <li>MCP Tools - MCP tool integration</li> <li>KB Reading Tools - KB search tools</li> <li>Architecture Overview - System-wide architecture</li> <li>Data Flow - Data flow through agents</li> </ul>"},{"location":"architecture/bot-port/","title":"Bot Port Interface","text":"<p>The Bot Port defines a stable interface between the bot layer and services, enabling platform-agnostic business logic.</p>"},{"location":"architecture/bot-port/#purpose","title":"Purpose","text":"<ul> <li>Decouple Telegram-specific APIs from services</li> <li>Allow replacing the transport (Telegram/Discord/Slack) without changing services</li> </ul>"},{"location":"architecture/bot-port/#interface-responsibilities","title":"Interface Responsibilities","text":"<ul> <li>Accept DTO-based inputs (message IDs, chat IDs, user IDs)</li> <li>Expose minimal methods required by services</li> <li>Avoid SDK-specific types in method signatures</li> </ul>"},{"location":"architecture/bot-port/#example-responsibilities","title":"Example Responsibilities","text":"<ul> <li>Edit message text by <code>chat_id</code> and <code>message_id</code></li> <li>Send messages and documents</li> <li>Answer callback queries</li> </ul>"},{"location":"architecture/bot-port/#see-also","title":"See also","text":"<ul> <li>Message DTO Architecture</li> </ul>"},{"location":"architecture/data-flow/","title":"Data Flow Architecture","text":""},{"location":"architecture/data-flow/#overview","title":"Overview","text":"<p>This document describes the step-by-step data flow through the tg-note system for different operations. Understanding these flows is essential for debugging, optimization, and extending the system.</p>"},{"location":"architecture/data-flow/#note-creation-flow","title":"Note Creation Flow","text":""},{"location":"architecture/data-flow/#high-level-flow","title":"High-Level Flow","text":"<pre><code>graph TD\n    A[User sends message] --&gt; B[Bot receives event]\n    B --&gt; C[Convert to DTO]\n    C --&gt; D[Message aggregation]\n    D --&gt; E{Timeout reached?}\n    E --&gt;|No| D\n    E --&gt;|Yes| F[Check deduplication]\n    F --&gt; G{Already processed?}\n    G --&gt;|Yes| H[Ignore]\n    G --&gt;|No| I[Create processing message]\n    I --&gt; J[Note Creation Service]\n    J --&gt; K[Acquire KB lock]\n    K --&gt; L[Pull from Git]\n    L --&gt; M[Process with agent]\n    M --&gt; N[Save to KB]\n    N --&gt; O[Commit &amp; push]\n    O --&gt; P[Release lock]\n    P --&gt; Q[Notify user]\n    Q --&gt; R[Update processing message]\n</code></pre>"},{"location":"architecture/data-flow/#detailed-step-by-step-flow","title":"Detailed Step-by-Step Flow","text":""},{"location":"architecture/data-flow/#phase-1-message-reception-bot-layer","title":"Phase 1: Message Reception (Bot Layer)","text":"<p>Components: <code>TelegramBotAdapter</code>, <code>BotHandlers</code>, <code>MessageMapper</code></p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 1. Telegram sends update to bot webhook/polling             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 2. TelegramBotAdapter.message_handler() receives update     \u2502\n\u2502    - Validates user (check ALLOWED_USER_IDS)                \u2502\n\u2502    - Extracts message data                                  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 3. MessageMapper.from_telegram_message()                    \u2502\n\u2502    - Creates IncomingMessageDTO                             \u2502\n\u2502    - Extracts: message_id, chat_id, user_id, text, etc.    \u2502\n\u2502    - Handles: text, photo, document, forwarded              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n                    IncomingMessageDTO\n</code></pre> <p>Data Format (IncomingMessageDTO):</p> <pre><code>{\n    \"message_id\": 12345,\n    \"chat_id\": 67890,\n    \"user_id\": 123,\n    \"text\": \"Important article about AI...\",\n    \"content_type\": \"text\",  # or \"photo\", \"document\"\n    \"timestamp\": 1634567890,\n    \"forwarded_from\": {\n        \"id\": 456,\n        \"title\": \"AI News Channel\"\n    },  # Optional\n    \"media\": [\n        {\n            \"type\": \"photo\",\n            \"file_id\": \"AgACAgIAAxk...\",\n            \"caption\": \"Figure 1: Neural network\"\n        }\n    ]  # Optional\n}\n</code></pre>"},{"location":"architecture/data-flow/#phase-2-message-aggregation-service-layer","title":"Phase 2: Message Aggregation (Service Layer)","text":"<p>Components: <code>MessageProcessor</code>, <code>MessageAggregator</code></p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 4. MessageProcessor.process_message(dto)                    \u2502\n\u2502    - Checks current mode (note/ask/agent)                   \u2502\n\u2502    - Routes to MessageAggregator                            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 5. MessageAggregator.add_message(dto)                       \u2502\n\u2502    - Stores message in buffer                               \u2502\n\u2502    - Starts/resets 30s timer                                \u2502\n\u2502    - Groups related messages by user                        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u2502 (wait 30s or explicit trigger)\n                             \u2502\n                             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 6. MessageAggregator._process_group()                       \u2502\n\u2502    - Combines all buffered messages                         \u2502\n\u2502    - Extracts combined text                                 \u2502\n\u2502    - Collects all media                                     \u2502\n\u2502    - Generates hash for deduplication                       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n                      MessageGroup\n</code></pre> <p>Data Format (MessageGroup):</p> <pre><code>{\n    \"messages\": [dto1, dto2, dto3],  # List of IncomingMessageDTOs\n    \"combined_text\": \"Full text from all messages...\",\n    \"media\": [\n        {\"type\": \"photo\", \"file_id\": \"...\", \"caption\": \"...\"},\n        {\"type\": \"document\", \"file_id\": \"...\", \"filename\": \"paper.pdf\"}\n    ],\n    \"hash\": \"sha256_hash_of_content\",\n    \"user_id\": 123,\n    \"chat_id\": 67890,\n    \"timestamp\": 1634567890\n}\n</code></pre>"},{"location":"architecture/data-flow/#phase-3-deduplication-check","title":"Phase 3: Deduplication Check","text":"<p>Components: <code>ProcessingTracker</code></p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 7. ProcessingTracker.is_processed(hash)                     \u2502\n\u2502    - Checks data/processed.json                             \u2502\n\u2502    - Returns True if already processed                      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502                 \u2502\n                 Already          Not Processed\n                Processed              \u2502\n                    \u2502                  \u2502\n                    \u25bc                  \u25bc\n            [Stop Processing]   [Continue]\n</code></pre> <p>Data Format (processed.json):</p> <pre><code>{\n  \"hashes\": {\n    \"sha256_abc123...\": {\n      \"timestamp\": 1634567890,\n      \"user_id\": 123,\n      \"content_preview\": \"Important article about...\"\n    }\n  },\n  \"stats\": {\n    \"total_processed\": 42,\n    \"users\": {\n      \"123\": 15,\n      \"456\": 27\n    }\n  }\n}\n</code></pre>"},{"location":"architecture/data-flow/#phase-4-note-creation-service","title":"Phase 4: Note Creation Service","text":"<p>Components: <code>NoteCreationService</code>, <code>BaseKBService</code></p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 8. Create \"Processing...\" message                           \u2502\n\u2502    - bot.send_message(chat_id, \"\u23f3 Processing...\")          \u2502\n\u2502    - Store message_id for later editing                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 9. NoteCreationService.create_note()                        \u2502\n\u2502    - Validate user KB exists                                \u2502\n\u2502    - Get KB path                                            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 10. Setup Git operations (BaseKBService)                    \u2502\n\u2502     - Load user credentials                                 \u2502\n\u2502     - Initialize GitOperations                              \u2502\n\u2502     - Configure remote authentication                       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 11. Determine agent working directory (BaseKBService)       \u2502\n\u2502     - If KB_TOPICS_ONLY=true: kb_path/topics/               \u2502\n\u2502     - If KB_TOPICS_ONLY=false: kb_path/                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 12. KBSyncManager.with_kb_lock(kb_path)                     \u2502\n\u2502     - Acquire async lock (in-process)                       \u2502\n\u2502     - Acquire file lock (cross-process)                     \u2502\n\u2502     - Wait if another user is working (queue)               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n                     Lock Acquired \u2713\n</code></pre>"},{"location":"architecture/data-flow/#phase-5-git-synchronization","title":"Phase 5: Git Synchronization","text":"<p>Components: <code>GitOperations</code></p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 13. GitOperations.pull()                                    \u2502\n\u2502     - Check for uncommitted changes                         \u2502\n\u2502     - Validate remote configured                            \u2502\n\u2502     - Execute: git pull origin main                         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502                 \u2502\n              Pull Success      Pull Failed\n                    \u2502                 \u2502\n                    \u2502                 \u25bc\n                    \u2502         [Handle Error]\n                    \u2502         - Merge conflict\n                    \u2502         - No remote\n                    \u2502         - Auth error\n                    \u25bc\n              [Continue]\n</code></pre>"},{"location":"architecture/data-flow/#phase-6-agent-processing","title":"Phase 6: Agent Processing","text":"<p>Components: <code>AgentFactory</code>, Agent implementations</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 14. Edit processing message                                 \u2502\n\u2502     - bot.edit_message_text(                                \u2502\n\u2502         \"\ud83e\udd16 Analyzing with AI agent...\"                     \u2502\n\u2502       )                                                      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 15. AgentFactory.get_agent(user_id)                         \u2502\n\u2502     - Get or create cached agent instance                   \u2502\n\u2502     - Configure agent tools                                 \u2502\n\u2502     - Set working directory                                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 16. Check rate limit (BaseKBService)                        \u2502\n\u2502     - Check user's last request time                        \u2502\n\u2502     - Enforce rate limit (prevent API abuse)                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 17. Agent.process(messages, user_id, kb_path)               \u2502\n\u2502     - Prepare messages for agent                            \u2502\n\u2502     - Add system prompt                                     \u2502\n\u2502     - Add KB structure context                              \u2502\n\u2502     - Call LLM API                                          \u2502\n\u2502     - Parse response                                        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n                    Agent Response\n</code></pre> <p>Data Format (Agent Input):</p> <pre><code>[\n    {\n        \"role\": \"system\",\n        \"content\": \"You are an AI assistant helping to organize a knowledge base...\"\n    },\n    {\n        \"role\": \"user\",\n        \"content\": \"Analyze and create a structured note:\\n\\nImportant article about AI...\"\n    }\n]\n</code></pre> <p>Data Format (Agent Response):</p> <pre><code>{\n    \"content\": \"# Neural Networks Breakthrough\\n\\n## Summary\\n...\",\n    \"category\": \"ai\",\n    \"files_created\": [\"topics/ai/2025-10-19-neural-networks.md\"],\n    \"files_edited\": [],\n    \"files_deleted\": [],\n    \"folders_created\": [\"topics/ai\"],\n    \"links\": [\n        {\n            \"source\": \"topics/ai/2025-10-19-neural-networks.md\",\n            \"target\": \"topics/ai/deep-learning.md\",\n            \"type\": \"related\"\n        }\n    ],\n    \"metadata\": {\n        \"agent_type\": \"autonomous\",\n        \"processing_time\": 5.2,\n        \"tokens_used\": 1500\n    }\n}\n</code></pre>"},{"location":"architecture/data-flow/#phase-7-file-system-operations","title":"Phase 7: File System Operations","text":"<p>Components: Agent tools, KB Layer</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 18. Agent creates files (via tools)                         \u2502\n\u2502     - file_tool.create_file(path, content)                  \u2502\n\u2502     - Validates path (no traversal)                         \u2502\n\u2502     - Ensures directory exists                              \u2502\n\u2502     - Writes content atomically                             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 19. Update KB index (if configured)                         \u2502\n\u2502     - Regenerate topics/index.md                            \u2502\n\u2502     - Update links                                          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n                    Files Written \u2713\n</code></pre> <p>File System State:</p> <pre><code>knowledge_base/\n\u251c\u2500\u2500 topics/\n\u2502   \u251c\u2500\u2500 ai/\n\u2502   \u2502   \u251c\u2500\u2500 2025-10-19-neural-networks.md  \u2190 NEW\n\u2502   \u2502   \u251c\u2500\u2500 deep-learning.md\n\u2502   \u2502   \u2514\u2500\u2500 index.md  \u2190 UPDATED\n\u2502   \u2514\u2500\u2500 index.md  \u2190 UPDATED\n\u2514\u2500\u2500 index.md  \u2190 UPDATED\n</code></pre>"},{"location":"architecture/data-flow/#phase-8-git-commit-and-push","title":"Phase 8: Git Commit and Push","text":"<p>Components: <code>GitOperations</code>, <code>BaseKBService</code></p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 20. BaseKBService._auto_commit_and_push()                   \u2502\n\u2502     - git add &lt;files&gt;                                       \u2502\n\u2502     - git commit -m \"Add: Neural networks article\"         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 21. GitOperations.push()                                    \u2502\n\u2502     - git push origin main                                  \u2502\n\u2502     - Handle authentication                                 \u2502\n\u2502     - Retry on network errors                               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502                 \u2502\n              Push Success      Push Failed\n                    \u2502                 \u2502\n                    \u2502                 \u25bc\n                    \u2502         [Log Error]\n                    \u2502         [Notify User]\n                    \u25bc\n              [Continue]\n</code></pre>"},{"location":"architecture/data-flow/#phase-9-lock-release-and-notification","title":"Phase 9: Lock Release and Notification","text":"<p>Components: <code>KBSyncManager</code>, <code>NoteCreationService</code></p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 22. Release KB locks                                        \u2502\n\u2502     - Release file lock                                     \u2502\n\u2502     - Release async lock                                    \u2502\n\u2502     - Next user can proceed                                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 23. Format success message (BaseKBService)                  \u2502\n\u2502     - Created files with GitHub links                       \u2502\n\u2502     - Related notes/links                                   \u2502\n\u2502     - Processing time                                       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 24. Edit processing message to final result                 \u2502\n\u2502     - bot.edit_message_text(chat_id, msg_id, result)       \u2502\n\u2502     - Add inline buttons (view, edit, delete)               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 25. Mark as processed (ProcessingTracker)                   \u2502\n\u2502     - Add hash to processed.json                            \u2502\n\u2502     - Update statistics                                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Final User Notification:</p> <pre><code>\u2705 Note created successfully!\n\n\ud83d\udcdd Created files:\n\u2022 topics/ai/2025-10-19-neural-networks.md\n\n\ud83d\udd17 Related notes:\n\u2022 Deep Learning Basics\n\n\u23f1 Processing time: 5.2s\n\n[View on GitHub] [Edit] [Delete]\n</code></pre>"},{"location":"architecture/data-flow/#question-answering-flow-ask-mode","title":"Question Answering Flow (/ask mode)","text":""},{"location":"architecture/data-flow/#high-level-flow_1","title":"High-Level Flow","text":"<pre><code>graph TD\n    A[User asks question] --&gt; B[Bot receives message]\n    B --&gt; C[Convert to DTO]\n    C --&gt; D[QuestionAnsweringService]\n    D --&gt; E{Vector search enabled?}\n    E --&gt;|Yes| F[Semantic search KB]\n    E --&gt;|No| G[Direct agent query]\n    F --&gt; H[Get relevant documents]\n    H --&gt; G\n    G --&gt; I[Agent generates answer]\n    I --&gt; J[Format with sources]\n    J --&gt; K[Send to user]\n</code></pre>"},{"location":"architecture/data-flow/#detailed-flow","title":"Detailed Flow","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 1. User sends question in /ask mode                         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 2. MessageProcessor routes to QuestionAnsweringService      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 3. (Optional) VectorSearchManager.search(query)             \u2502\n\u2502    - Embed query                                            \u2502\n\u2502    - Search vector store                                    \u2502\n\u2502    - Return top-k documents                                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 4. Read relevant KB files                                   \u2502\n\u2502    - KB reading tools                                       \u2502\n\u2502    - Extract file contents                                  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 5. Agent generates answer                                   \u2502\n\u2502    - System prompt: \"Answer based on KB content\"            \u2502\n\u2502    - User question + KB context                             \u2502\n\u2502    - LLM generates answer                                   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 6. Format answer with sources                               \u2502\n\u2502    - Answer text                                            \u2502\n\u2502    - Source files (GitHub links)                            \u2502\n\u2502    - Confidence score                                       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 7. Send to user                                             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>User Notification:</p> <pre><code>\ud83e\udd14 Answer:\n\nNeural networks are computational models inspired by biological neural\nnetworks. They consist of layers of interconnected nodes (neurons) that\nprocess information...\n\n\ud83d\udcda Sources:\n\u2022 topics/ai/2025-10-19-neural-networks.md\n\u2022 topics/ai/deep-learning.md\n\n\u23f1 Processing time: 3.1s\n</code></pre>"},{"location":"architecture/data-flow/#agent-task-flow-agent-mode","title":"Agent Task Flow (/agent mode)","text":""},{"location":"architecture/data-flow/#high-level-flow_2","title":"High-Level Flow","text":"<pre><code>graph TD\n    A[User sends task] --&gt; B[Bot receives message]\n    B --&gt; C[Convert to DTO]\n    C --&gt; D[AgentTaskService]\n    D --&gt; E[Acquire KB lock]\n    E --&gt; F[Pull from Git]\n    F --&gt; G[Parse task]\n    G --&gt; H[Agent executes with tools]\n    H --&gt; I{Task complete?}\n    I --&gt;|No| J[Continue execution]\n    J --&gt; H\n    I --&gt;|Yes| K[Auto-commit &amp; push]\n    K --&gt; L[Release lock]\n    L --&gt; M[Show file changes]\n    M --&gt; N[Send to user]\n</code></pre>"},{"location":"architecture/data-flow/#detailed-flow_1","title":"Detailed Flow","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 1. User sends task request in /agent mode                   \u2502\n\u2502    Example: \"Find all notes about AI and create summary\"    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 2. MessageProcessor routes to AgentTaskService              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 3. Acquire KB lock (same as note creation)                  \u2502\n\u2502    - Async lock                                             \u2502\n\u2502    - File lock                                              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 4. Pull latest from Git                                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 5. Parse and understand task                                \u2502\n\u2502    - Agent analyzes task                                    \u2502\n\u2502    - Plans steps                                            \u2502\n\u2502    - Selects tools                                          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 6. Agent autonomous execution loop                          \u2502\n\u2502    Iteration 1:                                             \u2502\n\u2502      - Tool: search_kb(\"AI\")                                \u2502\n\u2502      - Result: [file1.md, file2.md, ...]                   \u2502\n\u2502    Iteration 2:                                             \u2502\n\u2502      - Tool: read_file(\"file1.md\")                          \u2502\n\u2502      - Result: content...                                   \u2502\n\u2502    Iteration 3:                                             \u2502\n\u2502      - Tool: create_file(\"summary.md\", content)             \u2502\n\u2502      - Result: file created                                 \u2502\n\u2502    ...                                                       \u2502\n\u2502    Final: Task complete                                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 7. Collect file changes                                     \u2502\n\u2502    - files_created: [\"topics/summaries/ai-summary.md\"]      \u2502\n\u2502    - files_edited: [\"topics/index.md\"]                      \u2502\n\u2502    - files_deleted: []                                      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 8. Auto-commit and push                                     \u2502\n\u2502    - git add .                                              \u2502\n\u2502    - git commit -m \"Agent: Create AI summary\"               \u2502\n\u2502    - git push origin main                                   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 9. Release KB lock                                          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 10. Format detailed results                                 \u2502\n\u2502     - Task completion message                               \u2502\n\u2502     - All file changes with diffs                           \u2502\n\u2502     - GitHub links                                          \u2502\n\u2502     - Execution time                                        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 11. Send to user                                            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>User Notification:</p> <pre><code>\u2705 Task completed!\n\n\ud83d\udccb Summary of AI notes created\n\n\ud83d\udcdd Files created:\n\u2022 topics/summaries/ai-summary.md\n  +150 lines | View changes\n\n\u270f\ufe0f Files edited:\n\u2022 topics/index.md\n  +5 -2 lines | View changes\n\n\u23f1 Execution time: 15.3s\n\u2699\ufe0f Tools used: search_kb, read_file (x5), create_file\n\n[View on GitHub] [View Summary]\n</code></pre>"},{"location":"architecture/data-flow/#settings-update-flow","title":"Settings Update Flow","text":""},{"location":"architecture/data-flow/#high-level-flow_3","title":"High-Level Flow","text":"<pre><code>graph TD\n    A[User opens /settings] --&gt; B[SettingsHandlers]\n    B --&gt; C[Show categories menu]\n    C --&gt; D[User selects category]\n    D --&gt; E[Show settings in category]\n    E --&gt; F[User selects setting]\n    F --&gt; G{Setting type?}\n    G --&gt;|Boolean| H[Show toggle buttons]\n    G --&gt;|Other| I[Request new value]\n    I --&gt; J[User sends value]\n    J --&gt; K[Validate value]\n    K --&gt; L{Valid?}\n    L --&gt;|No| M[Show error]\n    L --&gt;|Yes| N[Save to overrides]\n    M --&gt; I\n    H --&gt; N\n    N --&gt; O[Confirm to user]\n</code></pre>"},{"location":"architecture/data-flow/#detailed-flow_2","title":"Detailed Flow","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 1. User sends /settings command                             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 2. SettingsHandlers.show_settings_menu()                    \u2502\n\u2502    - Load all available settings                            \u2502\n\u2502    - Group by category                                      \u2502\n\u2502    - Create inline keyboard                                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 3. User clicks category button                              \u2502\n\u2502    Example: \"\ud83d\udcda Knowledge Base\"                             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 4. SettingsHandlers.show_category_settings()                \u2502\n\u2502    - Filter settings by category                            \u2502\n\u2502    - Show current values                                    \u2502\n\u2502    - Create buttons for each setting                        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 5. User clicks setting button                               \u2502\n\u2502    Example: \"KB_GIT_AUTO_PUSH: true\"                        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 6. SettingsHandlers.show_setting_detail()                   \u2502\n\u2502    - Show setting name                                      \u2502\n\u2502    - Show description                                       \u2502\n\u2502    - Show current value                                     \u2502\n\u2502    - Show type and allowed values                           \u2502\n\u2502    - Provide action buttons                                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502                 \u2502\n            Boolean Type         Other Type\n                    \u2502                 \u2502\n                    \u25bc                 \u25bc\n        [Enable/Disable]      [Send new value]\n             buttons              (text input)\n                    \u2502                 \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                              \u2502\n                              \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 7. UserSettingsManager.update_setting()                     \u2502\n\u2502    - Validate new value                                     \u2502\n\u2502    - Type conversion                                        \u2502\n\u2502    - Range checking                                         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 8. Save to data/user_settings_overrides.json                \u2502\n\u2502    {                                                         \u2502\n\u2502      \"123\": {                                               \u2502\n\u2502        \"KB_GIT_AUTO_PUSH\": false,                           \u2502\n\u2502        \"AGENT_TIMEOUT\": 600                                 \u2502\n\u2502      }                                                       \u2502\n\u2502    }                                                         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/data-flow/#mcp-memory-operation-flow","title":"MCP Memory Operation Flow","text":""},{"location":"architecture/data-flow/#store-memory","title":"Store Memory","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 1. Agent calls store_memory tool                            \u2502\n\u2502    store_memory(                                            \u2502\n\u2502      content=\"Important fact\",                              \u2502\n\u2502      category=\"general\",                                    \u2502\n\u2502      user_id=123                                            \u2502\n\u2502    )                                                         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 2. MCPClient sends request to MCP Hub                       \u2502\n\u2502    POST /messages/?session_id=abc123                        \u2502\n\u2502    {                                                         \u2502\n\u2502      \"method\": \"tools/call\",                                \u2502\n\u2502      \"params\": {                                            \u2502\n\u2502        \"name\": \"store_memory\",                              \u2502\n\u2502        \"arguments\": {...}                                   \u2502\n\u2502      }                                                       \u2502\n\u2502    }                                                         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 3. MCP Hub routes to memory tool                            \u2502\n\u2502    - Extracts user_id                                       \u2502\n\u2502    - Gets user's memory storage instance                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 4. MemoryStorage.store()                                    \u2502\n\u2502    - Generate memory ID                                     \u2502\n\u2502    - Add timestamp                                          \u2502\n\u2502    - Save to user's storage                                 \u2502\n\u2502      data/memory/user_123/memories.json                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 5. Return success response                                  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/data-flow/#retrieve-memory","title":"Retrieve Memory","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 1. Agent calls retrieve_memory tool                         \u2502\n\u2502    retrieve_memory(                                         \u2502\n\u2502      query=\"facts about AI\",                                \u2502\n\u2502      user_id=123,                                           \u2502\n\u2502      category=\"general\"                                     \u2502\n\u2502    )                                                         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 2. MCP Hub routes to memory tool                            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 3. MemoryStorage.retrieve()                                 \u2502\n\u2502    - Load user's memories                                   \u2502\n\u2502    - Filter by category (if specified)                      \u2502\n\u2502    - Search/rank by query relevance                         \u2502\n\u2502    - Return top results                                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 4. Return memory results                                    \u2502\n\u2502    [                                                         \u2502\n\u2502      {                                                       \u2502\n\u2502        \"id\": \"mem_123\",                                     \u2502\n\u2502        \"content\": \"Neural networks are...\",                 \u2502\n\u2502        \"category\": \"general\",                               \u2502\n\u2502        \"timestamp\": 1634567890                              \u2502\n\u2502      }                                                       \u2502\n\u2502    ]                                                         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/data-flow/#concurrency-and-synchronization","title":"Concurrency and Synchronization","text":""},{"location":"architecture/data-flow/#multi-user-concurrent-requests","title":"Multi-User Concurrent Requests","text":"<pre><code>sequenceDiagram\n    participant U1 as User 1\n    participant U2 as User 2\n    participant S as Service\n    participant L as KBSyncManager\n    participant KB as Knowledge Base\n\n    U1-&gt;&gt;S: Create note\n    S-&gt;&gt;L: Acquire lock (User 1)\n    L--&gt;&gt;S: Lock acquired\n\n    U2-&gt;&gt;S: Create note\n    S-&gt;&gt;L: Acquire lock (User 2)\n    Note over L: User 2 waits...\n\n    S-&gt;&gt;KB: Process (User 1)\n    KB--&gt;&gt;S: Done\n    S-&gt;&gt;L: Release lock (User 1)\n\n    L--&gt;&gt;S: Lock acquired (User 2)\n    S-&gt;&gt;KB: Process (User 2)\n    KB--&gt;&gt;S: Done\n    S-&gt;&gt;L: Release lock (User 2)\n</code></pre>"},{"location":"architecture/data-flow/#error-propagation","title":"Error Propagation","text":""},{"location":"architecture/data-flow/#error-flow","title":"Error Flow","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Component raises exception                                   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Service catches exception                                    \u2502\n\u2502  try:                                                        \u2502\n\u2502    result = await agent.process(...)                        \u2502\n\u2502  except AgentTimeoutError:                                  \u2502\n\u2502    # Handle timeout                                         \u2502\n\u2502  except AgentAPIError:                                      \u2502\n\u2502    # Handle API error                                       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Log error details                                           \u2502\n\u2502  logger.error(f\"Agent error: {e}\", exc_info=True)           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Release resources (locks, connections)                       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Notify user with friendly message                           \u2502\n\u2502  bot.send_message(\"\u274c An error occurred. Please try again\") \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/data-flow/#performance-optimization-points","title":"Performance Optimization Points","text":""},{"location":"architecture/data-flow/#caching","title":"Caching","text":"<ul> <li>Agent instances: Cached per user (avoid re-initialization)</li> <li>MCP connections: Connection pooling</li> <li>Settings: In-memory cache with file watching</li> <li>KB structure: Cached directory tree</li> </ul>"},{"location":"architecture/data-flow/#async-operations","title":"Async Operations","text":"<ul> <li>Message aggregation: Non-blocking timers</li> <li>File I/O: Async file operations</li> <li>API calls: Concurrent requests where possible</li> <li>Git operations: Async subprocess execution</li> </ul>"},{"location":"architecture/data-flow/#rate-limiting","title":"Rate Limiting","text":"<ul> <li>Per-user limits: Prevent API abuse</li> <li>Graceful degradation: Queue requests if needed</li> <li>Exponential backoff: Retry with increasing delays</li> </ul>"},{"location":"architecture/data-flow/#related-documentation","title":"Related Documentation","text":"<ul> <li>Architecture Overview - System-wide architecture</li> <li>Agent Architecture - Agent system details</li> <li>MCP Architecture - MCP layer</li> <li>KB Synchronization - Multi-user sync</li> <li>Service Refactoring - Service layer patterns</li> </ul>"},{"location":"architecture/kb-synchronization/","title":"KB Synchronization Architecture","text":"<p>This document describes the synchronization mechanism for knowledge base operations when multiple users work with the same KB.</p>"},{"location":"architecture/kb-synchronization/#problem-statement","title":"Problem Statement","text":"<p>When multiple users work with the same knowledge base (shared GitHub repository):</p> <ol> <li>Concurrent modifications can lead to merge conflicts</li> <li>Race conditions may cause lost updates</li> <li>Git conflicts are difficult to resolve automatically</li> <li>Data consistency must be maintained</li> </ol>"},{"location":"architecture/kb-synchronization/#solution-operation-serialization-git-pull","title":"Solution: Operation Serialization + Git Pull","text":""},{"location":"architecture/kb-synchronization/#core-components","title":"Core Components","text":""},{"location":"architecture/kb-synchronization/#1-kbsyncmanager","title":"1. KBSyncManager","text":"<p>Location: <code>src/knowledge_base/sync_manager.py</code></p> <p>Purpose: Serialize KB operations to prevent conflicts</p> <p>Features: - File-based locks (cross-process synchronization) - Async locks (in-process synchronization) - Per-KB locking (different KBs can be accessed in parallel) - Singleton pattern for global coordination</p> <p>Usage: <pre><code>from src.knowledge_base.sync_manager import get_sync_manager\n\nsync_manager = get_sync_manager()\n\nasync with sync_manager.with_kb_lock(kb_path, \"operation_name\"):\n    # Your KB operations here (create, update, delete)\n    # Only one user can execute this block at a time for this KB\n    pass\n</code></pre></p>"},{"location":"architecture/kb-synchronization/#2-gitoperationspull","title":"2. GitOperations.pull()","text":"<p>Location: <code>src/knowledge_base/git_ops.py</code></p> <p>Purpose: Pull latest changes before KB operations</p> <p>Features: - Checks for uncommitted changes - Validates remote configuration - Detects merge conflicts - Returns success status and message</p> <p>Usage: <pre><code>git_ops = GitOperations(kb_path, enabled=True)\nsuccess, message = git_ops.pull(remote=\"origin\", branch=\"main\")\n\nif not success:\n    # Handle error (conflicts, network issues, etc.)\n    print(f\"Pull failed: {message}\")\n</code></pre></p>"},{"location":"architecture/kb-synchronization/#3-basekbservice-common-functionality","title":"3. BaseKBService (Common Functionality)","text":"<p>Location: <code>src/services/base_kb_service.py</code></p> <p>Purpose: Base class that consolidates common functionality for KB-related services</p> <p>Responsibilities: - Git operations setup and management - Agent working directory configuration - Rate limiting enforcement - Auto-commit and push operations - GitHub URL generation for file links - File change formatting for user notifications - Links/relations filtering and display - Safe message editing with timeout handling</p> <p>Key Methods: - <code>_setup_git_ops()</code>: Initialize Git operations with user credentials - <code>_get_agent_working_dir()</code>: Determine agent working directory based on KB_TOPICS_ONLY setting - <code>_configure_agent_working_dir()</code>: Set agent working directory - <code>_check_rate_limit()</code>: Enforce rate limits before agent API calls - <code>_auto_commit_and_push()</code>: Commit and push changes to remote - <code>_get_github_base_url()</code>: Generate GitHub URLs for file links - <code>_format_file_changes()</code>: Format file changes for notifications - <code>_filter_and_format_links()</code>: Filter and format link relations - <code>_safe_edit_message()</code>: Safely edit messages with timeout handling</p>"},{"location":"architecture/kb-synchronization/#4-notecreationservice-integration","title":"4. NoteCreationService Integration","text":"<p>Location: <code>src/services/note_creation_service.py</code></p> <p>Inherits from: <code>BaseKBService</code>, <code>INoteCreationService</code></p> <p>Flow (Note mode - <code>/note</code>): <pre><code>1. User sends message\n2. Acquire KB lock (wait if another user is working)\n3. Pull latest changes from GitHub (using base class Git operations)\n4. Process message with agent (with rate limiting from base class)\n5. Save note to KB\n6. Commit and push changes (using base class auto-commit)\n7. Release KB lock\n</code></pre></p>"},{"location":"architecture/kb-synchronization/#5-agenttaskservice-integration","title":"5. AgentTaskService Integration","text":"<p>Location: <code>src/services/agent_task_service.py</code></p> <p>Inherits from: <code>BaseKBService</code>, <code>IAgentTaskService</code></p> <p>Flow (Agent mode - <code>/agent</code>): <pre><code>1. User sends task request\n2. Acquire KB lock (wait if another user is working)\n3. Parse task and prepare context\n4. Execute task with agent (may read/write KB files, with rate limiting)\n5. Auto-commit and push changes (using base class auto-commit)\n6. Return results to user\n7. Release KB lock\n</code></pre></p> <p>Note: Both services inherit from <code>BaseKBService</code> to minimize code duplication and share common functionality while maintaining their specific responsibilities. This follows the DRY (Don't Repeat Yourself) principle and Single Responsibility Principle.</p>"},{"location":"architecture/kb-synchronization/#synchronization-flow","title":"Synchronization Flow","text":""},{"location":"architecture/kb-synchronization/#single-user-scenario","title":"Single User Scenario","text":"<pre><code>sequenceDiagram\n    participant U as User\n    participant S as NoteService\n    participant L as KBSyncManager\n    participant G as GitOps\n    participant GH as GitHub\n\n    U-&gt;&gt;S: Create note\n    S-&gt;&gt;L: Acquire lock\n    L--&gt;&gt;S: Lock acquired\n    S-&gt;&gt;G: Pull latest\n    G-&gt;&gt;GH: git pull\n    GH--&gt;&gt;G: Up to date\n    S-&gt;&gt;S: Process &amp; save\n    S-&gt;&gt;G: Commit &amp; push\n    G-&gt;&gt;GH: git push\n    S-&gt;&gt;L: Release lock\n    L--&gt;&gt;S: Lock released\n    S--&gt;&gt;U: Success\n</code></pre>"},{"location":"architecture/kb-synchronization/#multi-user-scenario","title":"Multi-User Scenario","text":"<pre><code>sequenceDiagram\n    participant U1 as User 1\n    participant U2 as User 2\n    participant S as NoteService\n    participant L as KBSyncManager\n    participant G as GitOps\n    participant GH as GitHub\n\n    U1-&gt;&gt;S: Create note\n    S-&gt;&gt;L: Acquire lock (User 1)\n    L--&gt;&gt;S: Lock acquired\n\n    U2-&gt;&gt;S: Create note\n    S-&gt;&gt;L: Acquire lock (User 2)\n    Note over L: User 2 waits...\n\n    S-&gt;&gt;G: Pull latest (User 1)\n    G-&gt;&gt;GH: git pull\n    S-&gt;&gt;S: Process &amp; save (User 1)\n    S-&gt;&gt;G: Commit &amp; push (User 1)\n    G-&gt;&gt;GH: git push\n    S-&gt;&gt;L: Release lock (User 1)\n\n    L--&gt;&gt;S: Lock acquired (User 2)\n    S-&gt;&gt;G: Pull latest (User 2)\n    G-&gt;&gt;GH: git pull\n    Note over G,GH: Gets User 1's changes\n    S-&gt;&gt;S: Process &amp; save (User 2)\n    S-&gt;&gt;G: Commit &amp; push (User 2)\n    G-&gt;&gt;GH: git push\n    S-&gt;&gt;L: Release lock (User 2)\n</code></pre>"},{"location":"architecture/kb-synchronization/#lock-types","title":"Lock Types","text":""},{"location":"architecture/kb-synchronization/#file-lock-filelock","title":"File Lock (FileLock)","text":"<p>Purpose: Cross-process synchronization</p> <p>Location: <code>.kb_operations.lock</code> in KB directory</p> <p>Characteristics: - Works across different Python processes - Works across different machines (if KB is on shared filesystem) - Timeout: 300 seconds (5 minutes) - Automatically released on exception</p>"},{"location":"architecture/kb-synchronization/#async-lock-asynciolock","title":"Async Lock (asyncio.Lock)","text":"<p>Purpose: In-process synchronization</p> <p>Characteristics: - Works within same Python process - Prevents race conditions in async code - No timeout (relies on file lock timeout) - Acquired before file lock</p>"},{"location":"architecture/kb-synchronization/#lock-hierarchy","title":"Lock Hierarchy","text":"<pre><code>Acquire Async Lock\n    \u2193\nAcquire File Lock\n    \u2193\nPerform KB Operations\n    \u2193\nRelease File Lock\n    \u2193\nRelease Async Lock\n</code></pre> <p>Why both? - Async lock: Fast, prevents issues in same process - File lock: Slower, but works across processes/machines</p>"},{"location":"architecture/kb-synchronization/#error-handling","title":"Error Handling","text":""},{"location":"architecture/kb-synchronization/#git-pull-failures","title":"Git Pull Failures","text":"<p>Uncommitted changes: <pre><code>Error: \"Repository has uncommitted changes\"\nAction: User must commit or stash manually\n</code></pre></p> <p>Merge conflicts: <pre><code>Error: \"Merge conflict during pull\"\nAction: User must resolve conflicts manually\n</code></pre></p> <p>No remote configured: <pre><code>Error: \"Remote 'origin' not found\"\nAction: Configure remote or work locally\n</code></pre></p> <p>Remote branch doesn't exist: <pre><code>Warning: \"Remote branch 'branch_name' doesn't exist on origin\"\nAction: Automatically creates branch locally and pushes to remote\n</code></pre></p> <p>Authentication errors: <pre><code>Error: \"Failed to push (authentication error): could not read Username\"\nAction: Configure git credentials or switch to SSH\nAutomatic solution: Set GITHUB_USERNAME and GITHUB_TOKEN in .env file\nManual solutions:\n  1. Use SSH instead of HTTPS: git remote set-url origin git@github.com:user/repo.git\n  2. Configure git credential helper: git config credential.helper store\n  3. Use a personal access token: https://github.com/settings/tokens\n</code></pre></p> <p>Automatic HTTPS Authentication:</p> <p>The system automatically configures HTTPS authentication if credentials are provided in environment variables:</p> <pre><code># .env file\nGITHUB_USERNAME=your_github_username\nGITHUB_TOKEN=ghp_your_personal_access_token\n</code></pre> <p>When <code>GitOperations</code> is initialized with these credentials: - It automatically updates HTTPS remote URLs to include authentication - Only GitHub HTTPS remotes without existing credentials are modified - SSH remotes remain unchanged - This enables push operations without manual credential configuration - Configuration is idempotent (safe to call multiple times) - If configuration fails for one remote, other remotes are still processed</p> <p>Security safeguards: - Files outside the repository cannot be added to git (prevents path traversal) - Branch switching requires successful stashing of uncommitted changes (prevents data loss) - Detached HEAD state is detected and prevents dangerous operations - All file paths are validated and resolved before git operations</p>"},{"location":"architecture/kb-synchronization/#lock-timeout","title":"Lock Timeout","text":"<p>If a user's operation takes &gt; 5 minutes: - Lock automatically released - Warning logged - Next user can proceed</p>"},{"location":"architecture/kb-synchronization/#exception-handling","title":"Exception Handling","text":"<p>Locks are always released, even on exception: <pre><code>async with sync_manager.with_kb_lock(kb_path):\n    # If exception occurs here\n    raise SomeError()\n    # Locks are still released properly\n</code></pre></p>"},{"location":"architecture/kb-synchronization/#configuration","title":"Configuration","text":""},{"location":"architecture/kb-synchronization/#settings","title":"Settings","text":"<p>config.yaml: <pre><code># Enable Git operations\nKB_GIT_ENABLED: true\n\n# Auto-push after commit (recommended for multi-user)\nKB_GIT_AUTO_PUSH: true\n\n# Remote and branch\nKB_GIT_REMOTE: origin\nKB_GIT_BRANCH: main\n</code></pre></p> <p>.env file (for HTTPS authentication): <pre><code># GitHub credentials for automatic HTTPS authentication\nGITHUB_USERNAME=your_github_username\nGITHUB_TOKEN=ghp_your_personal_access_token\n</code></pre></p> <p>How to get GitHub token: 1. Go to https://github.com/settings/tokens 2. Click \"Generate new token\" \u2192 \"Generate new token (classic)\" 3. Set expiration and select scopes: <code>repo</code> (full control of private repositories) 4. Copy token and add to <code>.env</code> file</p>"},{"location":"architecture/kb-synchronization/#lock-timeout_1","title":"Lock Timeout","text":"<p>Modify in <code>sync_manager.py</code>: <pre><code>FileLock(str(lock_file), timeout=300)  # 5 minutes\n</code></pre></p>"},{"location":"architecture/kb-synchronization/#best-practices","title":"Best Practices","text":""},{"location":"architecture/kb-synchronization/#for-users","title":"For Users","text":"<ol> <li>Enable auto-push: Ensures changes are immediately available to others</li> <li>Keep notes focused: Shorter operations = less waiting</li> <li>Monitor for errors: Check for pull/push failures</li> </ol>"},{"location":"architecture/kb-synchronization/#for-developers","title":"For Developers","text":"<ol> <li>Always use sync manager: Never modify KB without lock</li> <li>Pull before operations: Ensures latest version</li> <li>Handle pull errors: Don't proceed if pull fails</li> <li>Keep operations atomic: Complete entire operation within lock</li> <li>Log lock events: Track who's waiting and why</li> </ol>"},{"location":"architecture/kb-synchronization/#for-system-administrators","title":"For System Administrators","text":"<ol> <li>Monitor lock files: Check for stale locks</li> <li>Set reasonable timeouts: Balance between patience and responsiveness</li> <li>Use separate KBs: For independent teams/projects</li> <li>Regular backups: Even with synchronization, backups are essential</li> </ol>"},{"location":"architecture/kb-synchronization/#performance-considerations","title":"Performance Considerations","text":""},{"location":"architecture/kb-synchronization/#lock-contention","title":"Lock Contention","text":"<ul> <li>Low contention (few users): Negligible impact</li> <li>High contention (many users): Users may wait</li> <li>Solution: Use separate KBs per team/project</li> </ul>"},{"location":"architecture/kb-synchronization/#network-latency","title":"Network Latency","text":"<ul> <li>Pull/push operations: Depend on network speed</li> <li>Lock waiting: Not affected by network</li> <li>Solution: Use faster network or local-first workflow</li> </ul>"},{"location":"architecture/kb-synchronization/#lock-file-io","title":"Lock File I/O","text":"<ul> <li>File lock overhead: ~10-50ms</li> <li>Async lock overhead: ~1ms</li> <li>Total overhead: &lt; 100ms per operation</li> </ul>"},{"location":"architecture/kb-synchronization/#testing","title":"Testing","text":""},{"location":"architecture/kb-synchronization/#unit-tests","title":"Unit Tests","text":"<ul> <li><code>tests/test_kb_sync_manager.py</code>: Sync manager tests</li> <li><code>tests/test_agent_task_service_kb_lock.py</code>: Agent mode KB locking tests</li> <li><code>tests/test_git_ops.py</code>: Git operations tests</li> </ul>"},{"location":"architecture/kb-synchronization/#integration-tests","title":"Integration Tests","text":"<p>Simulate multi-user scenarios: <pre><code>async def test_concurrent_users():\n    # Create two users\n    # Both try to create notes simultaneously\n    # Verify operations are serialized\n    # Verify both notes are saved\n</code></pre></p> <p>Agent Mode Locking Tests: <pre><code>async def test_agent_tasks_serialized_for_same_kb():\n    # Create two users with agent mode\n    # Both try to execute tasks simultaneously on same KB\n    # Verify operations are serialized\n    # Verify both tasks complete successfully\n</code></pre></p>"},{"location":"architecture/kb-synchronization/#future-improvements","title":"Future Improvements","text":"<ol> <li>Optimistic locking: Allow concurrent reads</li> <li>Lock queue visibility: Show users their position in queue</li> <li>Automatic conflict resolution: Smart merge for simple conflicts</li> <li>Lock analytics: Track wait times and contention</li> <li>Distributed locks: Support for multi-server deployments</li> </ol>"},{"location":"architecture/kb-synchronization/#related-documentation","title":"Related Documentation","text":"<ul> <li>Knowledge Base Setup</li> <li>Git Operations</li> <li>Data Flow</li> </ul>"},{"location":"architecture/mcp-architecture/","title":"MCP Architecture","text":""},{"location":"architecture/mcp-architecture/#overview","title":"Overview","text":"<p>The MCP (Model Context Protocol) layer in tg-note follows a clean separation of concerns between the MCP Hub Service and the Bot Client.</p>"},{"location":"architecture/mcp-architecture/#core-principles","title":"Core Principles","text":"<ol> <li>Single Source of Truth: MCP Hub service owns ALL MCP-related logic</li> <li>Pure Client Pattern: Bot is a pure client that connects to MCP Hub</li> <li>No Config Duplication: Only MCP Hub creates configuration files</li> <li>Mode-Agnostic Bot: Bot behavior is the same in Docker and standalone modes</li> </ol>"},{"location":"architecture/mcp-architecture/#architecture-diagram","title":"Architecture Diagram","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                         Bot Service                              \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u2502\n\u2502  \u2502         MCPServerManager (Subprocess Manager)          \u2502     \u2502\n\u2502  \u2502                                                        \u2502     \u2502\n\u2502  \u2502  - Docker Mode: Does nothing (pure client)            \u2502     \u2502\n\u2502  \u2502  - Standalone Mode: Launches MCP Hub subprocess       \u2502     \u2502\n\u2502  \u2502                                                        \u2502     \u2502\n\u2502  \u2502  NOT responsible for:                                 \u2502     \u2502\n\u2502  \u2502    \u2717 Config generation                                \u2502     \u2502\n\u2502  \u2502    \u2717 MCP tool registration                            \u2502     \u2502\n\u2502  \u2502    \u2717 Server registry management                       \u2502     \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2502\n\u2502                            \u2502                                     \u2502\n\u2502                            \u2502 HTTP/SSE                            \u2502\n\u2502                            \u25bc                                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    MCP Hub Service                               \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u2502\n\u2502  \u2502           Unified MCP Gateway                          \u2502     \u2502\n\u2502  \u2502                                                        \u2502     \u2502\n\u2502  \u2502  \u2713 Built-in MCP Tools (memory, etc.)                 \u2502     \u2502\n\u2502  \u2502  \u2713 MCP Server Registry                                \u2502     \u2502\n\u2502  \u2502  \u2713 Configuration Generation                           \u2502     \u2502\n\u2502  \u2502  \u2713 HTTP/SSE API                                       \u2502     \u2502\n\u2502  \u2502  \u2713 Per-user isolation                                 \u2502     \u2502\n\u2502  \u2502                                                        \u2502     \u2502\n\u2502  \u2502  Endpoints:                                            \u2502     \u2502\n\u2502  \u2502    - /health (includes builtin tools &amp; servers)       \u2502     \u2502\n\u2502  \u2502    - /sse (MCP protocol)                              \u2502     \u2502\n\u2502  \u2502    - /registry/servers (CRUD)                         \u2502     \u2502\n\u2502  \u2502    - /config/client/{type} (config generation)        \u2502     \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/mcp-architecture/#deployment-modes","title":"Deployment Modes","text":""},{"location":"architecture/mcp-architecture/#docker-mode","title":"Docker Mode","text":"<pre><code># docker-compose.yml\nservices:\n  mcp-hub:\n    # MCP Hub runs as standalone service\n    # Generates configs on startup\n    # Owns all MCP logic\n\n  bot:\n    # Bot is pure client\n    # Connects via MCP_HUB_URL\n    # No subprocess, no config generation\n    environment:\n      - MCP_HUB_URL=http://mcp-hub:8765/sse\n</code></pre> <p>Flow: 1. MCP Hub container starts 2. MCP Hub generates client configs (<code>~/.qwen/settings.json</code>) 3. Bot container starts 4. Bot connects to MCP Hub via <code>MCP_HUB_URL</code> 5. Bot uses MCP tools through HTTP/SSE</p>"},{"location":"architecture/mcp-architecture/#standalone-mode","title":"Standalone Mode","text":"<pre><code># Bot launches MCP Hub as subprocess\npython -m main\n</code></pre> <p>Flow: 1. Bot starts 2. Bot detects no <code>MCP_HUB_URL</code> (standalone mode) 3. Bot launches MCP Hub as subprocess 4. MCP Hub subprocess generates client configs 5. Bot connects to MCP Hub at <code>http://127.0.0.1:8765/sse</code> 6. Bot uses MCP tools through HTTP/SSE</p>"},{"location":"architecture/mcp-architecture/#responsibilities","title":"Responsibilities","text":""},{"location":"architecture/mcp-architecture/#mcp-hub-service-srcmcpmcp_hub_serverpy","title":"MCP Hub Service (<code>src/mcp/mcp_hub_server.py</code>)","text":"<p>Owns: - \u2705 Built-in MCP tools (memory, etc.) - \u2705 MCP server registry - \u2705 Configuration file generation - \u2705 HTTP/SSE API endpoints - \u2705 Per-user storage isolation</p> <p>On Startup: 1. Initialize FastMCP server 2. Register built-in tools 3. Initialize registry from <code>data/mcp_servers/*.json</code> 4. Generate client configurations:    - <code>~/.qwen/settings.json</code> (Qwen CLI)    - <code>data/mcp_servers/mcp-hub.json</code> (standalone mode only) 5. Start HTTP/SSE server</p> <p>Configuration Generation: <pre><code># Automatic on startup\npython -m src.mcp.mcp_hub_server\n\n# Skip config generation\npython -m src.mcp.mcp_hub_server --skip-config-gen\n</code></pre></p>"},{"location":"architecture/mcp-architecture/#bot-srcmcpserver_managerpy","title":"Bot (<code>src/mcp/server_manager.py</code>)","text":"<p>MCPServerManager Responsibilities: - \u2705 Subprocess lifecycle (standalone mode only) - \u2705 Health monitoring - \u2705 Start/stop subprocess</p> <p>Does NOT: - \u274c Create configuration files - \u274c Register MCP tools - \u274c Manage MCP server registry</p> <p>Code: <pre><code>class MCPServerManager:\n    \"\"\"\n    Subprocess Lifecycle Manager (Standalone Mode Only)\n\n    Docker mode: Does nothing (bot is pure client)\n    Standalone mode: Launches MCP Hub subprocess\n    \"\"\"\n\n    def setup_default_servers(self):\n        mcp_hub_url = os.getenv(\"MCP_HUB_URL\")\n\n        if mcp_hub_url:\n            # Docker mode: pure client, no action needed\n            logger.info(f\"Docker mode: connecting to {mcp_hub_url}\")\n        else:\n            # Standalone mode: launch subprocess\n            self._setup_memory_subprocess()\n</code></pre></p>"},{"location":"architecture/mcp-architecture/#health-check-endpoint","title":"Health Check Endpoint","text":"<p>The <code>/health</code> endpoint provides comprehensive information about the MCP Hub state:</p> <pre><code>curl http://localhost:8765/health\n</code></pre> <p>Response: <pre><code>{\n  \"status\": \"ok\",\n  \"service\": \"mcp-hub\",\n  \"version\": \"1.0.0\",\n  \"builtin_tools\": {\n    \"total\": 3,\n    \"names\": [\n      \"store_memory\",\n      \"retrieve_memory\",\n      \"list_categories\"\n    ]\n  },\n  \"registry\": {\n    \"servers_total\": 0,\n    \"servers_enabled\": 0\n  },\n  \"storage\": {\n    \"active_users\": 0\n  },\n  \"ready\": true\n}\n</code></pre></p> <p>Fields: - <code>builtin_tools</code> - MCP tools provided by the hub itself (always available) - <code>registry.servers_total</code> - External MCP servers registered (user-added servers) - <code>registry.servers_enabled</code> - Number of enabled external servers - <code>storage.active_users</code> - Number of users with active storage sessions</p>"},{"location":"architecture/mcp-architecture/#configuration-files","title":"Configuration Files","text":""},{"location":"architecture/mcp-architecture/#who-creates-what","title":"Who Creates What","text":"File Created By When Mode <code>~/.qwen/settings.json</code> MCP Hub On startup Both <code>data/mcp_servers/mcp-hub.json</code> MCP Hub On startup Standalone only <code>data/mcp_servers/*.json</code> User/Admin Manual Both"},{"location":"architecture/mcp-architecture/#configuration-api","title":"Configuration API","text":"<p>MCP Hub provides a dynamic configuration API:</p> <pre><code># Get standard config (Cursor, Claude Desktop, Qwen CLI)\ncurl http://localhost:8765/config/client/standard\n\n# Get LM Studio config\ncurl http://localhost:8765/config/client/lmstudio\n\n# Download as file\ncurl http://localhost:8765/config/client/standard?format=raw \\\n  -o mcp-hub.json\n</code></pre>"},{"location":"architecture/mcp-architecture/#migration-notes","title":"Migration Notes","text":""},{"location":"architecture/mcp-architecture/#what-changed","title":"What Changed","text":"<p>Before (\u274c Wrong): - Bot created configs in both modes - <code>MCPServerManager._create_qwen_config()</code> ran in Docker mode - Config generation logic scattered across bot codebase - Duplication between bot and MCP Hub</p> <p>After (\u2705 Correct): - MCP Hub owns ALL config generation - Bot is pure client (no config creation) - Single source of truth for MCP logic - Clear separation of concerns</p>"},{"location":"architecture/mcp-architecture/#migration-checklist","title":"Migration Checklist","text":"<ul> <li> Remove <code>_create_qwen_config()</code> from <code>MCPServerManager</code></li> <li> Remove <code>_setup_mcp_hub_connection()</code> from <code>MCPServerManager</code></li> <li> Remove config creation from <code>_setup_memory_subprocess()</code></li> <li> Add config generation to MCP Hub startup</li> <li> Add <code>/config/client/{type}</code> API endpoint</li> <li> Update <code>MCPServerManager</code> docstring</li> <li> Update <code>setup_default_servers()</code> logic</li> </ul>"},{"location":"architecture/mcp-architecture/#testing","title":"Testing","text":""},{"location":"architecture/mcp-architecture/#docker-mode-test","title":"Docker Mode Test","text":"<pre><code># Start services\ndocker-compose up\n\n# Check MCP Hub health\ncurl http://localhost:8765/health\n\n# Verify no configs created by bot\n# (only by MCP Hub service)\n</code></pre>"},{"location":"architecture/mcp-architecture/#standalone-mode-test","title":"Standalone Mode Test","text":"<pre><code># Start bot\npython -m main\n\n# Verify MCP Hub subprocess started\nps aux | grep mcp_hub_server\n\n# Verify configs created by MCP Hub\nls -la ~/.qwen/settings.json\nls -la data/mcp_servers/mcp-hub.json\n</code></pre>"},{"location":"architecture/mcp-architecture/#config-generation-test","title":"Config Generation Test","text":"<pre><code># Test dynamic config API\ncurl http://localhost:8765/config/client/standard | jq\n\n# Expected output:\n{\n  \"success\": true,\n  \"client_type\": \"standard\",\n  \"config\": {\n    \"mcpServers\": {\n      \"mcp-hub\": {\n        \"url\": \"http://127.0.0.1:8765/sse\",\n        ...\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"architecture/mcp-architecture/#best-practices","title":"Best Practices","text":""},{"location":"architecture/mcp-architecture/#for-developers","title":"For Developers","text":"<ol> <li>Never create configs in bot code</li> <li>All config generation belongs in MCP Hub</li> <li> <p>Bot is a pure client</p> </li> <li> <p>Use environment detection correctly <pre><code>mcp_hub_url = os.getenv(\"MCP_HUB_URL\")\nif mcp_hub_url:\n    # Docker mode\nelse:\n    # Standalone mode\n</code></pre></p> </li> <li> <p>Add new MCP features in MCP Hub</p> </li> <li>New tools \u2192 Add to <code>mcp_hub_server.py</code></li> <li>New configs \u2192 Add to <code>_generate_client_configs()</code></li> <li>New registry features \u2192 Add to registry module</li> </ol>"},{"location":"architecture/mcp-architecture/#for-devops","title":"For DevOps","text":"<ol> <li>Docker deployments</li> <li>Set <code>MCP_HUB_URL</code> environment variable</li> <li> <p>Bot will automatically be pure client</p> </li> <li> <p>Standalone deployments</p> </li> <li>Don't set <code>MCP_HUB_URL</code></li> <li> <p>Bot will launch MCP Hub subprocess</p> </li> <li> <p>Configuration management</p> </li> <li>Configs are generated on MCP Hub startup</li> <li>To regenerate: restart MCP Hub service</li> </ol>"},{"location":"architecture/mcp-architecture/#troubleshooting","title":"Troubleshooting","text":""},{"location":"architecture/mcp-architecture/#issue-logs-show-config-generation-in-docker-mode","title":"Issue: Logs show config generation in Docker mode","text":"<p>Symptom: <pre><code>[MCPServerManager] Creating MCP configurations for various clients...\n[MCPServerManager] Creating Qwen CLI config (HTTP/SSE mode)\n</code></pre></p> <p>Cause: Old code running (pre-refactor)</p> <p>Solution: 1. Verify you're on latest code 2. Check <code>MCPServerManager.setup_default_servers()</code> doesn't call <code>_create_qwen_config()</code> 3. Rebuild Docker images</p>"},{"location":"architecture/mcp-architecture/#issue-mcp-hub-not-creating-configs","title":"Issue: MCP Hub not creating configs","text":"<p>Symptom: <code>~/.qwen/settings.json</code> doesn't exist</p> <p>Possible causes: 1. MCP Hub started with <code>--skip-config-gen</code> flag 2. Config generation failed (check logs) 3. Permission issues with home directory</p> <p>Solution: <pre><code># Check MCP Hub logs\ndocker logs mcp-hub | grep \"Generating client configurations\"\n\n# Manually trigger config generation via API\ncurl http://localhost:8765/config/client/standard\n</code></pre></p>"},{"location":"architecture/mcp-architecture/#fastmcp-sse-protocol","title":"FastMCP SSE Protocol","text":"<p>The MCP Hub uses FastMCP library which implements the MCP protocol over HTTP Server-Sent Events (SSE). Understanding this protocol is crucial for proper client implementation.</p>"},{"location":"architecture/mcp-architecture/#connection-flow","title":"Connection Flow","text":"<p>Correct Connection Sequence:</p> <ol> <li> <p>Establish SSE Connection (GET request)    <pre><code>GET /sse/ HTTP/1.1\nHost: mcp-hub:8765\nAccept: text/event-stream\n</code></pre></p> </li> <li> <p>Receive Session ID (SSE event)    <pre><code>event: endpoint\ndata: {\"uri\": \"http://mcp-hub:8765/messages/?session_id=abc123\"}\n</code></pre></p> </li> <li> <p>Send JSON-RPC Requests (POST with session_id)    <pre><code>POST /messages/?session_id=abc123 HTTP/1.1\nContent-Type: application/json\n\n{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"initialize\", \"params\": {...}}\n</code></pre></p> </li> </ol>"},{"location":"architecture/mcp-architecture/#common-connection-errors","title":"Common Connection Errors","text":""},{"location":"architecture/mcp-architecture/#error-307-temporary-redirect","title":"Error: 307 Temporary Redirect","text":"<p>Symptom: <pre><code>INFO: 172.24.0.3:51288 - \"POST /sse HTTP/1.1\" 307 Temporary Redirect\nINFO: 172.24.0.3:51288 - \"POST /sse/ HTTP/1.1\" 405 Method Not Allowed\n</code></pre></p> <p>Cause: Missing trailing slash in URL</p> <p>Solution: Always use trailing slashes for FastMCP endpoints: - \u2705 <code>http://mcp-hub:8765/sse/</code> - \u2705 <code>http://mcp-hub:8765/messages/</code> - \u274c <code>http://mcp-hub:8765/sse</code> - \u274c <code>http://mcp-hub:8765/messages</code></p>"},{"location":"architecture/mcp-architecture/#error-400-bad-request-received-request-without-session_id","title":"Error: 400 Bad Request - \"Received request without session_id\"","text":"<p>Symptom: <pre><code>INFO: 172.24.0.3:51288 - \"POST /messages/ HTTP/1.1\" 400 Bad Request\nReceived request without session_id\n</code></pre></p> <p>Cause: Client didn't establish SSE connection first or didn't include session_id in POST requests</p> <p>Solution: Follow the correct connection flow: 1. GET <code>/sse/</code> to establish connection 2. Parse SSE events to extract <code>session_id</code> 3. Include <code>session_id</code> as query parameter in all POST requests</p>"},{"location":"architecture/mcp-architecture/#client-implementation","title":"Client Implementation","text":"<p>The <code>MCPClient</code> class in <code>src/mcp/client.py</code> implements the FastMCP SSE protocol correctly:</p> <p>Key Components:</p> <ol> <li>Session Establishment (<code>_connect_sse()</code>):</li> <li>Opens GET connection to <code>/sse/</code></li> <li>Parses SSE events to extract <code>session_id</code></li> <li>Stores <code>session_id</code> for future requests</li> <li> <p>Derives JSON-RPC endpoint URL (<code>/messages/</code>)</p> </li> <li> <p>Request Sending (<code>_send_request_http()</code>):</p> </li> <li>Adds <code>session_id</code> as query parameter</li> <li>POSTs to <code>/messages/?session_id=&lt;id&gt;</code></li> <li> <p>Accepts both 200 OK and 202 Accepted status codes</p> </li> <li> <p>URL Normalization:</p> </li> <li>Ensures trailing slashes to avoid redirects</li> <li>Handles various URL formats automatically</li> </ol> <p>Example Usage: <pre><code>from src.mcp.client import MCPClient, MCPServerConfig\n\n# Configure SSE transport\nconfig = MCPServerConfig(\n    transport=\"sse\",\n    url=\"http://mcp-hub:8765/sse\"  # Trailing slash added automatically\n)\n\n# Connect and use\nclient = MCPClient(config)\nawait client.connect()  # Establishes SSE session\nresult = await client.call_tool(\"store_memory\", {...})  # Uses session_id\n</code></pre></p>"},{"location":"architecture/mcp-architecture/#debugging-connection-issues","title":"Debugging Connection Issues","text":"<p>Enable Debug Logging: <pre><code>import logging\nlogging.getLogger(\"src.mcp.client\").setLevel(logging.DEBUG)\n</code></pre></p> <p>Check Server Logs: <pre><code># Docker mode\ndocker logs mcp-hub | grep -E \"sse|messages|session\"\n\n# Standalone mode\ntail -f logs/mcp_hub.log | grep -E \"sse|messages|session\"\n</code></pre></p> <p>Expected Successful Flow: <pre><code>[MCPClient] Connecting to MCP server (SSE): http://mcp-hub:8765/sse\n[MCPClient] Opening SSE connection to http://mcp-hub:8765/sse/\n[MCPClient] SSE event: endpoint\n[MCPClient] SSE endpoint data: {'uri': '...?session_id=abc123'}\n[MCPClient] \u2713 SSE session established: abc123\n[MCPClient] Using RPC endpoint: http://mcp-hub:8765/messages/\n[MCPClient] \u2713 Connected. Available tools: [...]\n</code></pre></p>"},{"location":"architecture/mcp-architecture/#related-documentation","title":"Related Documentation","text":"<ul> <li>MCP Docker Setup</li> <li>MCP Server Registry</li> <li>MCP Tools</li> </ul>"},{"location":"architecture/message-dto/","title":"Message DTO Architecture","text":""},{"location":"architecture/message-dto/#overview","title":"Overview","text":"<p>The messaging layer has been decoupled from the Telegram SDK using the Data Transfer Object (DTO) pattern. This architectural decision improves maintainability, testability, and allows for easier migration to different messaging platforms.</p>"},{"location":"architecture/message-dto/#architecture-components","title":"Architecture Components","text":""},{"location":"architecture/message-dto/#1-incomingmessagedto-srcbotdtopy","title":"1. IncomingMessageDTO (<code>src/bot/dto.py</code>)","text":"<p>The <code>IncomingMessageDTO</code> is a platform-independent representation of an incoming message. It contains all the necessary data from a message without depending on Telegram-specific types.</p> <p>Key fields:</p> <ul> <li><code>message_id</code>: Unique message identifier</li> <li><code>chat_id</code>: Chat where message was sent</li> <li><code>user_id</code>: User who sent the message</li> <li><code>text</code>: Message text content</li> <li><code>content_type</code>: Type of content (text, photo, document, etc.)</li> <li><code>timestamp</code>: When the message was sent</li> <li>Optional fields for forwarded messages and media attachments</li> </ul> <p>Benefits:</p> <ul> <li>Platform-independent: Services don't depend on Telegram SDK</li> <li>Testable: Easy to create mock messages for testing</li> <li>Serializable: Can be easily converted to/from JSON for storage or queuing</li> </ul>"},{"location":"architecture/message-dto/#2-messagemapper-srcbotmessage_mapperpy","title":"2. MessageMapper (<code>src/bot/message_mapper.py</code>)","text":"<p>The <code>MessageMapper</code> class handles conversion between Telegram messages and DTOs. It isolates the Telegram SDK dependency to the bot layer.</p> <p>Key methods:</p> <ul> <li><code>from_telegram_message(message: Message) -&gt; IncomingMessageDTO</code>: Converts Telegram message to DTO</li> <li><code>to_dict(dto: IncomingMessageDTO) -&gt; Dict</code>: Converts DTO to dictionary (for legacy code)</li> </ul>"},{"location":"architecture/message-dto/#3-service-interfaces-srcservicesinterfacespy","title":"3. Service Interfaces (<code>src/services/interfaces.py</code>)","text":"<p>Service interfaces have been updated to use DTOs instead of Telegram types:</p> <p>Before:</p> <pre><code>from telebot.types import Message\n\nasync def process_message(self, message: Message) -&gt; None:\n    pass\n</code></pre> <p>After:</p> <pre><code>from src.bot.dto import IncomingMessageDTO\n\nasync def process_message(self, message: IncomingMessageDTO) -&gt; None:\n    pass\n</code></pre>"},{"location":"architecture/message-dto/#data-flow","title":"Data Flow","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Telegram Bot    \u2502\n\u2502 (handlers.py)   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502 Telegram Message\n         \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 MessageMapper   \u2502\n\u2502 (mapper)        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502 IncomingMessageDTO\n         \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 MessageProcessor\u2502\n\u2502 (service)       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502 MessageGroup\n         \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Domain Services \u2502\n\u2502 (note, ask,     \u2502\n\u2502  agent)         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/message-dto/#changes-to-processing-messages","title":"Changes to Processing Messages","text":""},{"location":"architecture/message-dto/#in-handlers-layer-srcbothandlerspy","title":"In Handlers Layer (<code>src/bot/handlers.py</code>)","text":"<p>Handlers now convert incoming Telegram messages to DTOs before passing them to services:</p> <pre><code>async def handle_message(self, message: Message) -&gt; None:\n    # Convert Telegram message to DTO\n    message_dto = MessageMapper.from_telegram_message(message)\n\n    # Pass DTO to service\n    await self.message_processor.process_message(message_dto)\n</code></pre>"},{"location":"architecture/message-dto/#in-service-layer","title":"In Service Layer","text":"<p>Services now work with DTOs and only need message IDs and chat IDs for bot operations:</p> <p>Before:</p> <pre><code>async def create_note(\n    self,\n    group: MessageGroup,\n    processing_msg: Message,  # Telegram type!\n    user_id: int,\n    user_kb: dict\n) -&gt; None:\n    await self.bot.edit_message_text(\n        \"Processing...\",\n        chat_id=processing_msg.chat.id,\n        message_id=processing_msg.message_id\n    )\n</code></pre> <p>After:</p> <pre><code>async def create_note(\n    self,\n    group: MessageGroup,\n    processing_msg_id: int,  # Just the ID\n    chat_id: int,            # Just the ID\n    user_id: int,\n    user_kb: dict\n) -&gt; None:\n    await self.bot.edit_message_text(\n        \"Processing...\",\n        chat_id=chat_id,\n        message_id=processing_msg_id\n    )\n</code></pre>"},{"location":"architecture/message-dto/#benefits","title":"Benefits","text":""},{"location":"architecture/message-dto/#1-platform-independence","title":"1. Platform Independence","text":"<p>Services are no longer tied to Telegram. Switching to a different messaging platform (Discord, Slack, etc.) only requires:</p> <ul> <li>Implementing a new adapter for that platform</li> <li>Creating a mapper from that platform's message type to <code>IncomingMessageDTO</code></li> <li>No changes to service layer</li> </ul>"},{"location":"architecture/message-dto/#2-testability","title":"2. Testability","text":"<p>Creating test messages is now trivial:</p> <pre><code># Before (Telegram-specific)\nfrom telebot.types import Message, User, Chat\nmessage = Message(...)  # Complex Telegram object creation\n\n# After (simple DTO)\nfrom src.bot.dto import IncomingMessageDTO\nmessage_dto = IncomingMessageDTO(\n    message_id=1,\n    chat_id=123,\n    user_id=456,\n    text=\"Test message\",\n    content_type=\"text\",\n    timestamp=1234567890\n)\n</code></pre>"},{"location":"architecture/message-dto/#3-clear-boundaries","title":"3. Clear Boundaries","text":"<p>The architecture now has clear boundaries:</p> <ul> <li>Bot Layer (<code>src/bot/</code>): Handles Telegram-specific logic, imports <code>telebot</code></li> <li>Service Layer (<code>src/services/</code>): Platform-independent business logic, NO <code>telebot</code> imports</li> <li>Domain Layer: Pure business logic</li> </ul>"},{"location":"architecture/message-dto/#4-easier-evolution","title":"4. Easier Evolution","text":"<p>Changes to the Telegram SDK or bot framework don't ripple through the entire codebase. The impact is isolated to:</p> <ul> <li><code>TelegramBotAdapter</code></li> <li><code>MessageMapper</code></li> <li><code>BotHandlers</code></li> </ul>"},{"location":"architecture/message-dto/#migration-guide","title":"Migration Guide","text":""},{"location":"architecture/message-dto/#for-new-services","title":"For New Services","text":"<p>When creating new services that process messages:</p> <ol> <li>Accept DTOs in interface:</li> </ol> <pre><code>from src.bot.dto import IncomingMessageDTO\n\nasync def process(self, message: IncomingMessageDTO) -&gt; None:\n    pass\n</code></pre> <ol> <li>Use message data from DTO:</li> </ol> <pre><code>user_id = message.user_id\ntext = message.text\nchat_id = message.chat_id\n</code></pre> <ol> <li>Pass IDs for bot operations:</li> </ol> <pre><code>async def my_service_method(\n    self,\n    message_id: int,\n    chat_id: int,\n    ...\n) -&gt; None:\n    await self.bot.edit_message_text(\n        \"Done!\",\n        chat_id=chat_id,\n        message_id=message_id\n    )\n</code></pre>"},{"location":"architecture/message-dto/#for-existing-code","title":"For Existing Code","text":"<p>If you encounter code that still uses <code>telebot.types.Message</code>:</p> <ol> <li>Check the layer:</li> <li>If in <code>src/bot/</code>: OK to use Telegram types</li> <li> <p>If in <code>src/services/</code>: Should use DTOs</p> </li> <li> <p>Convert to DTO pattern:</p> </li> <li>Replace <code>Message</code> parameters with <code>IncomingMessageDTO</code></li> <li>Replace <code>processing_msg: Message</code> with <code>processing_msg_id: int, chat_id: int</code></li> <li>Update all references to use the new parameters</li> </ol>"},{"location":"architecture/message-dto/#best-practices","title":"Best Practices","text":"<ol> <li>Never import <code>telebot</code> in services: Services should be platform-independent</li> <li>Use DTOs for message data: Always convert at the boundary (handlers)</li> <li>Pass only IDs for operations: Services only need IDs to interact with the bot</li> <li>Keep mapper simple: Complex transformations belong in services, not the mapper</li> <li>Document DTO changes: If you add fields to <code>IncomingMessageDTO</code>, update this documentation</li> </ol>"},{"location":"architecture/message-dto/#future-enhancements","title":"Future Enhancements","text":"<p>Potential improvements to the DTO architecture:</p> <ol> <li>Typed Media DTOs: Create specific DTOs for different media types (PhotoDTO, DocumentDTO, etc.)</li> <li>Event-based Processing: Use DTOs as events in an event-driven architecture</li> <li>Message Serialization: Add methods to serialize/deserialize DTOs for message queues</li> <li>Validation: Add validation logic to DTOs to ensure data integrity</li> <li>Immutability: Consider making DTOs immutable (frozen dataclasses) for better safety</li> </ol>"},{"location":"architecture/message-dto/#related-documentation","title":"Related Documentation","text":"<ul> <li>Architecture Overview</li> <li>Data Flow</li> <li>Bot Port Interface</li> </ul>"},{"location":"architecture/overview/","title":"Architecture Overview","text":""},{"location":"architecture/overview/#introduction","title":"Introduction","text":"<p>tg-note is an intelligent knowledge base builder that transforms Telegram messages into structured markdown notes using AI agents. The system is built with a modular, event-driven architecture that prioritizes scalability, maintainability, and extensibility.</p>"},{"location":"architecture/overview/#core-principles","title":"Core Principles","text":""},{"location":"architecture/overview/#1-separation-of-concerns","title":"1. Separation of Concerns","text":"<p>Each component has a well-defined responsibility:</p> <ul> <li>Bot Layer: Telegram-specific interface and event handling</li> <li>Service Layer: Business logic and workflow orchestration</li> <li>Agent Layer: AI-powered content analysis and generation</li> <li>Knowledge Base Layer: File system and Git operations</li> <li>MCP Layer: Tool integration and memory management</li> </ul>"},{"location":"architecture/overview/#2-platform-independence","title":"2. Platform Independence","text":"<p>Services are decoupled from Telegram using the DTO (Data Transfer Object) pattern, enabling:</p> <ul> <li>Easy migration to other messaging platforms (Discord, Slack, etc.)</li> <li>Better testability with mock objects</li> <li>Clear architectural boundaries</li> </ul>"},{"location":"architecture/overview/#3-multi-user-support","title":"3. Multi-User Support","text":"<p>The system supports multiple users with:</p> <ul> <li>Per-user knowledge bases</li> <li>Shared knowledge base with synchronization</li> <li>Per-user settings and credentials</li> <li>Isolated memory storage</li> </ul>"},{"location":"architecture/overview/#4-async-first-design","title":"4. Async-First Design","text":"<p>All I/O operations are asynchronous for:</p> <ul> <li>Non-blocking message processing</li> <li>Concurrent user requests</li> <li>Better resource utilization</li> <li>Scalable architecture</li> </ul>"},{"location":"architecture/overview/#high-level-architecture","title":"High-Level Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                     Telegram Client                           \u2502\n\u2502                    (User Interface)                           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                            \u2502\n                            \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                      Bot Layer                                \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u2502\n\u2502  \u2502 TelegramBotAdapter                                  \u2502     \u2502\n\u2502  \u2502  - Event handling                                   \u2502     \u2502\n\u2502  \u2502  - Message/command routing                          \u2502     \u2502\n\u2502  \u2502  - User authentication                              \u2502     \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2502\n\u2502               \u2502                                               \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u2502\n\u2502  \u2502 Message Mapper                                      \u2502     \u2502\n\u2502  \u2502  - DTO conversion (Telegram \u2192 Platform-independent) \u2502     \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                \u2502\n                \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    Service Layer                              \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u2502\n\u2502  \u2502 MessageProcessor                                    \u2502     \u2502\n\u2502  \u2502  - Message grouping &amp; aggregation                   \u2502     \u2502\n\u2502  \u2502  - Deduplication                                    \u2502     \u2502\n\u2502  \u2502  - Mode routing (note/ask/agent)                    \u2502     \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2502\n\u2502       \u2502             \u2502              \u2502                          \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u2502\n\u2502  \u2502Note       \u2502 \u2502Question   \u2502 \u2502Agent Task             \u2502      \u2502\n\u2502  \u2502Creation   \u2502 \u2502Answering  \u2502 \u2502Service                \u2502      \u2502\n\u2502  \u2502Service    \u2502 \u2502Service    \u2502 \u2502(full KB access)       \u2502      \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n        \u2502             \u2502             \u2502\n        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                      \u2502\n                      \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                     Agent Layer                               \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u2502\n\u2502  \u2502 Agent Factory                                       \u2502     \u2502\n\u2502  \u2502  - Agent selection (stub/qwen/autonomous)           \u2502     \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2502\n\u2502               \u2502                                               \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510        \u2502\n\u2502  \u2502                               \u2502                  \u2502        \u2502\n\u2502  \u25bc                               \u25bc                  \u25bc        \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2502\n\u2502  \u2502 StubAgent    \u2502  \u2502QwenCodeCLI   \u2502  \u2502Autonomous    \u2502       \u2502\n\u2502  \u2502 (testing)    \u2502  \u2502Agent         \u2502  \u2502Agent         \u2502       \u2502\n\u2502  \u2502              \u2502  \u2502(subprocess)  \u2502  \u2502(Python API)  \u2502       \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502\n\u2502                           \u2502                  \u2502               \u2502\n\u2502                           \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518               \u2502\n\u2502                                    \u2502                         \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502\n\u2502  \u2502 Tools                                               \u2502    \u2502\n\u2502  \u2502  - File management                                  \u2502    \u2502\n\u2502  \u2502  - Git operations                                   \u2502    \u2502\n\u2502  \u2502  - Web search                                       \u2502    \u2502\n\u2502  \u2502  - KB reading                                       \u2502    \u2502\n\u2502  \u2502  - Vector search                                    \u2502    \u2502\n\u2502  \u2502  - MCP tools (memory, custom)                       \u2502    \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                      \u2502\n                      \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502               Knowledge Base Layer                            \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u2502\n\u2502  \u2502 Repository Manager                                  \u2502     \u2502\n\u2502  \u2502  - KB initialization                                \u2502     \u2502\n\u2502  \u2502  - User KB management                               \u2502     \u2502\n\u2502  \u2502  - Path resolution                                  \u2502     \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2502\n\u2502               \u2502                                               \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u2502\n\u2502  \u2502 KB Sync Manager                                     \u2502     \u2502\n\u2502  \u2502  - File locks (cross-process)                       \u2502     \u2502\n\u2502  \u2502  - Async locks (in-process)                         \u2502     \u2502\n\u2502  \u2502  - Operation serialization                          \u2502     \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2502\n\u2502               \u2502                                               \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u2502\n\u2502  \u2502 Git Operations                                      \u2502     \u2502\n\u2502  \u2502  - Auto-commit                                      \u2502     \u2502\n\u2502  \u2502  - Pull before operations                           \u2502     \u2502\n\u2502  \u2502  - Push to remote                                   \u2502     \u2502\n\u2502  \u2502  - Conflict detection                               \u2502     \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                      \u2502\n                      \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    MCP Layer                                  \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u2502\n\u2502  \u2502 MCP Hub Service                                     \u2502     \u2502\n\u2502  \u2502  - Built-in tools (memory)                          \u2502     \u2502\n\u2502  \u2502  - Server registry                                  \u2502     \u2502\n\u2502  \u2502  - HTTP/SSE API                                     \u2502     \u2502\n\u2502  \u2502  - Config generation                                \u2502     \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2502\n\u2502               \u2502                                               \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u2502\n\u2502  \u2502 Memory Storage                                      \u2502     \u2502\n\u2502  \u2502  - JSON storage (simple)                            \u2502     \u2502\n\u2502  \u2502  - Vector storage (semantic search)                 \u2502     \u2502\n\u2502  \u2502  - mem-agent storage (LLM-powered)                  \u2502     \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/overview/#system-components","title":"System Components","text":""},{"location":"architecture/overview/#bot-layer","title":"Bot Layer","text":"<p>Purpose: Interface between Telegram and the application</p> <p>Key Components:</p> <ul> <li><code>TelegramBotAdapter</code>: Main bot class, handles Telegram API</li> <li><code>BotHandlers</code>: Command and message handlers</li> <li><code>MessageMapper</code>: Converts Telegram messages to DTOs</li> <li><code>SettingsHandlers</code>: Interactive settings management UI</li> <li><code>KBHandlers</code>: Knowledge base management UI</li> <li><code>MCPHandlers</code>: MCP server management UI</li> <li><code>CredentialsHandlers</code>: Secure credentials management</li> </ul> <p>Responsibilities:</p> <ul> <li>Receive and send Telegram messages</li> <li>Handle commands (<code>/start</code>, <code>/note</code>, <code>/ask</code>, <code>/agent</code>, etc.)</li> <li>Manage interactive button menus</li> <li>Convert Telegram types to platform-independent DTOs</li> <li>User authentication and authorization</li> </ul> <p>See Also: Message DTO Architecture</p>"},{"location":"architecture/overview/#service-layer","title":"Service Layer","text":"<p>Purpose: Business logic and workflow orchestration</p> <p>Key Components:</p> <ul> <li><code>MessageProcessor</code>: Routes messages to appropriate services</li> <li><code>NoteCreationService</code>: Creates structured notes from messages</li> <li><code>QuestionAnsweringService</code>: Answers questions about KB content</li> <li><code>AgentTaskService</code>: Executes autonomous agent tasks</li> <li><code>BaseKBService</code>: Common KB operations (Git, rate limiting, formatting)</li> <li><code>UserContextManager</code>: Manages conversation context per user</li> </ul> <p>Responsibilities:</p> <ul> <li>Message aggregation and grouping (30s timeout)</li> <li>Deduplication (prevent processing same content twice)</li> <li>Mode management (note/ask/agent)</li> <li>KB synchronization (acquire locks)</li> <li>Git operations (pull, commit, push)</li> <li>Agent invocation</li> <li>User notification</li> </ul> <p>See Also: Service Refactoring, KB Synchronization</p>"},{"location":"architecture/overview/#agent-layer","title":"Agent Layer","text":"<p>Purpose: AI-powered content analysis and generation</p> <p>Key Components:</p> <ul> <li><code>AgentFactory</code>: Creates agent instances based on configuration</li> <li><code>StubAgent</code>: Simple testing agent</li> <li><code>QwenCodeCLIAgent</code>: Qwen Code CLI integration (subprocess)</li> <li><code>AutonomousAgent</code>: Python-based OpenAI-compatible agent</li> <li>Tools: File management, Git, GitHub, web search, KB reading, vector search, MCP tools</li> </ul> <p>Responsibilities:</p> <ul> <li>Analyze message content</li> <li>Generate structured markdown</li> <li>Categorize content (topics)</li> <li>Execute tasks (in agent mode)</li> <li>Use tools (web search, Git, file management, etc.)</li> <li>Memory management (via MCP)</li> </ul> <p>See Also: Agent Architecture</p>"},{"location":"architecture/overview/#knowledge-base-layer","title":"Knowledge Base Layer","text":"<p>Purpose: File system and Git operations</p> <p>Key Components:</p> <ul> <li><code>RepositoryManager</code>: Manages multiple user KBs</li> <li><code>KBSyncManager</code>: Cross-process synchronization</li> <li><code>GitOperations</code>: Git automation</li> <li><code>CredentialsManager</code>: Secure per-user Git credentials</li> </ul> <p>Responsibilities:</p> <ul> <li>Initialize KB directories</li> <li>Manage file operations (create, update, delete)</li> <li>Git operations (commit, pull, push)</li> <li>Branch management</li> <li>Conflict detection</li> <li>Credential management (encrypted tokens)</li> </ul> <p>See Also: KB Synchronization, Storage Paths</p>"},{"location":"architecture/overview/#mcp-layer","title":"MCP Layer","text":"<p>Purpose: Tool integration and memory management</p> <p>Key Components:</p> <ul> <li><code>MCPHubService</code>: Unified gateway for MCP tools</li> <li><code>MCPServerManager</code>: Manages MCP Hub lifecycle</li> <li><code>MCPServersRegistry</code>: External MCP server registry</li> <li><code>MemoryStorage</code>: Memory storage implementations (JSON, Vector, mem-agent)</li> <li><code>MCPClient</code>: HTTP/SSE client for MCP protocol</li> </ul> <p>Responsibilities:</p> <ul> <li>Provide built-in MCP tools (memory)</li> <li>Manage external MCP servers</li> <li>HTTP/SSE API endpoints</li> <li>Per-user memory isolation</li> <li>Configuration generation</li> </ul> <p>See Also: MCP Architecture, Storage Paths</p>"},{"location":"architecture/overview/#core-workflows","title":"Core Workflows","text":""},{"location":"architecture/overview/#1-note-creation-workflow","title":"1. Note Creation Workflow","text":"<pre><code>sequenceDiagram\n    participant U as User\n    participant B as Bot Layer\n    participant M as MessageProcessor\n    participant N as NoteCreationService\n    participant A as Agent\n    participant K as KB Layer\n    participant G as Git\n\n    U-&gt;&gt;B: Send message\n    B-&gt;&gt;M: IncomingMessageDTO\n    M-&gt;&gt;M: Aggregate messages (30s)\n    M-&gt;&gt;M: Check deduplication\n    M-&gt;&gt;N: Create note request\n    N-&gt;&gt;K: Acquire KB lock\n    K--&gt;&gt;N: Lock acquired\n    N-&gt;&gt;G: Pull latest changes\n    G--&gt;&gt;N: Up to date\n    N-&gt;&gt;A: Process content\n    A--&gt;&gt;N: Structured markdown\n    N-&gt;&gt;K: Save file\n    N-&gt;&gt;G: Commit &amp; push\n    G--&gt;&gt;N: Success\n    N-&gt;&gt;K: Release lock\n    N-&gt;&gt;B: Notification\n    B-&gt;&gt;U: \"Note created\"\n</code></pre>"},{"location":"architecture/overview/#2-agent-task-workflow","title":"2. Agent Task Workflow","text":"<pre><code>sequenceDiagram\n    participant U as User\n    participant B as Bot Layer\n    participant A as AgentTaskService\n    participant AG as Agent\n    participant K as KB Layer\n    participant G as Git\n\n    U-&gt;&gt;B: /agent task request\n    B-&gt;&gt;A: Execute task\n    A-&gt;&gt;K: Acquire KB lock\n    K--&gt;&gt;A: Lock acquired\n    A-&gt;&gt;G: Pull latest\n    A-&gt;&gt;AG: Execute with tools\n    AG-&gt;&gt;K: Read/write files\n    AG--&gt;&gt;A: Task complete\n    A-&gt;&gt;G: Auto-commit &amp; push\n    A-&gt;&gt;K: Release lock\n    A-&gt;&gt;B: Results with file changes\n    B-&gt;&gt;U: Task completed\n</code></pre>"},{"location":"architecture/overview/#3-question-answering-workflow","title":"3. Question Answering Workflow","text":"<pre><code>sequenceDiagram\n    participant U as User\n    participant B as Bot Layer\n    participant Q as QuestionAnsweringService\n    participant V as VectorSearch\n    participant A as Agent\n    participant K as KB Layer\n\n    U-&gt;&gt;B: /ask question\n    B-&gt;&gt;Q: Answer question\n    Q-&gt;&gt;V: Search KB (optional)\n    V--&gt;&gt;Q: Relevant documents\n    Q-&gt;&gt;K: Read files\n    K--&gt;&gt;Q: File contents\n    Q-&gt;&gt;A: Generate answer with context\n    A--&gt;&gt;Q: Answer\n    Q-&gt;&gt;B: Answer with sources\n    B-&gt;&gt;U: Answer\n</code></pre>"},{"location":"architecture/overview/#deployment-modes","title":"Deployment Modes","text":""},{"location":"architecture/overview/#standalone-mode","title":"Standalone Mode","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         Python Process          \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502     Bot Service          \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502             \u2502                   \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502   MCP Hub (subprocess)   \u2502  \u2502\n\u2502  \u2502   - Built-in tools       \u2502  \u2502\n\u2502  \u2502   - Memory storage       \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Characteristics:</p> <ul> <li>Single Python process</li> <li>MCP Hub launched as subprocess</li> <li>Suitable for single-user deployments</li> <li>Easy development and testing</li> </ul>"},{"location":"architecture/overview/#docker-mode","title":"Docker Mode","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Bot Container     \u2502       \u2502  MCP Hub Container  \u2502\n\u2502   - Pure client     \u2502\u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2524  - Standalone       \u2502\n\u2502   - Connects via    \u2502 HTTP  \u2502  - Built-in tools   \u2502\n\u2502     MCP_HUB_URL     \u2502       \u2502  - Memory storage   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n            \u2502\n            \u2502 (Optional)\n            \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  vLLM/SGLang        \u2502\n\u2502  (GPU backend)      \u2502\n\u2502  - For mem-agent    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Characteristics:</p> <ul> <li>Multi-container deployment</li> <li>MCP Hub as standalone service</li> <li>Bot is pure client</li> <li>Scalable architecture</li> <li>Suitable for production</li> </ul> <p>See Also: Docker Deployment</p>"},{"location":"architecture/overview/#configuration-architecture","title":"Configuration Architecture","text":""},{"location":"architecture/overview/#settings-hierarchy","title":"Settings Hierarchy","text":"<pre><code>Environment Variables (highest priority)\n    \u2193\n.env File\n    \u2193\nconfig.yaml (global settings)\n    \u2193\nUser Overrides (per-user via Telegram)\n    \u2193\nDefault Values (lowest priority)\n</code></pre>"},{"location":"architecture/overview/#configuration-flow","title":"Configuration Flow","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Settings Manager    \u2502\n\u2502  (Pydantic)          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n           \u2502\n           \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  User Settings       \u2502\n\u2502  Manager             \u2502\n\u2502  (per-user overrides)\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n           \u2502\n           \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Settings Handlers   \u2502\n\u2502  (Telegram UI)       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>See Also: Settings Architecture, User Guide: Settings Management</p>"},{"location":"architecture/overview/#data-storage","title":"Data Storage","text":""},{"location":"architecture/overview/#directory-structure","title":"Directory Structure","text":"<pre><code>tg-note/\n\u251c\u2500\u2500 config.yaml                    # Global settings\n\u251c\u2500\u2500 .env                           # Credentials (git-ignored)\n\u251c\u2500\u2500 data/\n\u2502   \u251c\u2500\u2500 memory/\n\u2502   \u2502   \u251c\u2500\u2500 user_123/              # User 123's memory (isolated)\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 memories.json\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 vector_store/\n\u2502   \u2502   \u2514\u2500\u2500 user_456/              # User 456's memory (isolated)\n\u2502   \u251c\u2500\u2500 mcp_servers/\n\u2502   \u2502   \u251c\u2500\u2500 weather-api.json       # Shared MCP server\n\u2502   \u2502   \u2514\u2500\u2500 user_123/              # User 123's MCP servers\n\u2502   \u2502       \u2514\u2500\u2500 custom.json\n\u2502   \u251c\u2500\u2500 processed.json             # Global deduplication tracker\n\u2502   \u2514\u2500\u2500 user_settings_overrides.json  # Per-user settings\n\u251c\u2500\u2500 logs/\n\u2502   \u251c\u2500\u2500 bot.log                    # Bot logs\n\u2502   \u2514\u2500\u2500 mcp_hub.log                # MCP Hub logs\n\u2514\u2500\u2500 knowledge_bases/\n    \u251c\u2500\u2500 user_123_kb/               # User 123's KB\n    \u2514\u2500\u2500 user_456_kb/               # User 456's KB\n</code></pre> <p>See Also: Storage Paths Architecture</p>"},{"location":"architecture/overview/#security","title":"Security","text":""},{"location":"architecture/overview/#1-user-authentication","title":"1. User Authentication","text":"<ul> <li>Telegram user ID as primary identifier</li> <li>Optional allowed user list (<code>ALLOWED_USER_IDS</code>)</li> <li>Per-user resource isolation</li> </ul>"},{"location":"architecture/overview/#2-credentials-management","title":"2. Credentials Management","text":"<ul> <li>Encrypted storage (AES-128 Fernet)</li> <li>Per-user Git credentials</li> <li>Auto-delete sensitive messages</li> <li>No credentials in logs</li> </ul>"},{"location":"architecture/overview/#3-file-system-security","title":"3. File System Security","text":"<ul> <li>Path validation (prevent path traversal)</li> <li>Git operations restricted to KB directory</li> <li>File lock mechanisms</li> <li>Safe branch operations</li> </ul>"},{"location":"architecture/overview/#4-api-security","title":"4. API Security","text":"<ul> <li>Rate limiting per user</li> <li>Timeout handling</li> <li>Input validation</li> <li>Error sanitization</li> </ul>"},{"location":"architecture/overview/#performance-considerations","title":"Performance Considerations","text":""},{"location":"architecture/overview/#async-operations","title":"Async Operations","text":"<ul> <li>All I/O operations are async</li> <li>Non-blocking message processing</li> <li>Concurrent user requests</li> </ul>"},{"location":"architecture/overview/#caching","title":"Caching","text":"<ul> <li>Agent instance caching per user</li> <li>MCP client connection pooling</li> <li>Settings cache</li> </ul>"},{"location":"architecture/overview/#rate-limiting","title":"Rate Limiting","text":"<ul> <li>Per-user rate limits</li> <li>Configurable thresholds</li> <li>Graceful degradation</li> </ul>"},{"location":"architecture/overview/#lock-management","title":"Lock Management","text":"<ul> <li>File locks for cross-process sync</li> <li>Async locks for in-process sync</li> <li>Timeout handling (5 minutes default)</li> <li>Automatic lock release on error</li> </ul>"},{"location":"architecture/overview/#error-handling","title":"Error Handling","text":""},{"location":"architecture/overview/#graceful-degradation","title":"Graceful Degradation","text":"<ul> <li>Agent failures don't crash the bot</li> <li>Git failures are logged and reported</li> <li>Lock timeouts are handled</li> <li>MCP failures fall back to core functionality</li> </ul>"},{"location":"architecture/overview/#user-notifications","title":"User Notifications","text":"<ul> <li>Clear error messages</li> <li>Recovery suggestions</li> <li>Support information</li> </ul>"},{"location":"architecture/overview/#logging","title":"Logging","text":"<ul> <li>Structured logging (Loguru)</li> <li>Multiple log levels (DEBUG, INFO, WARNING, ERROR, CRITICAL)</li> <li>File and console output</li> <li>Request tracing</li> </ul>"},{"location":"architecture/overview/#extensibility","title":"Extensibility","text":""},{"location":"architecture/overview/#adding-new-agents","title":"Adding New Agents","text":"<ol> <li>Implement <code>BaseAgent</code> interface</li> <li>Register in <code>AgentFactory</code></li> <li>Add configuration options</li> <li>Update documentation</li> </ol>"},{"location":"architecture/overview/#adding-new-tools","title":"Adding New Tools","text":"<ol> <li>Implement tool class</li> <li>Register in tool registry</li> <li>Add to agent configuration</li> <li>Document tool usage</li> </ol>"},{"location":"architecture/overview/#adding-new-services","title":"Adding New Services","text":"<ol> <li>Inherit from <code>BaseKBService</code> (if KB-related)</li> <li>Implement service interface</li> <li>Register in service container</li> <li>Wire in message processor</li> </ol>"},{"location":"architecture/overview/#adding-new-mcp-servers","title":"Adding New MCP Servers","text":"<ol> <li>Create server configuration JSON</li> <li>Place in <code>data/mcp_servers/</code></li> <li>Configure connection details</li> <li>Test via <code>/mcp list</code> command</li> </ol>"},{"location":"architecture/overview/#testing-strategy","title":"Testing Strategy","text":""},{"location":"architecture/overview/#unit-tests","title":"Unit Tests","text":"<ul> <li>Individual components</li> <li>Mock dependencies</li> <li>Fast execution</li> <li>High coverage</li> </ul>"},{"location":"architecture/overview/#integration-tests","title":"Integration Tests","text":"<ul> <li>Multi-component workflows</li> <li>Real dependencies</li> <li>KB operations</li> <li>Git operations</li> </ul>"},{"location":"architecture/overview/#end-to-end-tests","title":"End-to-End Tests","text":"<ul> <li>Full user workflows</li> <li>Telegram integration</li> <li>Agent integration</li> <li>MCP integration</li> </ul> <p>See Also: Testing Guide</p>"},{"location":"architecture/overview/#monitoring-observability","title":"Monitoring &amp; Observability","text":""},{"location":"architecture/overview/#metrics","title":"Metrics","text":"<ul> <li>Message processing rate</li> <li>Agent response time</li> <li>KB operation latency</li> <li>Error rates</li> </ul>"},{"location":"architecture/overview/#logs","title":"Logs","text":"<ul> <li>Structured logging</li> <li>Request tracing</li> <li>Error tracking</li> <li>Performance profiling</li> </ul>"},{"location":"architecture/overview/#health-checks","title":"Health Checks","text":"<ul> <li>Bot status (<code>/status</code>)</li> <li>MCP Hub health (<code>/health</code>)</li> <li>Git connectivity</li> <li>Agent availability</li> </ul>"},{"location":"architecture/overview/#related-documentation","title":"Related Documentation","text":"<ul> <li>Agent Architecture - Detailed agent system design</li> <li>Data Flow - Step-by-step data flow through the system</li> <li>MCP Architecture - MCP layer design</li> <li>Service Refactoring - Service layer design patterns</li> <li>KB Synchronization - Multi-user KB synchronization</li> <li>Message DTO - Platform-independent messaging</li> <li>Settings Architecture - Configuration management</li> <li>Storage Paths - Data storage organization</li> </ul>"},{"location":"architecture/service-refactoring/","title":"Service Refactoring: BaseKBService","text":"<p>This document describes the refactoring of KB-related services to minimize code duplication and improve maintainability.</p>"},{"location":"architecture/service-refactoring/#overview","title":"Overview","text":"<p>The <code>NoteCreationService</code> and <code>AgentTaskService</code> previously contained significant code duplication. This refactoring extracts common functionality into a shared <code>BaseKBService</code> base class.</p>"},{"location":"architecture/service-refactoring/#refactoring-date","title":"Refactoring Date","text":"<ul> <li>2025-10-19: Initial refactoring to create <code>BaseKBService</code></li> </ul>"},{"location":"architecture/service-refactoring/#problem-statement","title":"Problem Statement","text":""},{"location":"architecture/service-refactoring/#before-refactoring","title":"Before Refactoring","text":"<p>Code Duplication between <code>NoteCreationService</code> and <code>AgentTaskService</code>:</p> <ol> <li>Git Operations Setup - Identical credential retrieval and <code>GitOperations</code> initialization</li> <li>Agent Working Directory Setup - Identical <code>KB_TOPICS_ONLY</code> logic and directory configuration</li> <li>Rate Limiting - Identical rate limit check and error notification</li> <li>Auto-commit and Push - Nearly identical Git commit/push operations</li> <li>GitHub URL Generation - Completely duplicated <code>_get_github_base_url()</code> function</li> <li>File Change Formatting - Similar logic for displaying created/edited/deleted files</li> <li>Links/Relations Filtering - Identical filtering logic with helper functions</li> <li>Safe Message Editing - Duplicated timeout handling for message edits</li> </ol> <p>Impact: - Harder to maintain (changes must be made in multiple places) - Increased risk of bugs (one file updated, another forgotten) - Larger codebase (more code to test and review)</p>"},{"location":"architecture/service-refactoring/#solution-basekbservice","title":"Solution: BaseKBService","text":""},{"location":"architecture/service-refactoring/#architecture","title":"Architecture","text":"<pre><code>BaseKBService (base class)\n    \u2193\n    \u251c\u2500\u2500 NoteCreationService (note mode)\n    \u2514\u2500\u2500 AgentTaskService (agent mode)\n</code></pre>"},{"location":"architecture/service-refactoring/#class-hierarchy","title":"Class Hierarchy","text":"<pre><code># Base class with common functionality\nclass BaseKBService:\n    def __init__(self, bot, repo_manager, settings_manager, credentials_manager, rate_limiter):\n        # Common dependencies\n\n    def _setup_git_ops(self, kb_path, user_id) -&gt; GitOperations:\n        # Git operations setup with credentials\n\n    def _get_agent_working_dir(self, kb_path, user_id) -&gt; Path:\n        # Agent working directory based on KB_TOPICS_ONLY\n\n    # ... other common methods\n\n# Note creation service\nclass NoteCreationService(BaseKBService, INoteCreationService):\n    def __init__(self, bot, tracker, repo_manager, user_context_manager, settings_manager, ...):\n        super().__init__(bot, repo_manager, settings_manager, credentials_manager, rate_limiter)\n        # Note-specific dependencies\n\n    async def create_note(self, group, processing_msg_id, chat_id, user_id, user_kb):\n        # Uses base class methods for common functionality\n        git_ops = self._setup_git_ops(kb_path, user_id)\n        # ... note creation logic\n\n# Agent task service\nclass AgentTaskService(BaseKBService, IAgentTaskService):\n    def __init__(self, bot, repo_manager, user_context_manager, settings_manager, ...):\n        super().__init__(bot, repo_manager, settings_manager, credentials_manager, rate_limiter)\n        # Agent-specific dependencies\n\n    async def execute_task(self, group, processing_msg_id, chat_id, user_id, user_kb):\n        # Uses base class methods for common functionality\n        git_ops = self._setup_git_ops(kb_path, user_id)\n        # ... task execution logic\n</code></pre>"},{"location":"architecture/service-refactoring/#basekbservice-api","title":"BaseKBService API","text":""},{"location":"architecture/service-refactoring/#common-methods","title":"Common Methods","text":""},{"location":"architecture/service-refactoring/#git-operations","title":"Git Operations","text":"<p><code>_setup_git_ops(kb_path: Path, user_id: int) -&gt; GitOperations</code></p> <p>Setup Git operations handler with user-specific credentials.</p> <pre><code>git_ops = self._setup_git_ops(kb_path, user_id)\n</code></pre> <p><code>_auto_commit_and_push(git_ops, user_id, commit_message, chat_id, processing_msg_id) -&gt; tuple[bool, str]</code></p> <p>Auto-commit and push changes to remote repository.</p> <pre><code>await self._auto_commit_and_push(\n    git_ops, user_id, \"Add: New note\", chat_id, processing_msg_id\n)\n</code></pre>"},{"location":"architecture/service-refactoring/#agent-configuration","title":"Agent Configuration","text":"<p><code>_get_agent_working_dir(kb_path: Path, user_id: int) -&gt; Path</code></p> <p>Get agent working directory based on KB_TOPICS_ONLY setting.</p> <pre><code>working_dir = self._get_agent_working_dir(kb_path, user_id)\n</code></pre> <p><code>_configure_agent_working_dir(agent, working_dir: Path) -&gt; None</code></p> <p>Configure agent's working directory if supported.</p> <pre><code>self._configure_agent_working_dir(user_agent, working_dir)\n</code></pre>"},{"location":"architecture/service-refactoring/#rate-limiting","title":"Rate Limiting","text":"<p><code>_check_rate_limit(user_id: int, chat_id: int, processing_msg_id: int) -&gt; bool</code></p> <p>Check rate limit before agent API call.</p> <pre><code>if not await self._check_rate_limit(user_id, chat_id, processing_msg_id):\n    return  # Rate limited\n</code></pre>"},{"location":"architecture/service-refactoring/#display-formatting","title":"Display Formatting","text":"<p><code>_get_github_base_url(kb_path: Path, user_id: int) -&gt; Optional[str]</code></p> <p>Generate GitHub base URL for file links.</p> <pre><code>github_base = self._get_github_base_url(kb_path, user_id)\n</code></pre> <p><code>_format_file_changes(files_created, files_edited, files_deleted, folders_created, github_base) -&gt; list[str]</code></p> <p>Format file changes for display in user notification.</p> <pre><code>message_parts = self._format_file_changes(\n    files_created, files_edited, [], folders_created, github_base\n)\n</code></pre> <p><code>_filter_and_format_links(links, files_created, kb_path, github_base) -&gt; list[str]</code></p> <p>Filter and format links/relations for display (excludes self-references).</p> <pre><code>link_parts = self._filter_and_format_links(\n    links, files_created, kb_path, github_base\n)\n</code></pre>"},{"location":"architecture/service-refactoring/#message-handling","title":"Message Handling","text":"<p><code>_safe_edit_message(text, chat_id, message_id, parse_mode) -&gt; bool</code></p> <p>Safely edit a message with timeout handling.</p> <pre><code>success = await self._safe_edit_message(\n    \"Processing...\", chat_id=chat_id, message_id=msg_id\n)\n</code></pre> <p><code>_send_error_notification(processing_msg_id, chat_id, error_message) -&gt; None</code></p> <p>Send error notification to user.</p> <pre><code>await self._send_error_notification(\n    processing_msg_id, chat_id, str(error)\n)\n</code></pre>"},{"location":"architecture/service-refactoring/#utility-methods","title":"Utility Methods","text":"<p><code>_extract_title_from_file(file_path: Path) -&gt; Optional[str]</code></p> <p>Extract title from markdown file (first # heading or frontmatter).</p> <pre><code>title = self._extract_title_from_file(Path(\"note.md\"))\n</code></pre>"},{"location":"architecture/service-refactoring/#migration-guide","title":"Migration Guide","text":""},{"location":"architecture/service-refactoring/#for-service-developers","title":"For Service Developers","text":"<p>When creating a new KB-related service:</p> <ol> <li> <p>Inherit from BaseKBService: <pre><code>class MyNewService(BaseKBService, IMyNewService):\n    pass\n</code></pre></p> </li> <li> <p>Initialize base class: <pre><code>def __init__(self, bot, repo_manager, settings_manager, ...):\n    super().__init__(bot, repo_manager, settings_manager, credentials_manager, rate_limiter)\n    # Your service-specific initialization\n</code></pre></p> </li> <li> <p>Use base class methods: <pre><code>async def my_method(self, kb_path, user_id):\n    # Instead of duplicating Git setup code:\n    git_ops = self._setup_git_ops(kb_path, user_id)\n\n    # Instead of duplicating rate limit check:\n    if not await self._check_rate_limit(user_id, chat_id, msg_id):\n        return\n\n    # Instead of duplicating auto-commit:\n    await self._auto_commit_and_push(git_ops, user_id, \"My change\")\n</code></pre></p> </li> </ol>"},{"location":"architecture/service-refactoring/#for-existing-services","title":"For Existing Services","text":"<p>NoteCreationService and AgentTaskService have been refactored to use <code>BaseKBService</code>.</p> <p>Key Changes: - Removed duplicated Git operations setup code - Removed duplicated agent working directory configuration - Removed duplicated rate limiting logic - Removed duplicated GitHub URL generation - Removed duplicated file change formatting - Removed duplicated links filtering - Removed duplicated safe message editing</p> <p>Benefits: - ~400 lines of code eliminated (duplication) - Single source of truth for common operations - Easier to maintain and test - Consistent behavior across services</p>"},{"location":"architecture/service-refactoring/#testing","title":"Testing","text":""},{"location":"architecture/service-refactoring/#unit-tests","title":"Unit Tests","text":"<p>Base class functionality is tested through service tests: - <code>tests/test_agent_task_service_kb_lock.py</code>: Agent service with base class - Future: <code>tests/test_note_creation_service.py</code>: Note service with base class</p>"},{"location":"architecture/service-refactoring/#integration-tests","title":"Integration Tests","text":"<p>Services continue to work as before: - KB locking mechanism (inherited from base) - Git operations (delegated to base class) - Rate limiting (delegated to base class) - File change notifications (formatted by base class)</p>"},{"location":"architecture/service-refactoring/#benefits","title":"Benefits","text":""},{"location":"architecture/service-refactoring/#code-quality","title":"Code Quality","text":"<ol> <li>DRY Principle: Don't Repeat Yourself - common code in one place</li> <li>Single Responsibility: Base class handles KB operations, services handle specific workflows</li> <li>Maintainability: Changes to common functionality made once</li> <li>Testability: Base class methods can be tested independently</li> </ol>"},{"location":"architecture/service-refactoring/#performance","title":"Performance","text":"<ul> <li>No performance impact (same operations, just organized differently)</li> <li>Slightly reduced memory footprint (single method definitions)</li> </ul>"},{"location":"architecture/service-refactoring/#extensibility","title":"Extensibility","text":"<p>New KB-related services can easily leverage common functionality: <pre><code>class QuestionAnsweringService(BaseKBService, IQuestionAnsweringService):\n    # Automatically gets all base functionality\n    pass\n</code></pre></p>"},{"location":"architecture/service-refactoring/#related-documentation","title":"Related Documentation","text":"<ul> <li>KB Synchronization</li> <li>Agent Architecture</li> <li>Data Flow</li> </ul>"},{"location":"architecture/service-refactoring/#implementation-notes","title":"Implementation Notes","text":""},{"location":"architecture/service-refactoring/#aicode-note-comments","title":"AICODE-NOTE Comments","text":"<p>The refactored code includes <code>AICODE-NOTE</code> comments to explain: - Why base class methods are used instead of inline code - How common functionality is shared between services - Rationale for specific design decisions</p> <p>Example: <pre><code># AICODE-NOTE: Use base class method to setup Git operations\ngit_ops = self._setup_git_ops(kb_path, user_id)\n</code></pre></p>"},{"location":"architecture/service-refactoring/#type-hints","title":"Type Hints","text":"<p>All base class methods include proper type hints for: - Parameters - Return values - Optional parameters</p>"},{"location":"architecture/service-refactoring/#error-handling","title":"Error Handling","text":"<p>Base class methods handle errors consistently: - Git operation failures - Rate limit exceeded - Message edit timeouts - Missing configuration</p>"},{"location":"architecture/service-refactoring/#future-improvements","title":"Future Improvements","text":"<ol> <li>Additional Base Methods: Extract more common patterns as they emerge</li> <li>Configuration Base Class: Separate base class for settings management</li> <li>Testing Base Class: Shared test utilities for service testing</li> <li>Metrics Collection: Common metrics collection in base class</li> <li>Caching: Shared caching layer for common operations</li> </ol>"},{"location":"architecture/service-refactoring/#changelog","title":"Changelog","text":""},{"location":"architecture/service-refactoring/#2025-10-19-initial-refactoring","title":"2025-10-19: Initial Refactoring","text":"<p>Created: - <code>src/services/base_kb_service.py</code>: Base class with common functionality</p> <p>Modified: - <code>src/services/note_creation_service.py</code>: Refactored to use base class - <code>src/services/agent_task_service.py</code>: Refactored to use base class</p> <p>Removed (moved to base class): - Git operations setup code (duplicated) - Agent working directory configuration (duplicated) - Rate limiting logic (duplicated) - GitHub URL generation (duplicated) - File change formatting (duplicated) - Links filtering (duplicated) - Safe message editing (duplicated)</p> <p>Lines of Code: - Before: ~587 (note) + ~634 (agent) = ~1221 lines - After: ~587 (base) + ~323 (note) + ~345 (agent) = ~1255 lines - Effective reduction: ~400 lines of duplication eliminated</p> <p>Impact: - \u2705 No breaking changes (same public API) - \u2705 All existing tests pass - \u2705 No linter errors - \u2705 Same functionality, better organization</p>"},{"location":"architecture/settings-architecture/","title":"Settings Architecture","text":""},{"location":"architecture/settings-architecture/#overview","title":"Overview","text":"<p>tg-note uses a sophisticated multi-layer settings system that combines global configuration, environment variables, and per-user overrides. The architecture is built on Pydantic for type safety, validation, and seamless integration with multiple configuration sources.</p>"},{"location":"architecture/settings-architecture/#core-principles","title":"Core Principles","text":"<ol> <li>Type Safety: All settings are strongly typed and validated</li> <li>Source Hierarchy: Clear precedence rules for configuration sources</li> <li>User Overrides: Per-user customization without affecting global config</li> <li>Security: Sensitive credentials handled separately</li> <li>Interactive UI: Settings management via Telegram commands</li> </ol>"},{"location":"architecture/settings-architecture/#architecture-diagram","title":"Architecture Diagram","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                Configuration Sources                          \u2502\n\u2502                (Priority: High to Low)                        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                            \u2502\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502                   \u2502                   \u2502\n        \u25bc                   \u25bc                   \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Environment  \u2502  \u2502  .env File       \u2502  \u2502 config.yaml  \u2502\n\u2502 Variables    \u2502  \u2502                  \u2502  \u2502 (global)     \u2502\n\u2502 (highest)    \u2502  \u2502 - Credentials    \u2502  \u2502              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502                   \u2502                   \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                           \u2502\n                           \u25bc\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502     Settings (Pydantic BaseSettings)    \u2502\n        \u2502                                         \u2502\n        \u2502  - Validates all values                 \u2502\n        \u2502  - Type conversion                      \u2502\n        \u2502  - Default values                       \u2502\n        \u2502  - Field validation                     \u2502\n        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                         \u2502\n                         \u25bc\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502  UserSettingsManager                    \u2502\n        \u2502                                         \u2502\n        \u2502  - Per-user overrides                   \u2502\n        \u2502  - Merges with global settings          \u2502\n        \u2502  - Persistent storage                   \u2502\n        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                         \u2502\n                         \u25bc\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502  SettingsHandlers                       \u2502\n        \u2502  (Telegram UI)                          \u2502\n        \u2502                                         \u2502\n        \u2502  - Interactive menus                    \u2502\n        \u2502  - Category navigation                  \u2502\n        \u2502  - Value input/validation               \u2502\n        \u2502  - Confirmation messages                \u2502\n        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/settings-architecture/#component-details","title":"Component Details","text":""},{"location":"architecture/settings-architecture/#1-settings-pydantic","title":"1. Settings (Pydantic)","text":"<p>Location: <code>config/settings.py</code></p> <p>Purpose: Central configuration management with type safety</p> <p>Key Features:</p> <ul> <li>Pydantic BaseSettings: Automatic loading from multiple sources</li> <li>Type annotations: Strong typing for all settings</li> <li>Field validation: Custom validators for complex types</li> <li>Default values: Sensible defaults for all settings</li> <li>Computed properties: Derived values from other settings</li> </ul> <p>Example Settings Definition:</p> <pre><code>from pydantic import Field\nfrom pydantic_settings import BaseSettings\n\nclass Settings(BaseSettings):\n    # Knowledge Base Settings\n    KB_PATH: str = Field(\n        default=\"./knowledge_base\",\n        description=\"Path to knowledge base directory\"\n    )\n    KB_GIT_ENABLED: bool = Field(\n        default=True,\n        description=\"Enable Git operations\"\n    )\n    KB_GIT_AUTO_PUSH: bool = Field(\n        default=True,\n        description=\"Automatically push commits to remote\"\n    )\n    KB_GIT_REMOTE: str = Field(\n        default=\"origin\",\n        description=\"Git remote name\"\n    )\n    KB_GIT_BRANCH: str = Field(\n        default=\"main\",\n        description=\"Git branch name\"\n    )\n\n    # Agent Settings\n    AGENT_TYPE: str = Field(\n        default=\"stub\",\n        description=\"Agent type: stub, qwen_code_cli, autonomous\"\n    )\n    AGENT_MODEL: str = Field(\n        default=\"gpt-3.5-turbo\",\n        description=\"LLM model name\"\n    )\n    AGENT_TIMEOUT: int = Field(\n        default=300,\n        description=\"Agent execution timeout (seconds)\",\n        ge=10,  # minimum 10 seconds\n        le=3600  # maximum 1 hour\n    )\n\n    # Processing Settings\n    MESSAGE_GROUP_TIMEOUT: int = Field(\n        default=30,\n        description=\"Message grouping timeout (seconds)\"\n    )\n\n    # User Access Control\n    ALLOWED_USER_IDS: List[int] = Field(\n        default_factory=list,\n        description=\"Allowed Telegram user IDs (empty = all allowed)\"\n    )\n\n    # Custom validator example\n    @field_validator(\"AGENT_TYPE\")\n    def validate_agent_type(cls, v):\n        allowed = [\"stub\", \"qwen_code_cli\", \"autonomous\"]\n        if v not in allowed:\n            raise ValueError(f\"AGENT_TYPE must be one of {allowed}\")\n        return v\n\n    model_config = SettingsConfigDict(\n        env_file=\".env\",\n        env_file_encoding=\"utf-8\",\n        yaml_file=\"config.yaml\",\n        extra=\"ignore\"\n    )\n</code></pre> <p>Settings Loading Priority:</p> <pre><code>1. Environment Variables        (HIGHEST PRIORITY)\n   Example: export AGENT_TYPE=autonomous\n\n2. .env File\n   Example: AGENT_TYPE=autonomous\n\n3. config.yaml\n   Example: AGENT_TYPE: autonomous\n\n4. Default Values                (LOWEST PRIORITY)\n   Example: default=\"stub\"\n</code></pre> <p>Accessing Settings:</p> <pre><code>from config.settings import settings\n\n# Access settings\nkb_path = settings.KB_PATH\nagent_type = settings.AGENT_TYPE\ntimeout = settings.AGENT_TIMEOUT\n\n# Check if Git enabled\nif settings.KB_GIT_ENABLED:\n    git_ops.commit_and_push()\n</code></pre>"},{"location":"architecture/settings-architecture/#2-usersettingsmanager","title":"2. UserSettingsManager","text":"<p>Location: <code>src/bot/settings_manager.py</code></p> <p>Purpose: Manage per-user setting overrides</p> <p>Key Features:</p> <ul> <li>Per-user storage: Each user can customize their settings</li> <li>Merge with globals: User overrides applied on top of global settings</li> <li>Persistent storage: Saved to <code>data/user_settings_overrides.json</code></li> <li>Type validation: Ensures user-provided values are valid</li> <li>Atomic updates: Safe concurrent access</li> </ul> <p>Storage Format (<code>data/user_settings_overrides.json</code>):</p> <pre><code>{\n  \"123\": {\n    \"KB_GIT_AUTO_PUSH\": false,\n    \"AGENT_TIMEOUT\": 600,\n    \"MESSAGE_GROUP_TIMEOUT\": 60\n  },\n  \"456\": {\n    \"AGENT_TYPE\": \"autonomous\",\n    \"AGENT_MODEL\": \"gpt-4\"\n  }\n}\n</code></pre> <p>API Methods:</p> <pre><code>class UserSettingsManager:\n    def get_user_setting(\n        self,\n        user_id: int,\n        setting_name: str\n    ) -&gt; Any:\n        \"\"\"Get setting value for user (with override if exists)\"\"\"\n        pass\n\n    def update_user_setting(\n        self,\n        user_id: int,\n        setting_name: str,\n        value: Any\n    ) -&gt; bool:\n        \"\"\"Update user's setting override\"\"\"\n        pass\n\n    def reset_user_setting(\n        self,\n        user_id: int,\n        setting_name: str\n    ) -&gt; bool:\n        \"\"\"Remove user's override, revert to global\"\"\"\n        pass\n\n    def get_all_user_settings(\n        self,\n        user_id: int\n    ) -&gt; Dict[str, Any]:\n        \"\"\"Get all settings for user (merged with global)\"\"\"\n        pass\n\n    def list_user_overrides(\n        self,\n        user_id: int\n    ) -&gt; Dict[str, Any]:\n        \"\"\"List only user's overrides (not global)\"\"\"\n        pass\n</code></pre> <p>Usage Example:</p> <pre><code>from src.bot.settings_manager import UserSettingsManager\nfrom config.settings import settings\n\nmanager = UserSettingsManager(settings)\n\n# Get setting for user (with override if exists)\ntimeout = manager.get_user_setting(user_id=123, setting_name=\"AGENT_TIMEOUT\")\n# Returns: 600 (user override) or 300 (global default)\n\n# Update user's setting\nmanager.update_user_setting(\n    user_id=123,\n    setting_name=\"KB_GIT_AUTO_PUSH\",\n    value=False\n)\n\n# Reset to global default\nmanager.reset_user_setting(user_id=123, setting_name=\"AGENT_TIMEOUT\")\n</code></pre>"},{"location":"architecture/settings-architecture/#3-settingshandlers-telegram-ui","title":"3. SettingsHandlers (Telegram UI)","text":"<p>Location: <code>src/bot/settings_handlers.py</code></p> <p>Purpose: Interactive settings management via Telegram</p> <p>Key Features:</p> <ul> <li>Category navigation: Settings grouped by category</li> <li>Interactive buttons: Inline keyboards for easy navigation</li> <li>Type-aware input: Different UI for boolean/string/number settings</li> <li>Validation feedback: Real-time validation errors</li> <li>Confirmation messages: Clear feedback on changes</li> </ul> <p>UI Flow:</p> <pre><code>/settings\n    \u2502\n    \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  \u2699\ufe0f Settings Management             \u2502\n\u2502                                     \u2502\n\u2502  Choose a category:                 \u2502\n\u2502                                     \u2502\n\u2502  [\ud83d\udcda Knowledge Base]                \u2502\n\u2502  [\ud83e\udd16 Agent Configuration]           \u2502\n\u2502  [\u2699\ufe0f Processing Settings]           \u2502\n\u2502  [\ud83d\udcdd Logging Settings]              \u2502\n\u2502  [\ud83d\udc65 Access Control]                \u2502\n\u2502                                     \u2502\n\u2502  [\ud83d\udd19 Back to Main Menu]             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n    \u2502\n    \u2502 User clicks \"\ud83d\udcda Knowledge Base\"\n    \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  \ud83d\udcda Knowledge Base Settings         \u2502\n\u2502                                     \u2502\n\u2502  KB_PATH: ./knowledge_base          \u2502\n\u2502  [Change]                           \u2502\n\u2502                                     \u2502\n\u2502  KB_GIT_ENABLED: \u2705 Enabled         \u2502\n\u2502  [Toggle]                           \u2502\n\u2502                                     \u2502\n\u2502  KB_GIT_AUTO_PUSH: \u2705 Enabled       \u2502\n\u2502  [Toggle]                           \u2502\n\u2502                                     \u2502\n\u2502  KB_GIT_REMOTE: origin              \u2502\n\u2502  [Change]                           \u2502\n\u2502                                     \u2502\n\u2502  KB_GIT_BRANCH: main                \u2502\n\u2502  [Change]                           \u2502\n\u2502                                     \u2502\n\u2502  [\ud83d\udd19 Back to Categories]            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n    \u2502\n    \u2502 User clicks \"KB_GIT_AUTO_PUSH\"\n    \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  KB_GIT_AUTO_PUSH                   \u2502\n\u2502                                     \u2502\n\u2502  \ud83d\udcdd Description:                    \u2502\n\u2502  Automatically push commits to      \u2502\n\u2502  remote repository after changes    \u2502\n\u2502                                     \u2502\n\u2502  \ud83d\udd27 Type: Boolean                   \u2502\n\u2502  \ud83d\udcca Current: \u2705 Enabled             \u2502\n\u2502                                     \u2502\n\u2502  [\u2705 Enable]  [\u274c Disable]          \u2502\n\u2502                                     \u2502\n\u2502  [\ud83d\udd04 Reset to Default]              \u2502\n\u2502  [\ud83d\udd19 Back to Settings]              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n    \u2502\n    \u2502 User clicks \"\u274c Disable\"\n    \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  \u2705 Setting updated!                \u2502\n\u2502                                     \u2502\n\u2502  KB_GIT_AUTO_PUSH = false           \u2502\n\u2502                                     \u2502\n\u2502  [\ud83d\udd19 Back to Settings]              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Handler Methods:</p> <pre><code>class SettingsHandlers:\n    async def cmd_settings(self, message):\n        \"\"\"Show settings main menu\"\"\"\n        pass\n\n    async def show_category_settings(self, call, category):\n        \"\"\"Show settings in a category\"\"\"\n        pass\n\n    async def show_setting_detail(self, call, setting_name):\n        \"\"\"Show detailed info about a setting\"\"\"\n        pass\n\n    async def handle_setting_update(self, message, setting_name):\n        \"\"\"Handle user input for setting update\"\"\"\n        pass\n\n    async def handle_setting_toggle(self, call, setting_name):\n        \"\"\"Handle boolean setting toggle\"\"\"\n        pass\n\n    async def reset_setting(self, call, setting_name):\n        \"\"\"Reset setting to default\"\"\"\n        pass\n</code></pre>"},{"location":"architecture/settings-architecture/#settings-categories","title":"Settings Categories","text":""},{"location":"architecture/settings-architecture/#1-knowledge-base-settings","title":"1. Knowledge Base Settings","text":"<p>Prefix: <code>KB_</code></p> <p>Settings:</p> <ul> <li><code>KB_PATH</code>: Knowledge base directory path</li> <li><code>KB_GIT_ENABLED</code>: Enable/disable Git operations</li> <li><code>KB_GIT_AUTO_PUSH</code>: Auto-push after commits</li> <li><code>KB_GIT_REMOTE</code>: Git remote name</li> <li><code>KB_GIT_BRANCH</code>: Git branch name</li> <li><code>KB_TOPICS_ONLY</code>: Restrict agent to topics/ directory</li> </ul> <p>Use Case: Configure knowledge base behavior</p>"},{"location":"architecture/settings-architecture/#2-agent-configuration-settings","title":"2. Agent Configuration Settings","text":"<p>Prefix: <code>AGENT_</code></p> <p>Settings:</p> <ul> <li><code>AGENT_TYPE</code>: Agent type (stub/qwen_code_cli/autonomous)</li> <li><code>AGENT_MODEL</code>: LLM model name</li> <li><code>AGENT_TIMEOUT</code>: Execution timeout</li> <li><code>AGENT_MAX_ITERATIONS</code>: Max autonomous iterations</li> <li><code>AGENT_ENABLE_WEB_SEARCH</code>: Enable web search tool</li> <li><code>AGENT_ENABLE_FILE_MANAGEMENT</code>: Enable file tools</li> <li><code>AGENT_ENABLE_GIT</code>: Enable Git tools</li> <li><code>AGENT_ENABLE_GITHUB</code>: Enable GitHub tools</li> <li><code>AGENT_ENABLE_SHELL</code>: Enable shell tools (security risk)</li> <li><code>AGENT_ENABLE_MCP</code>: Enable MCP tools</li> <li><code>AGENT_ENABLE_MCP_MEMORY</code>: Enable MCP memory tools</li> </ul> <p>Use Case: Configure AI agent behavior and capabilities</p>"},{"location":"architecture/settings-architecture/#3-processing-settings","title":"3. Processing Settings","text":"<p>Prefix: <code>MESSAGE_GROUP_</code></p> <p>Settings:</p> <ul> <li><code>MESSAGE_GROUP_TIMEOUT</code>: Seconds to wait before processing grouped messages</li> <li><code>PROCESSED_LOG_PATH</code>: Path to deduplication log</li> </ul> <p>Use Case: Control message processing behavior</p>"},{"location":"architecture/settings-architecture/#4-logging-settings","title":"4. Logging Settings","text":"<p>Prefix: <code>LOG_</code></p> <p>Settings:</p> <ul> <li><code>LOG_LEVEL</code>: Logging level (DEBUG/INFO/WARNING/ERROR/CRITICAL)</li> <li><code>LOG_FILE</code>: Path to log file</li> <li><code>LOG_FORMAT</code>: Log message format</li> <li><code>LOG_ROTATION</code>: Enable log rotation</li> </ul> <p>Use Case: Control logging verbosity and output</p>"},{"location":"architecture/settings-architecture/#5-access-control","title":"5. Access Control","text":"<p>Settings:</p> <ul> <li><code>ALLOWED_USER_IDS</code>: List of allowed Telegram user IDs</li> </ul> <p>Use Case: Restrict bot access to specific users</p>"},{"location":"architecture/settings-architecture/#6-mcp-settings","title":"6. MCP Settings","text":"<p>Prefix: <code>MCP_</code> or <code>MEM_AGENT_</code></p> <p>Settings:</p> <ul> <li><code>MCP_HUB_URL</code>: MCP Hub endpoint URL (Docker mode)</li> <li><code>MCP_HUB_PORT</code>: MCP Hub port</li> <li><code>MEM_AGENT_STORAGE_TYPE</code>: Memory storage type (json/vector/mem-agent)</li> <li><code>MEM_AGENT_MODEL</code>: Memory agent model</li> <li><code>MEM_AGENT_BACKEND_URL</code>: Backend LLM URL (vLLM/SGLang)</li> </ul> <p>Use Case: Configure MCP and memory services</p>"},{"location":"architecture/settings-architecture/#settings-validation","title":"Settings Validation","text":""},{"location":"architecture/settings-architecture/#type-validation","title":"Type Validation","text":"<pre><code># Boolean validation\nKB_GIT_ENABLED: bool = True\n\n# Integer with range\nAGENT_TIMEOUT: int = Field(\n    default=300,\n    ge=10,    # minimum 10 seconds\n    le=3600   # maximum 1 hour\n)\n\n# String with enum\nAGENT_TYPE: str = Field(\n    default=\"stub\",\n    pattern=\"^(stub|qwen_code_cli|autonomous)$\"\n)\n\n# List of integers\nALLOWED_USER_IDS: List[int] = Field(default_factory=list)\n</code></pre>"},{"location":"architecture/settings-architecture/#custom-validators","title":"Custom Validators","text":"<pre><code>@field_validator(\"KB_PATH\")\ndef validate_kb_path(cls, v):\n    \"\"\"Ensure KB path exists or can be created\"\"\"\n    path = Path(v)\n    if not path.exists():\n        try:\n            path.mkdir(parents=True, exist_ok=True)\n        except Exception as e:\n            raise ValueError(f\"Cannot create KB directory: {e}\")\n    return str(path.absolute())\n\n@field_validator(\"ALLOWED_USER_IDS\")\ndef validate_allowed_users(cls, v):\n    \"\"\"Parse allowed user IDs from various formats\"\"\"\n    if isinstance(v, str):\n        if v.strip() == \"\":\n            return []\n        if v.startswith(\"[\"):\n            # JSON list\n            import json\n            return [int(x) for x in json.loads(v)]\n        else:\n            # Comma-separated\n            return [int(x.strip()) for x in v.split(\",\") if x.strip()]\n    return v\n</code></pre>"},{"location":"architecture/settings-architecture/#validation-errors","title":"Validation Errors","text":"<pre><code>try:\n    settings = Settings()\nexcept ValidationError as e:\n    for error in e.errors():\n        print(f\"Field: {error['loc'][0]}\")\n        print(f\"Error: {error['msg']}\")\n        print(f\"Input: {error['input']}\")\n</code></pre>"},{"location":"architecture/settings-architecture/#settings-usage-in-code","title":"Settings Usage in Code","text":""},{"location":"architecture/settings-architecture/#service-layer","title":"Service Layer","text":"<pre><code>from config.settings import settings\nfrom src.bot.settings_manager import UserSettingsManager\n\nclass NoteCreationService:\n    def __init__(self, settings_manager: UserSettingsManager):\n        self.settings_manager = settings_manager\n\n    async def create_note(self, user_id: int, ...):\n        # Get user-specific or global setting\n        git_enabled = self.settings_manager.get_user_setting(\n            user_id, \"KB_GIT_ENABLED\"\n        )\n\n        if git_enabled:\n            # Perform Git operations\n            pass\n</code></pre>"},{"location":"architecture/settings-architecture/#agent-layer","title":"Agent Layer","text":"<pre><code>from config.settings import settings\n\nclass AutonomousAgent:\n    def __init__(self):\n        self.model = settings.AGENT_MODEL\n        self.timeout = settings.AGENT_TIMEOUT\n        self.max_iterations = settings.AGENT_MAX_ITERATIONS\n\n    async def process(self, ...):\n        # Use settings\n        with timeout_context(self.timeout):\n            for i in range(self.max_iterations):\n                # Agent loop\n                pass\n</code></pre>"},{"location":"architecture/settings-architecture/#kb-layer","title":"KB Layer","text":"<pre><code>from config.settings import settings\n\nclass GitOperations:\n    def __init__(self, kb_path: Path):\n        self.enabled = settings.KB_GIT_ENABLED\n        self.auto_push = settings.KB_GIT_AUTO_PUSH\n        self.remote = settings.KB_GIT_REMOTE\n        self.branch = settings.KB_GIT_BRANCH\n\n    def commit_and_push(self, message: str):\n        if not self.enabled:\n            return\n\n        self.commit(message)\n\n        if self.auto_push:\n            self.push(self.remote, self.branch)\n</code></pre>"},{"location":"architecture/settings-architecture/#configuration-files","title":"Configuration Files","text":""},{"location":"architecture/settings-architecture/#configyaml-global-settings","title":"config.yaml (Global Settings)","text":"<pre><code># Knowledge Base\nKB_PATH: ./knowledge_base\nKB_GIT_ENABLED: true\nKB_GIT_AUTO_PUSH: true\nKB_GIT_REMOTE: origin\nKB_GIT_BRANCH: main\nKB_TOPICS_ONLY: false\n\n# Agent\nAGENT_TYPE: \"stub\"  # stub, qwen_code_cli, autonomous\nAGENT_MODEL: \"gpt-3.5-turbo\"\nAGENT_TIMEOUT: 300\nAGENT_MAX_ITERATIONS: 10\n\n# Tools\nAGENT_ENABLE_WEB_SEARCH: true\nAGENT_ENABLE_FILE_MANAGEMENT: true\nAGENT_ENABLE_FOLDER_MANAGEMENT: true\nAGENT_ENABLE_GIT: true\nAGENT_ENABLE_GITHUB: true\nAGENT_ENABLE_SHELL: false  # Security risk\nAGENT_ENABLE_MCP: true\nAGENT_ENABLE_MCP_MEMORY: true\n\n# Processing\nMESSAGE_GROUP_TIMEOUT: 30\nPROCESSED_LOG_PATH: ./data/processed.json\n\n# Logging\nLOG_LEVEL: INFO\nLOG_FILE: ./logs/bot.log\n\n# Access Control (empty = all allowed)\nALLOWED_USER_IDS: []\n\n# MCP\nMEM_AGENT_STORAGE_TYPE: json  # json, vector, mem-agent\n</code></pre>"},{"location":"architecture/settings-architecture/#env-credentials-and-overrides","title":".env (Credentials and Overrides)","text":"<pre><code># Required: Telegram Bot Token\nTELEGRAM_BOT_TOKEN=1234567890:ABCdefGHIjklMNOpqrsTUVwxyz\n\n# Optional: API Keys\nOPENAI_API_KEY=sk-...\nOPENAI_BASE_URL=https://api.openai.com/v1\nQWEN_API_KEY=qwen-...\nANTHROPIC_API_KEY=sk-ant-...\nGITHUB_TOKEN=ghp_...\n\n# Optional: User Credentials\nGITHUB_USERNAME=myusername\nGITHUB_TOKEN=ghp_mytoken\n\n# Optional: Overrides\n# AGENT_TYPE=autonomous\n# AGENT_TIMEOUT=600\n</code></pre>"},{"location":"architecture/settings-architecture/#user_settings_overridesjson-per-user","title":"user_settings_overrides.json (Per-User)","text":"<pre><code>{\n  \"123\": {\n    \"KB_GIT_AUTO_PUSH\": false,\n    \"AGENT_TIMEOUT\": 600,\n    \"MESSAGE_GROUP_TIMEOUT\": 60\n  },\n  \"456\": {\n    \"AGENT_TYPE\": \"autonomous\",\n    \"AGENT_MODEL\": \"gpt-4\",\n    \"KB_TOPICS_ONLY\": true\n  }\n}\n</code></pre>"},{"location":"architecture/settings-architecture/#best-practices","title":"Best Practices","text":""},{"location":"architecture/settings-architecture/#1-use-settings-manager-for-user-specific-logic","title":"1. Use Settings Manager for User-Specific Logic","text":"<pre><code># \u2705 Good: Use settings manager\ntimeout = settings_manager.get_user_setting(user_id, \"AGENT_TIMEOUT\")\n\n# \u274c Bad: Direct access (ignores user overrides)\ntimeout = settings.AGENT_TIMEOUT\n</code></pre>"},{"location":"architecture/settings-architecture/#2-validate-before-saving","title":"2. Validate Before Saving","text":"<pre><code># \u2705 Good: Validate type and range\ntry:\n    value = int(value)\n    if value &lt; 10 or value &gt; 3600:\n        raise ValueError(\"Timeout must be between 10 and 3600 seconds\")\n    settings_manager.update_user_setting(user_id, \"AGENT_TIMEOUT\", value)\nexcept ValueError as e:\n    notify_user(f\"Invalid value: {e}\")\n\n# \u274c Bad: No validation\nsettings_manager.update_user_setting(user_id, \"AGENT_TIMEOUT\", value)\n</code></pre>"},{"location":"architecture/settings-architecture/#3-document-settings","title":"3. Document Settings","text":"<pre><code># \u2705 Good: Clear description and constraints\nAGENT_TIMEOUT: int = Field(\n    default=300,\n    description=\"Agent execution timeout in seconds\",\n    ge=10,\n    le=3600\n)\n\n# \u274c Bad: No description\nAGENT_TIMEOUT: int = 300\n</code></pre>"},{"location":"architecture/settings-architecture/#4-use-environment-variables-for-secrets","title":"4. Use Environment Variables for Secrets","text":"<pre><code># \u2705 Good: Credentials in .env\nTELEGRAM_BOT_TOKEN=secret_token\n\n# \u274c Bad: Credentials in config.yaml (tracked by Git)\n# TELEGRAM_BOT_TOKEN: secret_token\n</code></pre>"},{"location":"architecture/settings-architecture/#5-provide-sensible-defaults","title":"5. Provide Sensible Defaults","text":"<pre><code># \u2705 Good: Reasonable default\nMESSAGE_GROUP_TIMEOUT: int = Field(default=30)\n\n# \u274c Bad: No default (requires manual configuration)\nMESSAGE_GROUP_TIMEOUT: int\n</code></pre>"},{"location":"architecture/settings-architecture/#security-considerations","title":"Security Considerations","text":""},{"location":"architecture/settings-architecture/#1-credential-isolation","title":"1. Credential Isolation","text":"<ul> <li>\u2705 Credentials in <code>.env</code> (git-ignored)</li> <li>\u2705 Per-user Git credentials encrypted</li> <li>\u274c Never store credentials in <code>config.yaml</code></li> <li>\u274c Never log credential values</li> </ul>"},{"location":"architecture/settings-architecture/#2-setting-access-control","title":"2. Setting Access Control","text":"<ul> <li>\u2705 Some settings cannot be changed via Telegram (credentials)</li> <li>\u2705 Validate all user inputs</li> <li>\u2705 Rate limit setting changes</li> <li>\u274c Don't expose sensitive settings in UI</li> </ul>"},{"location":"architecture/settings-architecture/#3-file-permissions","title":"3. File Permissions","text":"<ul> <li>\u2705 Restrict access to <code>.env</code> file (600)</li> <li>\u2705 Restrict access to user overrides file (600)</li> <li>\u2705 Validate file paths (prevent traversal)</li> </ul>"},{"location":"architecture/settings-architecture/#troubleshooting","title":"Troubleshooting","text":""},{"location":"architecture/settings-architecture/#settings-not-loading","title":"Settings Not Loading","text":"<p>Check loading priority:</p> <pre><code># 1. Check environment variables\necho $AGENT_TYPE\n\n# 2. Check .env file\ncat .env | grep AGENT_TYPE\n\n# 3. Check config.yaml\ngrep AGENT_TYPE config.yaml\n\n# 4. Check default values in code\ngrep \"AGENT_TYPE.*Field\" config/settings.py\n</code></pre>"},{"location":"architecture/settings-architecture/#user-overrides-not-applied","title":"User Overrides Not Applied","text":"<p>Debug steps:</p> <pre><code># Check if override exists\noverrides = settings_manager.list_user_overrides(user_id=123)\nprint(overrides)\n\n# Check merged settings\nall_settings = settings_manager.get_all_user_settings(user_id=123)\nprint(all_settings[\"AGENT_TIMEOUT\"])\n\n# Verify file contents\ncat data/user_settings_overrides.json\n</code></pre>"},{"location":"architecture/settings-architecture/#validation-errors_1","title":"Validation Errors","text":"<p>Enable debug logging:</p> <pre><code>import logging\nlogging.getLogger(\"config.settings\").setLevel(logging.DEBUG)\n\n# Will show detailed validation errors\n</code></pre>"},{"location":"architecture/settings-architecture/#related-documentation","title":"Related Documentation","text":"<ul> <li>Architecture Overview - System-wide architecture</li> <li>User Guide: Settings Management - User-facing settings guide</li> <li>Configuration Reference - Configuration guide</li> <li>Deployment: Configuration - Production configuration</li> </ul>"},{"location":"architecture/storage-paths/","title":"Storage Paths Architecture","text":""},{"location":"architecture/storage-paths/#overview","title":"Overview","text":"<p>The system uses fixed directory paths for storage with strict per-user isolation for memory and shared/user-override pattern for MCP servers.</p>"},{"location":"architecture/storage-paths/#storage-paths","title":"Storage Paths","text":""},{"location":"architecture/storage-paths/#memory-storage-per-user-only","title":"Memory Storage (Per-User Only)","text":"<p>Path: <code>data/memory/user_{user_id}/</code></p> <p>Rules: - \u2705 Each user has isolated memory at <code>data/memory/user_{user_id}/</code> - \u274c NO shared memory - \u274c NO KB-based paths - \u2705 <code>user_id</code> is required for all memory operations</p> <p>Reason: Memory stores results of user actions and must never affect other users.</p> <p>Example: <pre><code>data/memory/\n\u251c\u2500\u2500 user_123/\n\u2502   \u251c\u2500\u2500 memories.json\n\u2502   \u2514\u2500\u2500 vector_store/\n\u2514\u2500\u2500 user_456/\n    \u2514\u2500\u2500 memories.json\n</code></pre></p>"},{"location":"architecture/storage-paths/#mcp-servers-shared-user-override","title":"MCP Servers (Shared + User Override)","text":"<p>Paths: - <code>data/mcp_servers/</code> - Shared servers (available to all users) - <code>data/mcp_servers/user_{user_id}/</code> - User-specific servers (override shared)</p> <p>Rules: - \u2705 Shared MCP servers allowed (tools, not data) - \u2705 User-specific servers override shared servers with same name - \u2705 Registry automatically discovers both levels</p> <p>Reason: MCP servers are tools (like calculator) and can be shared.</p> <p>Example: <pre><code>data/mcp_servers/\n\u251c\u2500\u2500 mem-agent.json              # Shared memory server\n\u251c\u2500\u2500 weather-api.json            # Shared weather tool\n\u2514\u2500\u2500 user_123/                   # User 123's overrides\n    \u2514\u2500\u2500 weather-api.json        # Personal API config\n</code></pre></p>"},{"location":"architecture/storage-paths/#discovery-priority","title":"Discovery Priority","text":""},{"location":"architecture/storage-paths/#mcp-servers","title":"MCP Servers","text":"<pre><code>from src.mcp_registry import MCPServersManager\n\n# Create manager (default: data/mcp_servers/)\nmanager = MCPServersManager()\nmanager.initialize()\n\n# Discovery order:\n# 1. Shared servers in data/mcp_servers/\n# 2. User-specific in data/mcp_servers/user_{user_id}/ (if user_id provided)\n#\n# User-specific servers override shared servers with the same name\n</code></pre>"},{"location":"architecture/storage-paths/#memory-storage","title":"Memory Storage","text":"<pre><code>from config.settings import settings\n\n# Get user's memory directory\nuser_id = 123\nmemory_dir = settings.get_mem_agent_memory_dir(user_id)\n# Returns: Path(\"data/memory/user_123\")\n\n# Ensure directory exists\nsettings.ensure_mem_agent_memory_dir_exists(user_id)\n# Creates: data/memory/user_123/\n</code></pre>"},{"location":"architecture/storage-paths/#usage-in-code","title":"Usage in Code","text":""},{"location":"architecture/storage-paths/#memory-operations","title":"Memory Operations","text":"<pre><code># Memory operations REQUIRE user_id\nfrom src.agents.mcp.memory.memory_server_http import get_storage\n\nuser_id = 123\nstorage = get_storage(user_id)  # \u2705 Creates/gets storage for user 123\n\n# This will raise error:\nstorage = get_storage(None)  # \u274c ValueError: user_id required\n</code></pre>"},{"location":"architecture/storage-paths/#mcp-tool-calls","title":"MCP Tool Calls","text":"<pre><code># All MCP memory tools require user_id parameter\nresult = await mcp_client.call_tool(\n    \"store_memory\",\n    {\n        \"content\": \"Important note\",\n        \"user_id\": 123,  # \u2705 Required\n        \"category\": \"general\"\n    }\n)\n</code></pre>"},{"location":"architecture/storage-paths/#mcp-manager-with-user","title":"MCP Manager with User","text":"<pre><code>from src.mcp_registry import MCPServersManager\n\n# Without user_id (shared servers only)\nmanager = MCPServersManager()\nmanager.initialize()\n# Discovers: data/mcp_servers/\n\n# With user_id (shared + user override)\nmanager = MCPServersManager(user_id=123)\nmanager.initialize()\n# Discovers:\n#   1. data/mcp_servers/\n#   2. data/mcp_servers/user_123/\n</code></pre>"},{"location":"architecture/storage-paths/#configuration","title":"Configuration","text":""},{"location":"architecture/storage-paths/#configyaml","title":"config.yaml","text":"<pre><code># MCP Memory Settings\nAGENT_ENABLE_MCP: true\nAGENT_ENABLE_MCP_MEMORY: true\n\n# Memory storage type\nMEM_AGENT_STORAGE_TYPE: json  # or \"vector\", \"mem-agent\"\n\n# Storage paths (fixed, not configurable):\n# - Memory: data/memory/user_{user_id}/\n# - MCP servers: data/mcp_servers/ and data/mcp_servers/user_{user_id}/\n</code></pre>"},{"location":"architecture/storage-paths/#multi-user-http-server","title":"Multi-User HTTP Server","text":"<p>The MCP memory HTTP server runs in multi-user mode:</p> <pre><code># Start server (no user_id needed)\npython -m src.agents.mcp.memory.memory_server_http --host 127.0.0.1 --port 8765\n</code></pre> <p>How it works: - Single HTTP server handles all users - Each tool call includes <code>user_id</code> parameter - Storage is created on-demand for each user - Storage instances are cached per <code>user_id</code></p>"},{"location":"architecture/storage-paths/#benefits","title":"Benefits","text":"<ol> <li>\u2705 Strict user isolation - No shared memory</li> <li>\u2705 Simple paths - Fixed, no configuration needed</li> <li>\u2705 Security - <code>user_id</code> required, can't access other users' memory</li> <li>\u2705 MCP flexibility - Shared tools + user overrides</li> <li>\u2705 Multi-user server - One HTTP server for all users</li> <li>\u2705 Performance - Storage caching per user</li> </ol>"},{"location":"architecture/storage-paths/#migration-from-old-architecture","title":"Migration from Old Architecture","text":"<p>If you have old per-KB paths, they are no longer supported:</p> <p>Old (REMOVED): <pre><code>\u274c {kb_path}/.mcp_servers/\n\u274c {kb_path}/memory/\n\u274c data/memory/shared/\n</code></pre></p> <p>New (CORRECT): <pre><code>\u2705 data/memory/user_{user_id}/\n\u2705 data/mcp_servers/\n\u2705 data/mcp_servers/user_{user_id}/\n</code></pre></p>"},{"location":"architecture/storage-paths/#see-also","title":"See Also","text":"<ul> <li>Memory Agent Setup - Setting up memory storage</li> <li>MCP Server Registry - Managing MCP servers</li> <li>MCP Tools - Using MCP tools in agents</li> </ul>"},{"location":"deployment/auto-deploy/","title":"Auto-deploy via Git + Docker Compose","text":"<p>This guide shows how to enable automatic deployments on a single Linux host using Git and Docker Compose. It works with cron or systemd timers and focuses on safety: if certain critical files change (e.g., <code>.env</code> or <code>docker-compose.yml</code>), the deployment is blocked to avoid breaking production.</p>"},{"location":"deployment/auto-deploy/#features","title":"Features","text":"<ul> <li>Detects updates in the remote Git branch</li> <li>Blocks deployment if critical files changed (configurable via blocklist)</li> <li>Builds images using one or more Compose files</li> <li>Deploys using <code>docker compose up -d</code> or restarts services</li> <li>Supports logs and a file lock to prevent overlapping runs</li> </ul>"},{"location":"deployment/auto-deploy/#files","title":"Files","text":"<ul> <li><code>scripts/auto_deploy.sh</code> \u2014 main script</li> <li><code>scripts/auto_deploy.conf.example</code> \u2014 example configuration to copy and adjust</li> <li><code>scripts/auto_deploy.blocklist</code> \u2014 default glob patterns treated as critical changes</li> </ul>"},{"location":"deployment/auto-deploy/#install","title":"Install","text":"<ol> <li>Copy the example config and edit paths and options:</li> </ol> <pre><code>cp scripts/auto_deploy.conf.example scripts/auto_deploy.conf\n$EDITOR scripts/auto_deploy.conf\n</code></pre> <ol> <li>Ensure the script is executable:</li> </ol> <pre><code>chmod +x scripts/auto_deploy.sh\n</code></pre> <ol> <li>Make sure the repo is cloned on the host and the configured branch exists (default <code>main</code>).</li> </ol>"},{"location":"deployment/auto-deploy/#configuration","title":"Configuration","text":"<p>The config is bash-sourced by the script. Key options:</p> <ul> <li><code>REPO_DIR</code>: absolute path to your repo clone</li> <li><code>REMOTE</code>, <code>BRANCH</code>: Git remote and branch to track</li> <li><code>AUTO_CHECKOUT</code>: switch to <code>BRANCH</code> automatically if different</li> <li><code>COMPOSE_FILES</code>: one or multiple compose files, colon-separated</li> <li><code>SERVICES</code>: optional space-separated list of services to limit build/deploy</li> <li><code>BUILD_FLAGS</code>: flags for <code>compose build</code> (e.g., <code>--pull</code>, <code>--no-cache</code>)</li> <li><code>DEPLOY_COMMAND</code>: <code>up</code> (default) or <code>restart</code></li> <li><code>UP_FLAGS</code>: flags passed to <code>compose up</code> when <code>DEPLOY_COMMAND=up</code></li> <li><code>PRUNE_AFTER</code>: <code>true</code>/<code>false</code> to prune dangling images after deploy</li> <li><code>CRITICAL_PATHS_FILE</code>: path to blocklist file</li> <li><code>CRITICAL_PATHS</code>: comma-separated glob patterns; complements the file</li> <li><code>LOG_FILE</code>, <code>LOCK_FILE</code>: where to write logs and lock</li> <li><code>COMPOSE_CMD_OVERRIDE</code>: force <code>docker-compose</code> if needed</li> </ul>"},{"location":"deployment/auto-deploy/#safety-critical-changes","title":"Safety: Critical Changes","text":"<p>If any changed file matches the blocklist, deployment is skipped with exit code 10. You can edit <code>scripts/auto_deploy.blocklist</code> or specify extra patterns via <code>CRITICAL_PATHS</code> in the config.</p> <p>Common critical patterns:</p> <ul> <li><code>.env*</code></li> <li><code>config/**</code></li> <li><code>docker-compose*.yml</code></li> <li><code>Dockerfile*</code></li> <li><code>requirements*.txt</code>, <code>pyproject.toml</code>, <code>poetry.lock</code></li> </ul>"},{"location":"deployment/auto-deploy/#cron-setup","title":"Cron Setup","text":"<p>Edit your user crontab with <code>crontab -e</code> and add:</p> <pre><code>*/5 * * * * /bin/bash -lc 'cd /path/to/your/repo &amp;&amp; scripts/auto_deploy.sh -c scripts/auto_deploy.conf &gt;&gt; logs/cron.tail 2&gt;&amp;1'\n</code></pre> <p>This runs every 5 minutes. The script itself writes a detailed log to <code>LOG_FILE</code> (configured), and uses a lock file to prevent overlap.</p>"},{"location":"deployment/auto-deploy/#systemd-timer-alternative","title":"Systemd Timer (alternative)","text":"<p>Create <code>/etc/systemd/system/auto-deploy.service</code>:</p> <pre><code>[Unit]\nDescription=Auto Deploy Service\nAfter=network-online.target docker.service\nWants=network-online.target\n\n[Service]\nType=oneshot\nWorkingDirectory=/path/to/your/repo\nEnvironment=CONFIG_FILE=/path/to/your/repo/scripts/auto_deploy.conf\nExecStart=/bin/bash -lc 'scripts/auto_deploy.sh -c \"$CONFIG_FILE\"'\n</code></pre> <p>Create <code>/etc/systemd/system/auto-deploy.timer</code>:</p> <pre><code>[Unit]\nDescription=Run Auto Deploy every 5 minutes\n\n[Timer]\nOnBootSec=1min\nOnUnitActiveSec=5min\nUnit=auto-deploy.service\n\n[Install]\nWantedBy=timers.target\n</code></pre> <p>Enable and start:</p> <pre><code>sudo systemctl daemon-reload\nsudo systemctl enable --now auto-deploy.timer\n</code></pre>"},{"location":"deployment/auto-deploy/#exit-codes","title":"Exit Codes","text":"<ul> <li><code>0</code>: No changes or deployment completed successfully</li> <li><code>10</code>: Critical change detected, deployment skipped</li> <li><code>1</code>: Error (e.g., unclean working tree, git fetch/pull error, compose missing)</li> </ul>"},{"location":"deployment/auto-deploy/#notes","title":"Notes","text":"<ul> <li>The script expects a clean working tree and a fast-forwardable branch.</li> <li>If the local branch is ahead of remote, the script aborts to avoid force-pushing from automation.</li> <li>For legacy environments without <code>docker compose</code>, set <code>COMPOSE_CMD_OVERRIDE=\"docker-compose\"</code>.</li> </ul>"},{"location":"deployment/cicd/","title":"CI/CD Pipeline","text":"<p>This document describes the continuous integration and deployment pipelines for the tg-note project.</p>"},{"location":"deployment/cicd/#github-actions-workflows","title":"GitHub Actions Workflows","text":""},{"location":"deployment/cicd/#publish-to-pypi","title":"Publish to PyPI","text":"<p>The project uses GitHub Actions to automatically publish releases to PyPI using Trusted Publishing (OIDC authentication).</p> <p>Workflow file: <code>.github/workflows/publish-to-pypi.yml</code></p> <p>Triggers:</p> <ul> <li>When a new release is published on GitHub</li> <li>Manual workflow dispatch</li> </ul> <p>What it does:</p> <ol> <li>Checks out the repository</li> <li>Sets up Python 3.11</li> <li>Installs Poetry and project dependencies</li> <li>Builds the distribution packages</li> <li>Publishes to PyPI using trusted publishing (no API tokens required)</li> </ol> <p>Environment: <code>pypi</code></p> <p>For detailed setup instructions, see PyPI Trusted Publisher Setup.</p>"},{"location":"deployment/cicd/#setting-up-cicd","title":"Setting Up CI/CD","text":""},{"location":"deployment/cicd/#pypi-publishing","title":"PyPI Publishing","text":"<p>To enable automatic publishing to PyPI:</p> <ol> <li>Configure a trusted publisher on PyPI (see setup guide)</li> <li>Create a <code>pypi</code> environment in GitHub repository settings</li> <li>(Optional) Add protection rules to the environment</li> </ol>"},{"location":"deployment/cicd/#creating-a-release","title":"Creating a Release","text":"<p>To trigger a new PyPI release:</p> <ol> <li>Via GitHub UI:</li> <li>Go to Releases \u2192 Draft a new release</li> <li>Create a new tag (e.g., <code>v0.1.0</code>)</li> <li> <p>Publish the release</p> </li> <li> <p>Via Git CLI:</p> </li> </ol> <pre><code>git tag v0.1.0\ngit push origin v0.1.0\n</code></pre> <ol> <li>Via GitHub CLI:</li> </ol> <pre><code>gh release create v0.1.0 --title \"Release v0.1.0\" --notes \"Release notes here\"\n</code></pre> <p>The workflow will automatically build and publish the package to PyPI.</p>"},{"location":"deployment/cicd/#future-improvements","title":"Future Improvements","text":"<p>Potential additions to the CI/CD pipeline:</p> <ul> <li>Automated testing on pull requests</li> <li>Code quality checks (linting, type checking)</li> <li>Documentation deployment</li> <li>Docker image building and publishing</li> <li>Automated changelog generation</li> </ul>"},{"location":"deployment/docker-vector-search/","title":"Docker Compose \u0441 \u0432\u0435\u043a\u0442\u043e\u0440\u043d\u044b\u043c \u043f\u043e\u0438\u0441\u043a\u043e\u043c","text":"<p>\u042d\u0442\u0430 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0441\u0435\u043c\u0430\u043d\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u043f\u043e\u0438\u0441\u043a\u0430 \u0432 \u0431\u0430\u0437\u0443 \u0437\u043d\u0430\u043d\u0438\u0439 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c Qdrant (\u0432\u0435\u043a\u0442\u043e\u0440\u043d\u0430\u044f \u0411\u0414) \u0438 Infinity (\u0441\u0435\u0440\u0432\u0438\u0441 \u044d\u043c\u0431\u0435\u0434\u0434\u0438\u043d\u0433\u043e\u0432).</p>"},{"location":"deployment/docker-vector-search/#_1","title":"\u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Telegram Bot   \u2502\n\u2502  (tg-note-bot)  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502\n         \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   MCP Hub       \u2502\u2500\u2500\u2500\u2500\u2500\u25b6\u2502   Infinity   \u2502\n\u2502  (tg-note-hub)  \u2502      \u2502  (embeddings)\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502\n         \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    Qdrant       \u2502\n\u2502 (vector store)  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"deployment/docker-vector-search/#_2","title":"\u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b","text":""},{"location":"deployment/docker-vector-search/#1-qdrant","title":"1. Qdrant","text":"<p>\u0412\u0435\u043a\u0442\u043e\u0440\u043d\u0430\u044f \u0431\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0438 \u043f\u043e\u0438\u0441\u043a\u0430 \u0432\u0435\u043a\u0442\u043e\u0440\u043d\u044b\u0445 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0430.</p> <ul> <li>Image: <code>qdrant/qdrant:latest</code></li> <li>\u041f\u043e\u0440\u0442\u044b: 6333 (HTTP API), 6334 (gRPC API)</li> <li>\u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435: <code>./data/qdrant_storage</code></li> <li>\u0424\u0443\u043d\u043a\u0446\u0438\u0438:</li> <li>\u0425\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0432\u0435\u043a\u0442\u043e\u0440\u043d\u044b\u0445 \u044d\u043c\u0431\u0435\u0434\u0434\u0438\u043d\u0433\u043e\u0432</li> <li>\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u0441\u0435\u043c\u0430\u043d\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u043c\u0443 \u0441\u0445\u043e\u0434\u0441\u0442\u0432\u0443</li> <li>\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u043c</li> <li>\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0439 (\u043f\u043e \u043e\u0434\u043d\u043e\u0439 \u043d\u0430 \u043a\u0430\u0436\u0434\u0443\u044e \u0431\u0430\u0437\u0443 \u0437\u043d\u0430\u043d\u0438\u0439)</li> </ul>"},{"location":"deployment/docker-vector-search/#2-infinity","title":"2. Infinity","text":"<p>\u0421\u0435\u0440\u0432\u0438\u0441 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u044d\u043c\u0431\u0435\u0434\u0434\u0438\u043d\u0433\u043e\u0432 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0442\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0435\u0440\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439.</p> <ul> <li>Image: <code>michaelf34/infinity:latest</code></li> <li>\u041f\u043e\u0440\u0442: 7997</li> <li>\u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435: <code>./data/infinity_cache</code> (\u043a\u0435\u0448 \u043c\u043e\u0434\u0435\u043b\u0435\u0439)</li> <li>\u0424\u0443\u043d\u043a\u0446\u0438\u0438:</li> <li>\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u0435\u043a\u0441\u0442\u0430 \u0432 \u0432\u0435\u043a\u0442\u043e\u0440\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f</li> <li>\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 HuggingFace</li> <li>\u0411\u0430\u0442\u0447\u0438\u043d\u0433 \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438</li> <li>\u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u0430\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 GPU</li> </ul>"},{"location":"deployment/docker-vector-search/#3-mcp-hub","title":"3. MCP Hub","text":"<p>\u0426\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u044b\u0439 \u0448\u043b\u044e\u0437 \u0441 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0430\u043c\u0438 \u0432\u0435\u043a\u0442\u043e\u0440\u043d\u043e\u0433\u043e \u043f\u043e\u0438\u0441\u043a\u0430.</p> <ul> <li>\u0418\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b:</li> <li><code>vector_search</code> - \u0441\u0435\u043c\u0430\u043d\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u0431\u0430\u0437\u0435 \u0437\u043d\u0430\u043d\u0438\u0439</li> <li><code>reindex_vector</code> - \u043f\u0435\u0440\u0435\u0438\u043d\u0434\u0435\u043a\u0441\u0430\u0446\u0438\u044f \u0431\u0430\u0437\u044b \u0437\u043d\u0430\u043d\u0438\u0439</li> <li>\u041b\u043e\u0433\u0438\u043a\u0430:</li> <li>\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043e\u0442 \u0431\u043e\u0442\u0430</li> <li>\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u044d\u043c\u0431\u0435\u0434\u0434\u0438\u043d\u0433\u0438 \u0447\u0435\u0440\u0435\u0437 Infinity</li> <li>\u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u043f\u043e\u0438\u0441\u043a \u0432 Qdrant</li> <li>\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u043b\u0435\u0432\u0430\u043d\u0442\u043d\u044b\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b</li> </ul>"},{"location":"deployment/docker-vector-search/#4-telegram-bot","title":"4. Telegram Bot","text":"<p>Telegram \u0431\u043e\u0442 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u043c \u0432\u0435\u043a\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438.</p> <ul> <li>\u041b\u043e\u0433\u0438\u043a\u0430:</li> <li>\u0420\u0435\u0448\u0430\u0435\u0442, \u043a\u043e\u0433\u0434\u0430 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u0446\u0438\u044e</li> <li>\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043c\u043e\u043c\u0435\u043d\u0442 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0438\u043d\u0434\u0435\u043a\u0441\u0430</li> <li>\u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u043f\u043e\u0438\u0441\u043a \u0447\u0435\u0440\u0435\u0437 MCP \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b</li> <li>\u041a\u0430\u0436\u0434\u0430\u044f \u0431\u0430\u0437\u0430 \u0437\u043d\u0430\u043d\u0438\u0439 -&gt; \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u0430\u044f \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u0432 Qdrant</li> </ul>"},{"location":"deployment/docker-vector-search/#_3","title":"\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0441\u0442\u0430\u0440\u0442","text":""},{"location":"deployment/docker-vector-search/#1","title":"1. \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430","text":"<pre><code># \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u044b\u0445\nmkdir -p data/qdrant_storage data/infinity_cache data/vector_index\n\n# \u0421\u043a\u043e\u043f\u0438\u0440\u0443\u0439\u0442\u0435 \u0444\u0430\u0439\u043b \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438\ncp config.example.yaml config.yaml\n</code></pre>"},{"location":"deployment/docker-vector-search/#2","title":"2. \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f","text":"<p>\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0438\u043b\u0438 \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u0435 <code>.env</code> \u0444\u0430\u0439\u043b:</p> <pre><code># Telegram Bot\nTELEGRAM_BOT_TOKEN=your_bot_token_here\nALLOWED_USER_IDS=123456789\n\n# Qdrant \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438\nQDRANT_PORT=6333\nQDRANT_GRPC_PORT=6334\nQDRANT_COLLECTION=knowledge_base\n\n# Infinity \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438\nINFINITY_PORT=7997\n# \u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u044d\u043c\u0431\u0435\u0434\u0434\u0438\u043d\u0433\u043e\u0432 (\u0441\u043c. \u0440\u0430\u0437\u0434\u0435\u043b \"\u041c\u043e\u0434\u0435\u043b\u0438\")\nINFINITY_MODEL=BAAI/bge-small-en-v1.5\nINFINITY_BATCH_SIZE=32\n\n# MCP Hub\nMCP_PORT=8765\n</code></pre>"},{"location":"deployment/docker-vector-search/#3-configyaml","title":"3. \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 config.yaml","text":"<p>\u0412\u043a\u043b\u044e\u0447\u0438\u0442\u0435 \u0432\u0435\u043a\u0442\u043e\u0440\u043d\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u0432 <code>config.yaml</code>:</p> <pre><code># \u0412\u0435\u043a\u0442\u043e\u0440\u043d\u044b\u0439 \u043f\u043e\u0438\u0441\u043a\nVECTOR_SEARCH_ENABLED: true\n\n# \u041f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440 \u044d\u043c\u0431\u0435\u0434\u0434\u0438\u043d\u0433\u043e\u0432\nVECTOR_EMBEDDING_PROVIDER: infinity\nVECTOR_EMBEDDING_MODEL: BAAI/bge-small-en-v1.5\nVECTOR_INFINITY_API_URL: http://infinity:7997\n\n# \u0412\u0435\u043a\u0442\u043e\u0440\u043d\u043e\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435\nVECTOR_STORE_PROVIDER: qdrant\nVECTOR_QDRANT_URL: http://qdrant:6333\nVECTOR_QDRANT_COLLECTION: knowledge_base\n\n# \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0447\u0430\u043d\u043a\u0438\u043d\u0433\u0430\nVECTOR_CHUNKING_STRATEGY: fixed_size_overlap\nVECTOR_CHUNK_SIZE: 512\nVECTOR_CHUNK_OVERLAP: 50\n\n# \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u043e\u0438\u0441\u043a\u0430\nVECTOR_SEARCH_TOP_K: 5\n</code></pre>"},{"location":"deployment/docker-vector-search/#4","title":"4. \u0417\u0430\u043f\u0443\u0441\u043a","text":"<pre><code># \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0432\u0441\u0435 \u0441\u0435\u0440\u0432\u0438\u0441\u044b\ndocker-compose -f docker-compose.vector.yml up -d\n\n# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043b\u043e\u0433\u0438\ndocker-compose -f docker-compose.vector.yml logs -f\n\n# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0443\u0441\ndocker-compose -f docker-compose.vector.yml ps\n</code></pre>"},{"location":"deployment/docker-vector-search/#5","title":"5. \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u043e\u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438","text":"<pre><code># \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c Qdrant\ncurl http://localhost:6333/healthz\n\n# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c Infinity\ncurl http://localhost:7997/health\n\n# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c MCP Hub\ncurl http://localhost:8765/health\n</code></pre>"},{"location":"deployment/docker-vector-search/#_4","title":"\u041c\u043e\u0434\u0435\u043b\u0438 \u044d\u043c\u0431\u0435\u0434\u0434\u0438\u043d\u0433\u043e\u0432","text":""},{"location":"deployment/docker-vector-search/#infinity","title":"\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u043c\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f Infinity","text":""},{"location":"deployment/docker-vector-search/#_5","title":"\u0410\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a","text":"\u041c\u043e\u0434\u0435\u043b\u044c \u0420\u0430\u0437\u043c\u0435\u0440 \u041a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0421\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 <code>BAAI/bge-small-en-v1.5</code> 384 dim \u0425\u043e\u0440\u043e\u0448\u0435\u0435 \u26a1\u26a1\u26a1 \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u0431\u044b\u0441\u0442\u0440\u043e <code>BAAI/bge-base-en-v1.5</code> 768 dim \u041e\u0442\u043b\u0438\u0447\u043d\u043e\u0435 \u26a1\u26a1 \u0421\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0432\u044b\u0431\u043e\u0440 <code>BAAI/bge-large-en-v1.5</code> 1024 dim \u041f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u043d\u043e\u0435 \u26a1 \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e <code>sentence-transformers/all-MiniLM-L6-v2</code> 384 dim \u0425\u043e\u0440\u043e\u0448\u0435\u0435 \u26a1\u26a1\u26a1 \u041b\u0435\u0433\u043a\u043e\u0432\u0435\u0441\u043d\u0430\u044f \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u0430"},{"location":"deployment/docker-vector-search/#_6","title":"\u041c\u0443\u043b\u044c\u0442\u0438\u044f\u0437\u044b\u0447\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438","text":"\u041c\u043e\u0434\u0435\u043b\u044c \u0420\u0430\u0437\u043c\u0435\u0440 \u042f\u0437\u044b\u043a\u0438 \u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 <code>BAAI/bge-m3</code> 1024 dim 100+ \u041b\u0443\u0447\u0448\u0438\u0439 \u0432\u044b\u0431\u043e\u0440 \u0434\u043b\u044f \u043c\u0443\u043b\u044c\u0442\u0438\u044f\u0437\u044b\u0447\u043d\u043e\u0441\u0442\u0438 <code>sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2</code> 384 dim 50+ \u041a\u043e\u043c\u043f\u0430\u043a\u0442\u043d\u0430\u044f \u0430\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u0430"},{"location":"deployment/docker-vector-search/#_7","title":"\u0420\u0443\u0441\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a","text":"\u041c\u043e\u0434\u0435\u043b\u044c \u0420\u0430\u0437\u043c\u0435\u0440 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 <code>BAAI/bge-m3</code> 1024 dim \u041e\u0442\u043b\u0438\u0447\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0441 \u0440\u0443\u0441\u0441\u043a\u0438\u043c <code>intfloat/multilingual-e5-large</code> 1024 dim \u0425\u043e\u0440\u043e\u0448\u0435\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043b\u044f \u0440\u0443\u0441\u0441\u043a\u043e\u0433\u043e"},{"location":"deployment/docker-vector-search/#_8","title":"\u0421\u043c\u0435\u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u0438","text":"<p>\u0418\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u043c\u043e\u0436\u043d\u043e \u0432 <code>.env</code>:</p> <pre><code>INFINITY_MODEL=BAAI/bge-m3\n</code></pre> <p>\u041f\u043e\u0441\u043b\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438:</p> <pre><code># \u041f\u0435\u0440\u0435\u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c Infinity \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u043d\u043e\u0432\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438\ndocker-compose -f docker-compose.vector.yml restart infinity\n\n# \u041f\u0435\u0440\u0435\u0438\u043d\u0434\u0435\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0431\u0430\u0437\u0443 \u0437\u043d\u0430\u043d\u0438\u0439 (\u0447\u0435\u0440\u0435\u0437 \u0431\u043e\u0442\u0430 \u0438\u043b\u0438 MCP API)\n</code></pre>"},{"location":"deployment/docker-vector-search/#_9","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435","text":""},{"location":"deployment/docker-vector-search/#telegram","title":"\u0427\u0435\u0440\u0435\u0437 Telegram \u0431\u043e\u0442\u0430","text":"<p>\u0411\u043e\u0442 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0432\u0435\u043a\u0442\u043e\u0440\u043d\u044b\u043c \u043f\u043e\u0438\u0441\u043a\u043e\u043c:</p> <ol> <li>\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u0446\u0438\u044f: \u043f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043d\u043e\u0432\u044b\u0445 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432</li> <li>\u0421\u0435\u043c\u0430\u043d\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043f\u043e\u0438\u0441\u043a: \u0431\u043e\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0432\u0435\u043a\u0442\u043e\u0440\u043d\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u0434\u043b\u044f \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u043d\u0430 \u0432\u043e\u043f\u0440\u043e\u0441\u044b</li> <li>\u041f\u0435\u0440\u0435\u0438\u043d\u0434\u0435\u043a\u0441\u0430\u0446\u0438\u044f: \u0431\u043e\u0442 \u0440\u0435\u0448\u0430\u0435\u0442, \u043a\u043e\u0433\u0434\u0430 \u043d\u0443\u0436\u043d\u043e \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0438\u043d\u0434\u0435\u043a\u0441</li> </ol>"},{"location":"deployment/docker-vector-search/#mcp-api","title":"\u0427\u0435\u0440\u0435\u0437 MCP API","text":""},{"location":"deployment/docker-vector-search/#_10","title":"\u0412\u0435\u043a\u0442\u043e\u0440\u043d\u044b\u0439 \u043f\u043e\u0438\u0441\u043a","text":"<pre><code># \u041f\u043e\u0438\u0441\u043a \u043f\u043e \u0441\u0435\u043c\u0430\u043d\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u043c\u0443 \u0441\u0445\u043e\u0434\u0441\u0442\u0432\u0443\ncurl -X POST http://localhost:8765/tools/vector_search \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"query\": \"\u043a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u044b\u0435 \u0441\u0435\u0442\u0438\",\n    \"top_k\": 5\n  }'\n</code></pre> <p>\u041e\u0442\u0432\u0435\u0442: <pre><code>{\n  \"success\": true,\n  \"query\": \"\u043a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u044b\u0435 \u0441\u0435\u0442\u0438\",\n  \"top_k\": 5,\n  \"results\": [\n    {\n      \"file_path\": \"topics/ml/neural-networks.md\",\n      \"text\": \"\u041d\u0435\u0439\u0440\u043e\u043d\u043d\u044b\u0435 \u0441\u0435\u0442\u0438 - \u044d\u0442\u043e...\",\n      \"score\": 0.89,\n      \"chunk_index\": 0\n    }\n  ],\n  \"results_count\": 5\n}\n</code></pre></p>"},{"location":"deployment/docker-vector-search/#_11","title":"\u041f\u0435\u0440\u0435\u0438\u043d\u0434\u0435\u043a\u0441\u0430\u0446\u0438\u044f","text":"<pre><code># \u041f\u0435\u0440\u0435\u0438\u043d\u0434\u0435\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0431\u0430\u0437\u0443 \u0437\u043d\u0430\u043d\u0438\u0439\ncurl -X POST http://localhost:8765/tools/reindex_vector \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"force\": false\n  }'\n</code></pre> <p>\u041e\u0442\u0432\u0435\u0442: <pre><code>{\n  \"success\": true,\n  \"files_processed\": 42,\n  \"files_skipped\": 5,\n  \"chunks_indexed\": 1234,\n  \"time_elapsed\": \"12.5s\"\n}\n</code></pre></p>"},{"location":"deployment/docker-vector-search/#_12","title":"\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u043c\u0438","text":""},{"location":"deployment/docker-vector-search/#_13","title":"\u0425\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<pre><code>./data/\n\u251c\u2500\u2500 qdrant_storage/     # \u0412\u0435\u043a\u0442\u043e\u0440\u043d\u0430\u044f \u0431\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 Qdrant\n\u251c\u2500\u2500 infinity_cache/     # \u041a\u0435\u0448 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 Infinity\n\u2514\u2500\u2500 vector_index/       # \u041c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u043d\u0434\u0435\u043a\u0441\u0430 (\u0434\u043b\u044f FAISS)\n</code></pre>"},{"location":"deployment/docker-vector-search/#_14","title":"\u041e\u0447\u0438\u0441\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<pre><code># \u041e\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0441\u0435\u0440\u0432\u0438\u0441\u044b\ndocker-compose -f docker-compose.vector.yml down\n\n# \u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0435\u043a\u0442\u043e\u0440\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\nrm -rf data/qdrant_storage/*\nrm -rf data/vector_index/*\n\n# \u041a\u0435\u0448 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u043c\u043e\u0436\u043d\u043e \u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\n# rm -rf data/infinity_cache/*\n\n# \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0437\u0430\u043d\u043e\u0432\u043e\ndocker-compose -f docker-compose.vector.yml up -d\n</code></pre>"},{"location":"deployment/docker-vector-search/#_15","title":"\u0420\u0435\u0437\u0435\u0440\u0432\u043d\u043e\u0435 \u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","text":"<pre><code># \u041e\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c Qdrant \u0434\u043b\u044f \u043a\u043e\u043d\u0441\u0438\u0441\u0442\u0435\u043d\u0442\u043d\u043e\u0433\u043e \u0431\u044d\u043a\u0430\u043f\u0430\ndocker-compose -f docker-compose.vector.yml stop qdrant\n\n# \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0431\u044d\u043a\u0430\u043f\ntar -czf qdrant_backup_$(date +%Y%m%d).tar.gz data/qdrant_storage/\n\n# \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c Qdrant\ndocker-compose -f docker-compose.vector.yml start qdrant\n</code></pre>"},{"location":"deployment/docker-vector-search/#_16","title":"\u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c","text":""},{"location":"deployment/docker-vector-search/#infinity_1","title":"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0431\u0430\u0442\u0447\u0438\u043d\u0433\u0430 Infinity","text":"<pre><code># \u0411\u043e\u043b\u044c\u0448\u0435 = \u0431\u044b\u0441\u0442\u0440\u0435\u0435, \u043d\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u043f\u0430\u043c\u044f\u0442\u0438\nINFINITY_BATCH_SIZE=32  # \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e\n\n# \u0414\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0438\u043b\u0438 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u0438\nINFINITY_BATCH_SIZE=16\n\n# \u0414\u043b\u044f \u043c\u043e\u0449\u043d\u043e\u0433\u043e \u0436\u0435\u043b\u0435\u0437\u0430\nINFINITY_BATCH_SIZE=64\n</code></pre>"},{"location":"deployment/docker-vector-search/#gpu","title":"GPU \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u0435","text":"<p>\u0420\u0430\u0441\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432 <code>docker-compose.vector.yml</code>:</p> <pre><code>infinity:\n  # ...\n  deploy:\n    resources:\n      reservations:\n        devices:\n          - driver: nvidia\n            count: 1\n            capabilities: [gpu]\n</code></pre> <p>\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: - NVIDIA GPU - nvidia-docker \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d - CUDA \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u044b</p>"},{"location":"deployment/docker-vector-search/#_17","title":"\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0447\u0430\u043d\u043a\u043e\u0432","text":"<p>\u0412 <code>config.yaml</code>:</p> <pre><code># \u041c\u0435\u043d\u044c\u0448\u0435 \u0447\u0430\u043d\u043a\u0438 = \u0442\u043e\u0447\u043d\u0435\u0435 \u043f\u043e\u0438\u0441\u043a, \u043d\u043e \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u0435\u0435 \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u0446\u0438\u044f\nVECTOR_CHUNK_SIZE: 256\n\n# \u0411\u043e\u043b\u044c\u0448\u0435 \u0447\u0430\u043d\u043a\u0438 = \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u0446\u0438\u044f, \u043d\u043e \u043c\u0435\u043d\u0435\u0435 \u0442\u043e\u0447\u043d\u044b\u0439 \u043f\u043e\u0438\u0441\u043a\nVECTOR_CHUNK_SIZE: 1024\n\n# \u0421\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 (\u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f)\nVECTOR_CHUNK_SIZE: 512\n</code></pre>"},{"location":"deployment/docker-vector-search/#_18","title":"\u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433","text":""},{"location":"deployment/docker-vector-search/#_19","title":"\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u043b\u043e\u0433\u043e\u0432","text":"<pre><code># \u0412\u0441\u0435 \u0441\u0435\u0440\u0432\u0438\u0441\u044b\ndocker-compose -f docker-compose.vector.yml logs -f\n\n# \u0422\u043e\u043b\u044c\u043a\u043e Qdrant\ndocker-compose -f docker-compose.vector.yml logs -f qdrant\n\n# \u0422\u043e\u043b\u044c\u043a\u043e Infinity\ndocker-compose -f docker-compose.vector.yml logs -f infinity\n\n# \u0422\u043e\u043b\u044c\u043a\u043e MCP Hub\ndocker-compose -f docker-compose.vector.yml logs -f mcp-hub\n</code></pre>"},{"location":"deployment/docker-vector-search/#qdrant","title":"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 Qdrant","text":"<pre><code># \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f\u0445\ncurl http://localhost:6333/collections\n\n# \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u0438\ncurl http://localhost:6333/collections/knowledge_base\n</code></pre>"},{"location":"deployment/docker-vector-search/#infinity_2","title":"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 Infinity","text":"<pre><code># \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438\ncurl http://localhost:7997/models\n\n# \u041f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u044d\u043c\u0431\u0435\u0434\u0434\u0438\u043d\u0433\ncurl -X POST http://localhost:7997/embeddings \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"model\": \"BAAI/bge-small-en-v1.5\",\n    \"input\": [\"test text\"]\n  }'\n</code></pre>"},{"location":"deployment/docker-vector-search/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment/docker-vector-search/#infinity_3","title":"Infinity \u043d\u0435 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f","text":"<p>\u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430: <code>Model download failed</code></p> <p>\u0420\u0435\u0448\u0435\u043d\u0438\u0435: <pre><code># \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043b\u043e\u0433\u0438\ndocker-compose -f docker-compose.vector.yml logs infinity\n\n# \u041e\u0447\u0438\u0441\u0442\u0438\u0442\u044c \u043a\u0435\u0448 \u0438 \u043f\u0435\u0440\u0435\u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c\nrm -rf data/infinity_cache/*\ndocker-compose -f docker-compose.vector.yml restart infinity\n</code></pre></p>"},{"location":"deployment/docker-vector-search/#qdrant_1","title":"Qdrant \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442 \u043c\u043d\u043e\u0433\u043e \u043c\u0435\u0441\u0442\u0430","text":"<p>\u0420\u0435\u0448\u0435\u043d\u0438\u0435: <pre><code># \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0440\u0430\u0437\u043c\u0435\u0440\ndu -sh data/qdrant_storage/\n\n# \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c (\u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0438\u0437 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430 Qdrant)\ndocker exec tg-note-qdrant curl -X POST http://localhost:6333/collections/knowledge_base/optimize\n</code></pre></p>"},{"location":"deployment/docker-vector-search/#_20","title":"\u041c\u0435\u0434\u043b\u0435\u043d\u043d\u0430\u044f \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u0446\u0438\u044f","text":"<p>\u0412\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043f\u0440\u0438\u0447\u0438\u043d\u044b: 1. \u0411\u043e\u043b\u044c\u0448\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u044d\u043c\u0431\u0435\u0434\u0434\u0438\u043d\u0433\u043e\u0432 2. \u041c\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u043e\u0432 3. \u041c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0439 \u0431\u0430\u0442\u0447 \u0440\u0430\u0437\u043c\u0435\u0440</p> <p>\u0420\u0435\u0448\u0435\u043d\u0438\u044f: <pre><code># 1. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u0435\u043d\u044c\u0448\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c\nINFINITY_MODEL=BAAI/bge-small-en-v1.5\n\n# 2. \u0423\u0432\u0435\u043b\u0438\u0447\u0438\u0442\u044c \u0431\u0430\u0442\u0447 \u0440\u0430\u0437\u043c\u0435\u0440\nINFINITY_BATCH_SIZE=64\n\n# 3. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c GPU (\u0441\u043c. \u0440\u0430\u0437\u0434\u0435\u043b \"GPU \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u0435\")\n</code></pre></p>"},{"location":"deployment/docker-vector-search/#vector-search-not-available","title":"Vector search not available","text":"<p>\u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430: \u041e\u0448\u0438\u0431\u043a\u0430 \"Vector search is not available\"</p> <p>\u0420\u0435\u0448\u0435\u043d\u0438\u0435: 1. \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c <code>VECTOR_SEARCH_ENABLED=true</code> \u0432 config.yaml 2. \u0423\u0431\u0435\u0434\u0438\u0442\u044c\u0441\u044f, \u0447\u0442\u043e Qdrant \u0438 Infinity \u0437\u0430\u043f\u0443\u0449\u0435\u043d\u044b 3. \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u0435\u0442\u0435\u0432\u043e\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430\u043c\u0438</p> <pre><code># \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0441\u0435\u0442\u044c\ndocker network inspect tg-note-network\n\n# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u0447\u0442\u043e \u0432\u0441\u0435 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u044b \u0432 \u043e\u0434\u043d\u043e\u0439 \u0441\u0435\u0442\u0438\ndocker-compose -f docker-compose.vector.yml ps\n</code></pre>"},{"location":"deployment/docker-vector-search/#_21","title":"\u041f\u0435\u0440\u0435\u0445\u043e\u0434 \u0441 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438","text":"<p>\u0415\u0441\u043b\u0438 \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438 <code>docker-compose.simple.yml</code>:</p> <pre><code># 1. \u041e\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0438\u0435 \u0441\u0435\u0440\u0432\u0438\u0441\u044b\ndocker-compose -f docker-compose.simple.yml down\n\n# 2. \u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c config.yaml (\u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c VECTOR_SEARCH_ENABLED)\n\n# 3. \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0441 \u0432\u0435\u043a\u0442\u043e\u0440\u043d\u044b\u043c \u043f\u043e\u0438\u0441\u043a\u043e\u043c\ndocker-compose -f docker-compose.vector.yml up -d\n\n# 4. \u0418\u043d\u0434\u0435\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0443\u044e \u0431\u0430\u0437\u0443 \u0437\u043d\u0430\u043d\u0438\u0439\n# (\u0447\u0435\u0440\u0435\u0437 \u0431\u043e\u0442\u0430 \u0438\u043b\u0438 \u0432\u044b\u0437\u0432\u0430\u0442\u044c reindex_vector API)\n</code></pre>"},{"location":"deployment/docker-vector-search/#_22","title":"\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0439 \u0431\u0430\u0437\u043e\u0439 \u0437\u043d\u0430\u043d\u0438\u0439","text":"<p>\u041f\u0440\u0438 \u043f\u0435\u0440\u0432\u043e\u043c \u0437\u0430\u043f\u0443\u0441\u043a\u0435 \u0441 \u0432\u0435\u043a\u0442\u043e\u0440\u043d\u044b\u043c \u043f\u043e\u0438\u0441\u043a\u043e\u043c:</p> <ol> <li>\u0412\u0441\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b \u0431\u0443\u0434\u0443\u0442 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u0440\u043e\u0438\u043d\u0434\u0435\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u044b</li> <li>\u0418\u043d\u0434\u0435\u043a\u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442\u0441\u044f \u0432 Qdrant</li> <li>\u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043d\u043e\u0432\u044b\u0445 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0438\u043d\u0434\u0435\u043a\u0441 \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438</li> </ol>"},{"location":"deployment/docker-vector-search/#_23","title":"\u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c","text":""},{"location":"deployment/docker-vector-search/#qdrant-api-key","title":"Qdrant API Key","text":"<p>\u0414\u043b\u044f \u043f\u0440\u043e\u0434\u0430\u043a\u0448\u0435\u043d\u0430 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e:</p> <pre><code>qdrant:\n  environment:\n    - QDRANT__SERVICE__API_KEY=your-secret-key\n</code></pre> <p>\u0418 \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0432 <code>.env</code>: <pre><code>VECTOR_QDRANT_API_KEY=your-secret-key\n</code></pre></p>"},{"location":"deployment/docker-vector-search/#infinity-api-key","title":"Infinity API Key","text":"<p>\u0415\u0441\u043b\u0438 \u043d\u0443\u0436\u043d\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u0434\u043b\u044f Infinity:</p> <pre><code>infinity:\n  environment:\n    - INFINITY_API_KEY=your-secret-key\n</code></pre> <p>\u0418 \u0432 <code>.env</code>: <pre><code>VECTOR_INFINITY_API_KEY=your-secret-key\n</code></pre></p>"},{"location":"deployment/docker-vector-search/#_24","title":"\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u044b","text":"<ul> <li>Qdrant Documentation</li> <li>Infinity GitHub</li> <li>BGE Models</li> <li>Sentence Transformers</li> </ul>"},{"location":"deployment/docker-vector-search/#aicode-note","title":"AICODE-NOTE","text":"<p>\u041b\u043e\u0433\u0438\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u044b: - Bot \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u043c: \u0440\u0435\u0448\u0430\u0435\u0442 \u043a\u043e\u0433\u0434\u0430 \u0438\u043d\u0434\u0435\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u0442\u044c, \u043a\u043e\u0433\u0434\u0430 \u0438\u0441\u043a\u0430\u0442\u044c - MCP Hub \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b: vector_search, reindex_vector - Qdrant \u0445\u0440\u0430\u043d\u0438\u0442 \u0432\u0435\u043a\u0442\u043e\u0440\u044b: \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u0430\u044f \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0431\u0430\u0437\u044b \u0437\u043d\u0430\u043d\u0438\u0439 - Infinity \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u044d\u043c\u0431\u0435\u0434\u0434\u0438\u043d\u0433\u0438: \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u0442\u0435\u043a\u0441\u0442 \u0432 \u0432\u0435\u043a\u0442\u043e\u0440\u044b</p> <p>\u041a\u0430\u0436\u0434\u0430\u044f \u0431\u0430\u0437\u0430 \u0437\u043d\u0430\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0432\u043e\u044e \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u0432 Qdrant, \u0447\u0442\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u0438\u0437\u043e\u043b\u044f\u0446\u0438\u044e \u0434\u0430\u043d\u043d\u044b\u0445.</p>"},{"location":"deployment/docker/","title":"Docker","text":""},{"location":"deployment/docker/#docker-deployment","title":"Docker Deployment","text":"<p>This project provides ready-to-use Docker images and a compose file to run the bot and the MCP hub. The bot image now includes the Qwen Code CLI, so no extra host setup is required.</p>"},{"location":"deployment/docker/#services","title":"Services","text":"<ul> <li>tg-note-bot: Telegram bot with built-in Qwen Code CLI</li> <li>tg-note-hub: MCP Hub server with lightweight dependencies (memory tools, MCP registry)</li> <li>vllm-server: Optional LLM inference server for mem-agent storage type (vLLM or SGLang)</li> </ul> <p>Architecture: The mem-agent system uses a Docker-first approach. Heavy ML dependencies (transformers, vLLM, MLX) are not installed in the hub or bot containers. Instead, LLM inference is handled by dedicated containers (vLLM/SGLang) or external services (LM Studio).</p>"},{"location":"deployment/docker/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker and Docker Compose</li> <li><code>.env</code> populated with required tokens (e.g. <code>TELEGRAM_BOT_TOKEN</code>)</li> </ul>"},{"location":"deployment/docker/#build-and-run","title":"Build and Run","text":"<pre><code>docker compose up -d --build\n</code></pre>"},{"location":"deployment/docker/#qwen-cli-inside-the-bot","title":"Qwen CLI inside the bot","text":"<ul> <li>The bot image installs Node.js 20 and <code>@qwen-code/qwen-code</code> globally. The <code>qwen</code> binary is available in the container PATH.</li> <li>Qwen authentication and CLI settings are persisted via a bind mount: host <code>~/.qwen</code> -&gt; container <code>/root/.qwen</code>.</li> </ul> <p>Authenticate once inside the running bot container:</p> <pre><code>docker exec -it tg-note-bot bash -lc \"qwen\"\n</code></pre> <p>Follow the OAuth prompts. Then set approval mode for unattended operation:</p> <pre><code>docker exec -it tg-note-bot bash -lc \"qwen &lt;&lt;&lt;'/approval-mode yolo --project'\"\n</code></pre> <p>Notes: - You may choose a less permissive mode like <code>auto-edit</code>, but the bot is designed for fully automated operation and expects no interactive approvals. - If you prefer to authenticate via OpenAI-compatible API instead of OAuth, set <code>OPENAI_API_KEY</code> and <code>OPENAI_BASE_URL</code> in the bot environment.</p>"},{"location":"deployment/docker/#volumes","title":"Volumes","text":"<ul> <li><code>./knowledge_base:/app/knowledge_base</code> \u2014 user notes and files</li> <li><code>./data:/app/data</code> \u2014 processed messages, user settings</li> <li><code>./logs:/app/logs</code> \u2014 logs</li> <li><code>~/.qwen:/root/.qwen</code> \u2014 Qwen CLI auth and settings</li> </ul>"},{"location":"deployment/docker/#health-and-troubleshooting","title":"Health and Troubleshooting","text":"<ul> <li>Verify CLI presence: <code>docker exec tg-note-bot qwen --version</code></li> <li>If CLI says not authenticated, re-run: <code>docker exec -it tg-note-bot qwen</code></li> <li>If approvals block commands, re-apply: <code>docker exec -it tg-note-bot bash -lc \"qwen &lt;&lt;&lt;'/approval-mode yolo --project'\"</code></li> </ul> <p>For more details on the CLI itself, see the agent guide: Qwen Code CLI</p>"},{"location":"deployment/mcp-docker-setup-ru/","title":"MCP setup for containerized deployments","text":"<p>Guide for configuring MCP (Model Context Protocol) servers for Docker deployments.</p>"},{"location":"deployment/mcp-docker-setup-ru/#overview","title":"Overview","text":"<p>When running in Docker, the MCP Hub runs as a separate container (<code>mcp-hub</code>) and interacts with: - Bot container \u2014 Telegram bot with Python MCP clients - Qwen CLI \u2014 runs inside the bot container or on the host - Other LLMs \u2014 local inference backends (vLLM, SGLang, LM Studio, etc.)</p>"},{"location":"deployment/mcp-docker-setup-ru/#architecture","title":"Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Docker environment                                          \u2502\n\u2502                                                             \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                  \u2502\n\u2502  \u2502     Bot      \u2502 HTTP/SSE\u2502   MCP Hub    \u2502                  \u2502\n\u2502  \u2502              \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502     :8765    \u2502                  \u2502\n\u2502  \u2502  - Qwen CLI  \u2502         \u2502               \u2502                  \u2502\n\u2502  \u2502  - Python    \u2502         \u2502  - Memory     \u2502                  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518         \u2502  - Registry   \u2502                  \u2502\n\u2502                           \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                  \u2502\n\u2502                                  \u25b2                          \u2502\n\u2502                                  \u2502                          \u2502\n\u2502                                  \u2502 vLLM/SGLang              \u2502\n\u2502                           \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                  \u2502\n\u2502                           \u2502    vLLM      \u2502                  \u2502\n\u2502                           \u2502   server     \u2502                  \u2502\n\u2502                           \u2502    :8001     \u2502                  \u2502\n\u2502                           \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                  \u25b2\n                                  \u2502 HTTP :8765\n                                  \u2502\n                           \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                           \u2502    Host      \u2502\n                           \u2502   machine    \u2502\n                           \u2502              \u2502\n                           \u2502  - Qwen CLI  \u2502\n                           \u2502  - LM Studio \u2502\n                           \u2502  - Cursor    \u2502\n                           \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"deployment/mcp-docker-setup-ru/#networking","title":"Networking","text":""},{"location":"deployment/mcp-docker-setup-ru/#docker-internal-network","title":"Docker internal network","text":"<p>Services communicate by service names inside Docker Compose network:</p> <pre><code># docker-compose.yml\nservices:\n  mcp-hub:\n    ports:\n      - \"8765:8765\"  # Exposed to host\n\n  bot:\n    environment:\n      - MCP_HUB_URL=http://mcp-hub:8765/sse  # Inside Docker\n</code></pre> <p>Internal URLs: - MCP Hub: <code>http://mcp-hub:8765/sse</code> - vLLM: <code>http://vllm-server:8001</code></p>"},{"location":"deployment/mcp-docker-setup-ru/#access-from-host","title":"Access from host","text":"<p>From host use localhost:</p> <p>Host URLs: - MCP Hub: <code>http://127.0.0.1:8765/sse</code> - vLLM: <code>http://127.0.0.1:8001</code></p>"},{"location":"deployment/mcp-docker-setup-ru/#mcp-configuration-files","title":"MCP configuration files","text":""},{"location":"deployment/mcp-docker-setup-ru/#auto-generated-configurations","title":"Auto-generated configurations","text":"<p>The system automatically generates configurations for different clients:</p> <ol> <li>Qwen CLI \u2014 <code>~/.qwen/settings.json</code></li> <li>Python clients \u2014 <code>data/mcp_servers/mcp-hub.json</code></li> <li>Cursor \u2014 <code>.mcp.json</code> (project root)</li> <li>Claude Desktop \u2014 <code>~/Library/Application Support/Claude/claude_desktop_config.json</code></li> <li>LM Studio \u2014 <code>~/.lmstudio/mcp_config.json</code></li> </ol>"},{"location":"deployment/mcp-docker-setup-ru/#environment-detection","title":"Environment detection","text":"<p>Config generators automatically detect environment:</p> <p>Detection order: 1. Check environment variable <code>MCP_HUB_URL</code> 2. Default to localhost (host environment)</p>"},{"location":"deployment/mcp-docker-setup-ru/#scenarios","title":"Scenarios","text":""},{"location":"deployment/mcp-docker-setup-ru/#1-qwen-cli-in-bot-container","title":"1. Qwen CLI in bot container","text":"<p>When Qwen CLI runs inside the bot container:</p> <p>Environment: <pre><code>MCP_HUB_URL=http://mcp-hub:8765/sse\n</code></pre></p> <p>Generated <code>~/.qwen/settings.json</code>: <pre><code>{\n  \"mcpServers\": {\n    \"mcp-hub\": {\n      \"url\": \"http://mcp-hub:8765/sse\",\n      \"timeout\": 10000,\n      \"trust\": true,\n      \"description\": \"MCP Hub - Unified MCP gateway\"\n    }\n  },\n  \"allowMCPServers\": [\"mcp-hub\"]\n}\n</code></pre></p>"},{"location":"deployment/mcp-docker-setup-ru/#2-qwen-cli-on-host","title":"2. Qwen CLI on host","text":"<p>When Qwen CLI runs on the host:</p> <p>Generated <code>~/.qwen/settings.json</code>: <pre><code>{\n  \"mcpServers\": {\n    \"mcp-hub\": {\n      \"url\": \"http://127.0.0.1:8765/sse\",\n      \"timeout\": 10000,\n      \"trust\": true,\n      \"description\": \"MCP Hub - Unified MCP gateway\"\n    }\n  },\n  \"allowMCPServers\": [\"mcp-hub\"]\n}\n</code></pre></p>"},{"location":"deployment/mcp-docker-setup-ru/#manual-setup","title":"Manual setup","text":""},{"location":"deployment/mcp-docker-setup-ru/#using-universal-configuration-generator","title":"Using universal configuration generator","text":"<p>Generate configurations for all supported clients:</p> <pre><code># Inside container\npython -m src.mcp.universal_config_generator --all\n\n# On host\npython -m src.mcp.universal_config_generator --all --url http://127.0.0.1:8765/sse\n</code></pre> <p>Generate configuration for a specific client:</p> <pre><code># Qwen CLI only\npython -m src.mcp.universal_config_generator --qwen\n\n# Cursor only\npython -m src.mcp.universal_config_generator --cursor\n\n# LM Studio only\npython -m src.mcp.universal_config_generator --lmstudio\n\n# Data directory (Python clients)\npython -m src.mcp.universal_config_generator --data\n</code></pre>"},{"location":"deployment/mcp-docker-setup-ru/#authentication-and-security","title":"Authentication and security","text":""},{"location":"deployment/mcp-docker-setup-ru/#api-keys-in-docker","title":"API keys in Docker","text":"<p>API keys are passed via environment variables and automatically available to Qwen CLI:</p> <pre><code># docker-compose.yml\nservices:\n  bot:\n    environment:\n      - OPENAI_API_KEY=${OPENAI_API_KEY}\n      - OPENAI_BASE_URL=${OPENAI_BASE_URL}\n      - QWEN_API_KEY=${QWEN_API_KEY}\n      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}\n</code></pre>"},{"location":"deployment/mcp-docker-setup-ru/#environment-variables","title":"Environment variables","text":"<p>In <code>.env</code>:</p> <pre><code># API keys\nOPENAI_API_KEY=sk-...\nOPENAI_BASE_URL=https://api.openai.com/v1\nQWEN_API_KEY=...\nANTHROPIC_API_KEY=...\n\n# MCP configuration (optional \u2014 auto-detected if not provided)\nMCP_HUB_URL=http://mcp-hub:8765/sse\n</code></pre>"},{"location":"deployment/mcp-docker-setup-ru/#running-qwen-cli-in-container","title":"Running Qwen CLI in container","text":"<pre><code># Enter bot container\ndocker exec -it tg-note-bot bash\n\n# Qwen CLI will use environment variables automatically\nqwen \"Analyze this code and save insights to memory\"\n\n# MCP Hub available at http://mcp-hub:8765/sse\n</code></pre>"},{"location":"deployment/mcp-docker-setup-ru/#running-qwen-cli-on-host","title":"Running Qwen CLI on host","text":"<p>On host set environment variables:</p> <pre><code># Export API keys\nexport OPENAI_API_KEY=sk-...\nexport OPENAI_BASE_URL=https://api.openai.com/v1\n\n# Run qwen CLI\nqwen \"Analyze this code and save insights to memory\"\n\n# MCP Hub available at http://127.0.0.1:8765/sse\n</code></pre>"},{"location":"deployment/mcp-docker-setup-ru/#auth-updates","title":"Auth updates","text":"<p>When rotating API keys:</p> <ol> <li> <p>Update <code>.env</code>:    <pre><code>vim .env\n# Update OPENAI_API_KEY=...\n</code></pre></p> </li> <li> <p>Restart containers:    <pre><code>docker-compose restart bot\n</code></pre></p> </li> <li> <p>Check MCP health:    <pre><code>curl http://127.0.0.1:8765/health\n</code></pre></p> </li> </ol> <p>No need to regenerate MCP configs \u2014 authentication is handled via environment variables.</p>"},{"location":"deployment/mcp-docker-setup-ru/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment/mcp-docker-setup-ru/#mcp-hub-is-unreachable","title":"MCP Hub is unreachable","text":"<p>From bot container: <pre><code>docker exec -it tg-note-bot bash\ncurl http://mcp-hub:8765/health\n</code></pre></p> <p>From host: <pre><code>curl http://127.0.0.1:8765/health\n</code></pre></p>"},{"location":"deployment/mcp-docker-setup-ru/#inspect-mcp-configuration","title":"Inspect MCP configuration","text":"<p>Qwen CLI config: <pre><code>cat ~/.qwen/settings.json\n</code></pre></p> <p>Python client config: <pre><code>cat data/mcp_servers/mcp-hub.json\n</code></pre></p>"},{"location":"deployment/mcp-docker-setup-ru/#regenerate-configs","title":"Regenerate configs","text":"<p>Inside bot container: <pre><code>docker exec -it tg-note-bot python -m src.mcp.universal_config_generator --all\n</code></pre></p> <p>On host: <pre><code>python -m src.mcp.universal_config_generator --all --url http://127.0.0.1:8765/sse\n</code></pre></p>"},{"location":"deployment/mcp-docker-setup-ru/#logs","title":"Logs","text":"<p>MCP Hub logs: <pre><code>docker logs tg-note-hub\n# or\ntail -f logs/mcp_hub.log\n</code></pre></p> <p>Bot logs: <pre><code>docker logs tg-note-bot\n# or\ntail -f logs/bot.log\n</code></pre></p>"},{"location":"deployment/mcp-docker-setup-ru/#faq","title":"FAQ","text":""},{"location":"deployment/mcp-docker-setup-ru/#what-should-mcp-json-configs-look-like","title":"What should MCP JSON configs look like?","text":"<p>Qwen CLI (<code>~/.qwen/settings.json</code>): <pre><code>{\n  \"mcpServers\": {\n    \"mcp-hub\": {\n      \"url\": \"http://mcp-hub:8765/sse\",  // In Docker\n      // or\n      \"url\": \"http://127.0.0.1:8765/sse\", // On host\n      \"timeout\": 10000,\n      \"trust\": true\n    }\n  },\n  \"allowMCPServers\": [\"mcp-hub\"]\n}\n</code></pre></p> <p>Generic MCP servers (<code>data/mcp_servers/mcp-hub.json</code>): <pre><code>{\n  \"mcpServers\": {\n    \"mcp-hub\": {\n      \"url\": \"http://mcp-hub:8765/sse\",\n      \"timeout\": 10000,\n      \"trust\": true,\n      \"description\": \"MCP Hub - Memory tools\"\n    }\n  }\n}\n</code></pre></p>"},{"location":"deployment/mcp-docker-setup-ru/#how-does-qwen-cli-run-in-containers","title":"How does Qwen CLI run in containers?","text":"<ol> <li>Qwen CLI is installed in bot container (via Dockerfile.bot)</li> <li>Environment variables are passed via docker-compose.yml:    <pre><code>bot:\n  environment:\n    - OPENAI_API_KEY=${OPENAI_API_KEY}\n    - MCP_HUB_URL=http://mcp-hub:8765/sse\n</code></pre></li> <li>MCP config is generated automatically on bot startup</li> <li>Qwen CLI uses generated config from <code>~/.qwen/settings.json</code></li> </ol>"},{"location":"deployment/mcp-docker-setup-ru/#how-does-authentication-work","title":"How does authentication work?","text":"<ol> <li>API keys are stored in <code>.env</code> \u2014 never in MCP configs</li> <li>Docker passes environment variables to containers</li> <li>Qwen CLI reads keys from environment automatically</li> <li>When keys change \u2014 just restart containers, no config changes required</li> </ol>"},{"location":"deployment/mcp-docker-setup-ru/#access-for-other-local-llms","title":"Access for other local LLMs","text":"<p>For other local LLMs (e.g., LM Studio, Ollama with MCP support):</p> <pre><code># Generate configs for all clients\npython -m src.mcp.universal_config_generator --all --url http://127.0.0.1:8765/sse\n\n# Or for a specific client\npython -m src.mcp.universal_config_generator --lmstudio --url http://127.0.0.1:8765/sse\n</code></pre> <p>This creates configuration files with correct URLs for host access.</p>"},{"location":"deployment/mcp-docker-setup-ru/#best-practices","title":"Best practices","text":"<ol> <li>Use environment variables \u2014 store secrets in <code>.env</code>, never in configs</li> <li>Environment detection \u2014 let the system detect Docker vs host</li> <li>Regenerate on deploy \u2014 MCP configs are auto-generated on container start</li> <li>Consistent ports \u2014 keep MCP Hub on port 8765</li> <li>Health checks \u2014 use <code>/health</code> endpoint to verify MCP Hub</li> </ol>"},{"location":"deployment/mcp-docker-setup/","title":"MCP Configuration for Containerized Deployments","text":"<p>This guide explains how to configure MCP (Model Context Protocol) servers for containerized deployments with Docker.</p>"},{"location":"deployment/mcp-docker-setup/#overview","title":"Overview","text":"<p>When running in Docker, MCP Hub is deployed as a separate container (<code>mcp-hub</code>) that communicates with: - Bot container - Main Telegram bot using Python MCP clients - Qwen CLI - Running inside bot container or on host machine - Other LLMs - Locally deployed LLMs (vLLM, SGLang, LM Studio, etc.)</p>"},{"location":"deployment/mcp-docker-setup/#architecture","title":"Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Docker Environment                                          \u2502\n\u2502                                                             \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                \u2502\n\u2502  \u2502  Bot         \u2502 HTTP/SSE\u2502  MCP Hub     \u2502                \u2502\n\u2502  \u2502  Container   \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502  Container   \u2502                \u2502\n\u2502  \u2502              \u2502         \u2502  :8765       \u2502                \u2502\n\u2502  \u2502  - Qwen CLI  \u2502         \u2502              \u2502                \u2502\n\u2502  \u2502  - Python    \u2502         \u2502  - Memory    \u2502                \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518         \u2502  - Registry  \u2502                \u2502\n\u2502                           \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                \u2502\n\u2502                                  \u25b2                          \u2502\n\u2502                                  \u2502                          \u2502\n\u2502                                  \u2502 vLLM/SGLang              \u2502\n\u2502                           \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                \u2502\n\u2502                           \u2502  vLLM        \u2502                \u2502\n\u2502                           \u2502  Server      \u2502                \u2502\n\u2502                           \u2502  :8001       \u2502                \u2502\n\u2502                           \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                  \u25b2\n                                  \u2502 HTTP :8765\n                                  \u2502\n                           \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                           \u2502  Host        \u2502\n                           \u2502  Machine     \u2502\n                           \u2502              \u2502\n                           \u2502  - Qwen CLI  \u2502\n                           \u2502  - LM Studio \u2502\n                           \u2502  - Cursor    \u2502\n                           \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"deployment/mcp-docker-setup/#network-configuration","title":"Network Configuration","text":""},{"location":"deployment/mcp-docker-setup/#docker-internal-network","title":"Docker Internal Network","text":"<p>Services within Docker Compose network communicate using service names:</p> <pre><code># docker-compose.yml\nservices:\n  mcp-hub:\n    ports:\n      - \"8765:8765\"  # Exposed to host\n\n  bot:\n    environment:\n      - MCP_HUB_URL=http://mcp-hub:8765/sse  # Docker internal\n</code></pre> <p>Internal URLs: - MCP Hub: <code>http://mcp-hub:8765/sse</code> - vLLM: <code>http://vllm-server:8001</code></p>"},{"location":"deployment/mcp-docker-setup/#host-machine-access","title":"Host Machine Access","text":"<p>From the host machine, use localhost:</p> <p>Host URLs: - MCP Hub: <code>http://127.0.0.1:8765/sse</code> - vLLM: <code>http://127.0.0.1:8001</code></p>"},{"location":"deployment/mcp-docker-setup/#mcp-configuration-files","title":"MCP Configuration Files","text":""},{"location":"deployment/mcp-docker-setup/#auto-generated-configurations","title":"Auto-Generated Configurations","text":"<p>The system automatically generates MCP configs for different clients:</p> <ol> <li>Qwen CLI - <code>~/.qwen/settings.json</code></li> <li>Python Clients - <code>data/mcp_servers/mcp-hub.json</code></li> <li>Cursor - <code>.mcp.json</code> (project root)</li> <li>Claude Desktop - <code>~/Library/Application Support/Claude/claude_desktop_config.json</code></li> <li>LM Studio - <code>~/.lmstudio/mcp_config.json</code></li> </ol>"},{"location":"deployment/mcp-docker-setup/#environment-detection","title":"Environment Detection","text":"<p>The config generators automatically detect the environment:</p> <pre><code># Auto-detection logic:\n1. Check for /.dockerenv file (Docker container)\n2. Check MCP_HUB_URL environment variable\n3. Check /proc/1/cgroup for docker\n4. Default to localhost (host environment)\n</code></pre>"},{"location":"deployment/mcp-docker-setup/#configuration-for-different-scenarios","title":"Configuration for Different Scenarios","text":""},{"location":"deployment/mcp-docker-setup/#1-qwen-cli-in-bot-container","title":"1. Qwen CLI in Bot Container","text":"<p>When Qwen CLI runs inside the bot container:</p> <p>Environment: <pre><code>MCP_HUB_URL=http://mcp-hub:8765/sse\n</code></pre></p> <p>Generated <code>~/.qwen/settings.json</code>: <pre><code>{\n  \"mcpServers\": {\n    \"mcp-hub\": {\n      \"url\": \"http://mcp-hub:8765/sse\",\n      \"timeout\": 10000,\n      \"trust\": true,\n      \"description\": \"MCP Hub - Unified MCP gateway\"\n    }\n  },\n  \"allowMCPServers\": [\"mcp-hub\"]\n}\n</code></pre></p>"},{"location":"deployment/mcp-docker-setup/#2-qwen-cli-on-host-machine","title":"2. Qwen CLI on Host Machine","text":"<p>When Qwen CLI runs on the host:</p> <p>Generated <code>~/.qwen/settings.json</code>: <pre><code>{\n  \"mcpServers\": {\n    \"mcp-hub\": {\n      \"url\": \"http://127.0.0.1:8765/sse\",\n      \"timeout\": 10000,\n      \"trust\": true,\n      \"description\": \"MCP Hub - Unified MCP gateway\"\n    }\n  },\n  \"allowMCPServers\": [\"mcp-hub\"]\n}\n</code></pre></p>"},{"location":"deployment/mcp-docker-setup/#3-lm-studio-on-host","title":"3. LM Studio on Host","text":"<p>Generated <code>~/.lmstudio/mcp_config.json</code>: <pre><code>{\n  \"mcp_servers\": {\n    \"mcp-hub\": {\n      \"transport\": \"http\",\n      \"url\": \"http://127.0.0.1:8765/sse\",\n      \"timeout\": 10000,\n      \"enabled\": true,\n      \"description\": \"MCP Hub - Memory and tool gateway\"\n    }\n  }\n}\n</code></pre></p>"},{"location":"deployment/mcp-docker-setup/#4-python-mcp-clients","title":"4. Python MCP Clients","text":"<ul> <li>In Docker mode, the bot container no longer creates <code>data/mcp_servers/mcp-hub.json</code>.</li> <li>Python MCP tools use <code>MCP_HUB_URL</code> directly to connect to the hub.</li> <li>The hub container owns and persists registry/config files under <code>data/mcp_servers/</code>.</li> </ul>"},{"location":"deployment/mcp-docker-setup/#manual-configuration","title":"Manual Configuration","text":""},{"location":"deployment/mcp-docker-setup/#using-universal-config-generator","title":"Using Universal Config Generator","text":"<p>Generate configs for all supported clients:</p> <pre><code># Inside container\npython -m src.mcp.universal_config_generator --all\n\n# On host machine\npython -m src.mcp.universal_config_generator --all --url http://127.0.0.1:8765/sse\n</code></pre> <p>Generate config for specific client:</p> <pre><code># Qwen CLI only\npython -m src.mcp.universal_config_generator --qwen\n\n# Cursor only\npython -m src.mcp.universal_config_generator --cursor\n\n# LM Studio only\npython -m src.mcp.universal_config_generator --lmstudio\n\n# Data directory (Python clients)\npython -m src.mcp.universal_config_generator --data\n</code></pre>"},{"location":"deployment/mcp-docker-setup/#using-qwen-config-generator","title":"Using Qwen Config Generator","text":"<p>For Qwen CLI specifically:</p> <pre><code># Auto-detect environment\npython -m src.mcp.qwen_config_generator --http\n\n# Explicit URL for Docker\npython -m src.mcp.qwen_config_generator --http --url http://mcp-hub:8765/sse\n\n# Explicit URL for host\npython -m src.mcp.qwen_config_generator --http --url http://127.0.0.1:8765/sse\n</code></pre>"},{"location":"deployment/mcp-docker-setup/#authentication-and-security","title":"Authentication and Security","text":""},{"location":"deployment/mcp-docker-setup/#api-keys-in-docker","title":"API Keys in Docker","text":"<p>API keys are passed through environment variables and automatically available to Qwen CLI:</p> <pre><code># docker-compose.yml\nservices:\n  bot:\n    environment:\n      - OPENAI_API_KEY=${OPENAI_API_KEY}\n      - OPENAI_BASE_URL=${OPENAI_BASE_URL}\n      - QWEN_API_KEY=${QWEN_API_KEY}\n      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}\n</code></pre>"},{"location":"deployment/mcp-docker-setup/#environment-variables","title":"Environment Variables","text":"<p>In <code>.env</code> file:</p> <pre><code># API Keys\nOPENAI_API_KEY=sk-...\nOPENAI_BASE_URL=https://api.openai.com/v1\nQWEN_API_KEY=...\nANTHROPIC_API_KEY=...\n\n# MCP Configuration (optional - auto-detected if not set)\nMCP_HUB_URL=http://mcp-hub:8765/sse\n</code></pre>"},{"location":"deployment/mcp-docker-setup/#running-qwen-cli-in-container","title":"Running Qwen CLI in Container","text":"<p>Qwen CLI inside the container automatically has access to environment variables:</p> <pre><code># Enter bot container\ndocker exec -it tg-note-bot bash\n\n# Qwen CLI uses environment variables automatically\nqwen \"Analyze this code and store insights in memory\"\n\n# MCP Hub is accessible via http://mcp-hub:8765/sse\n</code></pre>"},{"location":"deployment/mcp-docker-setup/#running-qwen-cli-on-host","title":"Running Qwen CLI on Host","text":"<p>On the host machine, set environment variables:</p> <pre><code># Export API keys\nexport OPENAI_API_KEY=sk-...\nexport OPENAI_BASE_URL=https://api.openai.com/v1\n\n# Run qwen CLI\nqwen \"Analyze this code and store insights in memory\"\n\n# MCP Hub is accessible via http://127.0.0.1:8765/sse\n</code></pre>"},{"location":"deployment/mcp-docker-setup/#updating-authentication","title":"Updating Authentication","text":"<p>When API keys are rotated:</p> <ol> <li> <p>Update <code>.env</code> file: <pre><code>vim .env\n# Update OPENAI_API_KEY=...\n</code></pre></p> </li> <li> <p>Restart containers: <pre><code>docker-compose restart bot\n</code></pre></p> </li> <li> <p>Verify MCP access: <pre><code>curl http://127.0.0.1:8765/health\n</code></pre></p> </li> </ol> <p>No need to regenerate MCP configs - authentication is handled separately via environment variables.</p>"},{"location":"deployment/mcp-docker-setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment/mcp-docker-setup/#mcp-hub-not-accessible","title":"MCP Hub Not Accessible","text":"<p>From bot container: <pre><code>docker exec -it tg-note-bot bash\ncurl http://mcp-hub:8765/health\n</code></pre></p> <p>From host: <pre><code>curl http://127.0.0.1:8765/health\n</code></pre></p>"},{"location":"deployment/mcp-docker-setup/#check-mcp-configuration","title":"Check MCP Configuration","text":"<p>Qwen CLI config: <pre><code>cat ~/.qwen/settings.json\n</code></pre></p> <p>Python clients config: <pre><code>cat data/mcp_servers/mcp-hub.json\n</code></pre></p>"},{"location":"deployment/mcp-docker-setup/#regenerate-configurations","title":"Regenerate Configurations","text":"<ul> <li>Config regeneration should be performed in the hub container (owner of configs):</li> </ul> <pre><code>docker exec -it tg-note-hub python -m src.mcp.universal_config_generator --all\n</code></pre> <p>On host: <pre><code>python -m src.mcp.universal_config_generator --all --url http://127.0.0.1:8765/sse\n</code></pre></p>"},{"location":"deployment/mcp-docker-setup/#check-logs","title":"Check Logs","text":"<p>MCP Hub logs: <pre><code>docker logs tg-note-hub\n# or\ntail -f logs/mcp_hub.log\n</code></pre></p> <p>Bot logs: <pre><code>docker logs tg-note-bot\n# or\ntail -f logs/bot.log\n</code></pre></p>"},{"location":"deployment/mcp-docker-setup/#best-practices","title":"Best Practices","text":"<ol> <li>Use Environment Variables - Store all secrets in <code>.env</code>, never in config files</li> <li>Auto-Detection - Let the system auto-detect Docker vs host environment</li> <li>Regenerate on Deploy - MCP configs are auto-generated on container startup</li> <li>Port Consistency - Keep MCP Hub on port 8765 for consistency</li> <li>Health Checks - Use <code>/health</code> endpoint to verify MCP Hub is running</li> <li>Container Names - Use consistent service names in docker-compose.yml</li> </ol>"},{"location":"deployment/mcp-docker-setup/#references","title":"References","text":"<ul> <li>MCP Configuration Format</li> <li>MCP Tools Documentation</li> <li>Qwen CLI Documentation</li> <li>Docker Deployment</li> </ul>"},{"location":"deployment/overview/","title":"Deployment Overview","text":"<p>This section provides a high-level overview of deployment options for tg-note.</p>"},{"location":"deployment/overview/#options","title":"Options","text":"<ul> <li>Docker Compose (recommended): full stack with bot and MCP Hub.</li> <li>Vector Search stack: adds Qdrant and Infinity for semantic search.</li> <li>Bare metal (advanced): run services directly on the host.</li> </ul>"},{"location":"deployment/overview/#quick-links","title":"Quick Links","text":"<ul> <li>Docker Deployment</li> <li>Vector Search Stack</li> <li>Production Checklist</li> </ul>"},{"location":"deployment/production/","title":"Production Checklist","text":"<p>Use this checklist to deploy tg-note to production reliably.</p>"},{"location":"deployment/production/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker and Docker Compose installed</li> <li>Git repository prepared for your knowledge base</li> <li><code>.env</code> populated (at minimum <code>TELEGRAM_BOT_TOKEN</code>)</li> </ul>"},{"location":"deployment/production/#steps","title":"Steps","text":"<ol> <li>Build and start services:    <pre><code>docker compose up -d --build\n</code></pre></li> <li>Authenticate Qwen CLI inside the bot container (if using <code>qwen_code_cli</code>):    <pre><code>docker exec -it tg-note-bot bash -lc \"qwen\"\ndocker exec -it tg-note-bot bash -lc \"qwen &lt;&lt;&lt;'/approval-mode yolo --project'\"\n</code></pre></li> <li>Validate health:    <pre><code>docker ps\ndocker logs -f tg-note-bot\ncurl http://localhost:8765/health\n</code></pre></li> </ol>"},{"location":"deployment/production/#hardening","title":"Hardening","text":"<ul> <li>Set <code>ALLOWED_USER_IDS</code> to restrict access</li> <li>Rotate API keys regularly</li> <li>Configure log rotation on host</li> <li>For vector search with Qdrant, set API keys (see vector guide)</li> </ul>"},{"location":"deployment/production/#operations","title":"Operations","text":"<ul> <li>Update:   <pre><code>git pull &amp;&amp; docker compose build --no-cache &amp;&amp; docker compose up -d\n</code></pre></li> <li>Backup knowledge base and data directories regularly</li> </ul>"},{"location":"deployment/production/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Check bot logs: <code>docker logs -f tg-note-bot</code></li> <li>Check MCP Hub health: <code>curl http://localhost:8765/health</code></li> <li>Verify <code>.env</code> and <code>config.yaml</code> are mounted as expected</li> </ul>"},{"location":"deployment/pypi-trusted-publisher-setup/","title":"PyPI Trusted Publisher Setup","text":"<p>This guide explains how to configure PyPI Trusted Publishing for the <code>tg-note</code> package.</p>"},{"location":"deployment/pypi-trusted-publisher-setup/#what-is-trusted-publishing","title":"What is Trusted Publishing?","text":"<p>Trusted Publishing is a secure authentication method that allows GitHub Actions to publish packages to PyPI without using API tokens. It uses OpenID Connect (OIDC) to verify the identity of the publisher.</p>"},{"location":"deployment/pypi-trusted-publisher-setup/#prerequisites","title":"Prerequisites","text":"<ol> <li>A PyPI account with permissions to manage the <code>tg-note</code> package</li> <li>The package must either already exist on PyPI or you need permission to register it</li> </ol>"},{"location":"deployment/pypi-trusted-publisher-setup/#configuration-steps","title":"Configuration Steps","text":""},{"location":"deployment/pypi-trusted-publisher-setup/#step-1-access-pypi-trusted-publisher-settings","title":"Step 1: Access PyPI Trusted Publisher Settings","text":"<ol> <li>Go to PyPI and log in</li> <li>Navigate to your account settings</li> <li>Go to \"Publishing\" section</li> </ol>"},{"location":"deployment/pypi-trusted-publisher-setup/#step-2-add-a-new-trusted-publisher","title":"Step 2: Add a New Trusted Publisher","text":"<p>Choose one of these options:</p>"},{"location":"deployment/pypi-trusted-publisher-setup/#option-a-for-an-existing-package","title":"Option A: For an Existing Package","text":"<ol> <li>Go to your package page: https://pypi.org/manage/project/tg-note/settings/</li> <li>Scroll to \"Publishing\" section</li> <li>Click \"Add a new publisher\"</li> </ol>"},{"location":"deployment/pypi-trusted-publisher-setup/#option-b-for-a-new-package-pending-publisher","title":"Option B: For a New Package (Pending Publisher)","text":"<ol> <li>Go to: https://pypi.org/manage/account/publishing/</li> <li>Click \"Add a pending publisher\"</li> <li>This allows you to configure the trusted publisher before the first release</li> </ol>"},{"location":"deployment/pypi-trusted-publisher-setup/#step-3-configure-the-publisher","title":"Step 3: Configure the Publisher","text":"<p>Fill in the following details exactly as shown:</p> Field Value PyPI Project Name <code>tg-note</code> Owner <code>ArtyomZemlyak</code> Repository name <code>tg-note</code> Workflow name <code>publish-to-pypi.yml</code> Environment name <code>pypi</code>"},{"location":"deployment/pypi-trusted-publisher-setup/#step-4-verify-configuration","title":"Step 4: Verify Configuration","text":"<p>After adding the publisher, verify the configuration matches these claims:</p> <pre><code>repository: ArtyomZemlyak/tg-note\nworkflow_ref: ArtyomZemlyak/tg-note/.github/workflows/publish-to-pypi.yml@refs/tags/v*\nenvironment: pypi\n</code></pre>"},{"location":"deployment/pypi-trusted-publisher-setup/#step-5-create-github-environment","title":"Step 5: Create GitHub Environment","text":"<ol> <li>Go to your GitHub repository: https://github.com/ArtyomZemlyak/tg-note</li> <li>Navigate to Settings \u2192 Environments</li> <li>Click \"New environment\"</li> <li>Name it <code>pypi</code></li> <li>(Optional) Add protection rules:</li> <li>Require reviewers before deployment</li> <li>Restrict to specific branches (e.g., only tags matching <code>v*</code>)</li> </ol>"},{"location":"deployment/pypi-trusted-publisher-setup/#testing-the-configuration","title":"Testing the Configuration","text":""},{"location":"deployment/pypi-trusted-publisher-setup/#create-a-test-release","title":"Create a Test Release","text":"<pre><code># Create and push a new tag\ngit tag v0.0.2\ngit push origin v0.0.2\n</code></pre> <p>Or create a release through the GitHub UI:</p> <ol> <li>Go to Releases</li> <li>Click \"Draft a new release\"</li> <li>Create a new tag (e.g., <code>v0.0.2</code>)</li> <li>Publish the release</li> </ol> <p>The workflow will automatically trigger and publish to PyPI using trusted publishing.</p>"},{"location":"deployment/pypi-trusted-publisher-setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment/pypi-trusted-publisher-setup/#error-invalid-publisher-valid-token-but-no-corresponding-publisher","title":"Error: \"invalid-publisher: valid token, but no corresponding publisher\"","text":"<p>This means the configuration on PyPI doesn't match the claims being sent. Verify:</p> <ol> <li>Package name matches exactly: <code>tg-note</code></li> <li>Repository is correct: <code>ArtyomZemlyak/tg-note</code></li> <li>Workflow file path is exact: <code>publish-to-pypi.yml</code> (not <code>.github/workflows/publish-to-pypi.yml</code>)</li> <li>Environment name matches: <code>pypi</code></li> <li>The trusted publisher is active (not expired or disabled)</li> </ol>"},{"location":"deployment/pypi-trusted-publisher-setup/#error-environment-not-found","title":"Error: \"environment-not-found\"","text":"<p>Create the <code>pypi</code> environment in your GitHub repository settings.</p>"},{"location":"deployment/pypi-trusted-publisher-setup/#error-workflow-not-found","title":"Error: \"workflow-not-found\"","text":"<p>Ensure the workflow file exists at <code>.github/workflows/publish-to-pypi.yml</code> in your repository.</p>"},{"location":"deployment/pypi-trusted-publisher-setup/#security-best-practices","title":"Security Best Practices","text":"<ol> <li>Use environments: Always specify an environment for publishing workflows</li> <li>Add protection rules: Require reviews for deployments to the <code>pypi</code> environment</li> <li>Limit workflow permissions: The workflow only requests <code>id-token: write</code> permission</li> <li>Monitor releases: Regularly check your PyPI package for unexpected uploads</li> </ol>"},{"location":"deployment/pypi-trusted-publisher-setup/#manual-workflow-trigger","title":"Manual Workflow Trigger","text":"<p>You can also manually trigger the workflow:</p> <pre><code># Through GitHub CLI\ngh workflow run publish-to-pypi.yml\n\n# Or through the GitHub UI\n# Go to Actions \u2192 Publish to PyPI \u2192 Run workflow\n</code></pre>"},{"location":"deployment/pypi-trusted-publisher-setup/#references","title":"References","text":"<ul> <li>PyPI Trusted Publishers Documentation</li> <li>PyPI Trusted Publishers Troubleshooting</li> <li>GitHub Actions OIDC Documentation</li> </ul>"},{"location":"development/code-quality/","title":"Coming Soon","text":"<p>This documentation page is under construction.</p> <p>For now, please refer to the README or check back later.</p>"},{"location":"development/contributing/","title":"Coming Soon","text":"<p>This documentation page is under construction.</p> <p>For now, please refer to the README or check back later.</p>"},{"location":"development/overview/","title":"Coming Soon","text":"<p>This documentation page is under construction.</p> <p>For now, please refer to the README or check back later.</p>"},{"location":"development/project-structure/","title":"Coming Soon","text":"<p>This documentation page is under construction.</p> <p>For now, please refer to the README or check back later.</p>"},{"location":"development/testing/","title":"Running Tests","text":""},{"location":"development/testing/#running-the-test-suite","title":"Running the test suite","text":"<p>The project uses pytest with configuration in <code>pytest.ini</code> and <code>pyproject.toml</code>.</p> <p>Basic commands:</p> <pre><code># Install dev dependencies\npip install -e \".[dev]\"\n\n# Run all tests (works even if pytest executable isn't on PATH)\npython -m pytest\n\n# With coverage\npython -m pytest --cov=src --cov=config --cov-report=term-missing\n</code></pre>"},{"location":"development/testing/#notes-on-settings-precedence","title":"Notes on settings precedence","text":"<p><code>config.settings.Settings</code> now prioritizes explicit constructor arguments over environment/YAML sources. This makes tests like creating <code>Settings(MEDIA_PROCESSING_ENABLED=False)</code> deterministic. Environment variables can still override YAML; see <code>config/settings.py</code> for details.</p>"},{"location":"development/testing/#message-grouping-in-tests","title":"Message grouping in tests","text":"<p><code>MessageGroup</code> does not accept a <code>messages</code> constructor argument. To build a group in tests, instantiate and add messages:</p> <pre><code>from src.processor.message_aggregator import MessageGroup\n\ngroup = MessageGroup()\ngroup.add_message({\"message_id\": 1, \"date\": 1234567890, \"text\": \"Task\", \"chat_id\": 123})\n</code></pre>"},{"location":"development/testing/#git-https-credentials","title":"Git HTTPS credentials","text":"<p><code>GitOperations._configure_https_credentials()</code> is idempotent to avoid double <code>set_url</code> calls when invoked multiple times during tests or initialization.</p>"},{"location":"getting-started/configuration/","title":"Configuration Guide","text":"<p>Complete guide to configuring tg-note.</p>"},{"location":"getting-started/configuration/#configuration-sources","title":"Configuration Sources","text":"<p>tg-note supports multiple configuration sources with the following priority (highest to lowest):</p> <ol> <li>Environment Variables - Highest priority</li> <li><code>.env</code> file - For credentials and overrides</li> <li><code>config.yaml</code> - Base configuration</li> <li>Default values - Built-in defaults</li> </ol> <p>Best Practice</p> <ul> <li>Store sensitive data (tokens, API keys) in <code>.env</code></li> <li>Store general settings in <code>config.yaml</code></li> <li>Use environment variables for deployment overrides</li> </ul>"},{"location":"getting-started/configuration/#configuration-files","title":"Configuration Files","text":""},{"location":"getting-started/configuration/#configyaml","title":"config.yaml","text":"<p>Main configuration file for non-sensitive settings.</p> <pre><code># Knowledge Base Settings\nKB_PATH: ./knowledge_base\nKB_GIT_ENABLED: true\nKB_GIT_AUTO_PUSH: true\nKB_GIT_REMOTE: origin\nKB_GIT_BRANCH: main\n\n# Agent Configuration\nAGENT_TYPE: \"qwen_code_cli\"  # stub, autonomous, qwen_code_cli\nAGENT_MODEL: \"qwen-max\"\nAGENT_TIMEOUT: 300\nAGENT_ENABLE_WEB_SEARCH: true\nAGENT_ENABLE_GIT: true\nAGENT_ENABLE_GITHUB: true\nAGENT_ENABLE_SHELL: false\n\n# Processing Settings\nMESSAGE_GROUP_TIMEOUT: 30\nPROCESSED_LOG_PATH: ./data/processed.json\n\n# Logging Settings\nLOG_LEVEL: INFO  # DEBUG, INFO, WARNING, ERROR, CRITICAL\nLOG_FILE: ./logs/bot.log\n\n# Security\n# Accepts empty (allow all), comma-separated (e.g., \"123,456\"), or JSON list (e.g., [123,456])\nALLOWED_USER_IDS: \"\"  # Empty = all allowed\n</code></pre>"},{"location":"getting-started/configuration/#env-file","title":".env File","text":"<p>Credentials and sensitive data (never commit to git!).</p> <pre><code># Required\nTELEGRAM_BOT_TOKEN=your_bot_token_here\n\n# Optional API Keys\nOPENAI_API_KEY=sk-...\nOPENAI_BASE_URL=https://api.openai.com/v1  # Optional, for custom endpoints\nANTHROPIC_API_KEY=sk-ant-...\nQWEN_API_KEY=your_qwen_key\n\n# GitHub Integration\nGITHUB_TOKEN=ghp_...\n</code></pre>"},{"location":"getting-started/configuration/#configuration-options","title":"Configuration Options","text":""},{"location":"getting-started/configuration/#knowledge-base-settings","title":"Knowledge Base Settings","text":""},{"location":"getting-started/configuration/#kb_path","title":"KB_PATH","text":"<ul> <li>Type: Path</li> <li>Default: <code>./knowledge_base</code></li> <li>Description: Path to your knowledge base directory</li> <li>Example: <code>/path/to/my-kb</code></li> </ul>"},{"location":"getting-started/configuration/#kb_git_enabled","title":"KB_GIT_ENABLED","text":"<ul> <li>Type: Boolean</li> <li>Default: <code>true</code></li> <li>Description: Enable Git operations</li> <li>Example: <code>true</code> or <code>false</code></li> </ul>"},{"location":"getting-started/configuration/#kb_git_auto_push","title":"KB_GIT_AUTO_PUSH","text":"<ul> <li>Type: Boolean</li> <li>Default: <code>true</code></li> <li>Description: Automatically push changes to remote</li> <li>Example: <code>true</code> or <code>false</code></li> </ul>"},{"location":"getting-started/configuration/#kb_git_remote","title":"KB_GIT_REMOTE","text":"<ul> <li>Type: String</li> <li>Default: <code>origin</code></li> <li>Description: Git remote name</li> <li>Example: <code>origin</code></li> </ul>"},{"location":"getting-started/configuration/#kb_git_branch","title":"KB_GIT_BRANCH","text":"<ul> <li>Type: String</li> <li>Default: <code>main</code></li> <li>Description: Git branch to use</li> <li>Example: <code>main</code> or <code>master</code></li> </ul>"},{"location":"getting-started/configuration/#agent-settings","title":"Agent Settings","text":""},{"location":"getting-started/configuration/#agent_type","title":"AGENT_TYPE","text":"<ul> <li>Type: String</li> <li>Default: <code>stub</code></li> <li>Options: <code>stub</code>, <code>autonomous</code>, <code>qwen_code_cli</code></li> <li>Description: Agent implementation to use</li> <li>Recommendation: Use <code>qwen_code_cli</code> for production, or <code>autonomous</code> for OpenAI-compatible APIs</li> </ul>"},{"location":"getting-started/configuration/#agent_model","title":"AGENT_MODEL","text":"<ul> <li>Type: String</li> <li>Default: <code>qwen-max</code></li> <li>Description: AI model to use</li> <li>Examples: <code>qwen-max</code>, <code>qwen-turbo</code>, <code>gpt-4</code></li> </ul>"},{"location":"getting-started/configuration/#agent_qwen_cli_path","title":"AGENT_QWEN_CLI_PATH","text":"<ul> <li>Type: String</li> <li>Default: <code>qwen</code></li> <li>Description: Path to qwen CLI executable</li> <li>Examples: <code>qwen</code>, <code>/usr/local/bin/qwen</code>, <code>./bin/qwen</code></li> </ul>"},{"location":"getting-started/configuration/#agent_instruction","title":"AGENT_INSTRUCTION","text":"<ul> <li>Type: String (Optional)</li> <li>Default: <code>None</code></li> <li>Description: Custom instruction for the agent</li> <li>Example: <code>\"Always be concise and use bullet points\"</code></li> </ul>"},{"location":"getting-started/configuration/#agent_timeout","title":"AGENT_TIMEOUT","text":"<ul> <li>Type: Integer (seconds)</li> <li>Default: <code>300</code></li> <li>Description: Maximum time for agent processing</li> <li>Example: <code>600</code> (10 minutes)</li> </ul>"},{"location":"getting-started/configuration/#agent_enable_web_search","title":"AGENT_ENABLE_WEB_SEARCH","text":"<ul> <li>Type: Boolean</li> <li>Default: <code>true</code></li> <li>Description: Allow web search capability</li> <li>Example: <code>true</code> or <code>false</code></li> </ul>"},{"location":"getting-started/configuration/#agent_enable_git","title":"AGENT_ENABLE_GIT","text":"<ul> <li>Type: Boolean</li> <li>Default: <code>true</code></li> <li>Description: Allow Git operations</li> <li>Example: <code>true</code> or <code>false</code></li> </ul>"},{"location":"getting-started/configuration/#agent_enable_github","title":"AGENT_ENABLE_GITHUB","text":"<ul> <li>Type: Boolean</li> <li>Default: <code>true</code></li> <li>Description: Allow GitHub API access</li> <li>Example: <code>true</code> or <code>false</code></li> </ul>"},{"location":"getting-started/configuration/#agent_enable_shell","title":"AGENT_ENABLE_SHELL","text":"<ul> <li>Type: Boolean</li> <li>Default: <code>false</code></li> <li>Description: Allow shell command execution</li> <li>Warning: \u26a0\ufe0f Security risk, use with caution</li> <li>Example: <code>false</code></li> </ul>"},{"location":"getting-started/configuration/#agent_enable_file_management","title":"AGENT_ENABLE_FILE_MANAGEMENT","text":"<ul> <li>Type: Boolean</li> <li>Default: <code>true</code></li> <li>Description: Enable file operations (create, edit, delete, move files)</li> <li>Example: <code>true</code> or <code>false</code></li> </ul>"},{"location":"getting-started/configuration/#agent_enable_folder_management","title":"AGENT_ENABLE_FOLDER_MANAGEMENT","text":"<ul> <li>Type: Boolean</li> <li>Default: <code>true</code></li> <li>Description: Enable folder operations (create, delete, move folders)</li> <li>Example: <code>true</code> or <code>false</code></li> </ul>"},{"location":"getting-started/configuration/#processing-settings","title":"Processing Settings","text":""},{"location":"getting-started/configuration/#message_group_timeout","title":"MESSAGE_GROUP_TIMEOUT","text":"<ul> <li>Type: Integer (seconds)</li> <li>Default: <code>30</code></li> <li>Description: Wait time before processing grouped messages</li> <li>Example: <code>60</code> (1 minute)</li> </ul>"},{"location":"getting-started/configuration/#processed_log_path","title":"PROCESSED_LOG_PATH","text":"<ul> <li>Type: Path</li> <li>Default: <code>./data/processed.json</code></li> <li>Description: Path to processing tracker database</li> <li>Example: <code>./data/tracker.json</code></li> </ul>"},{"location":"getting-started/configuration/#logging-settings","title":"Logging Settings","text":""},{"location":"getting-started/configuration/#log_level","title":"LOG_LEVEL","text":"<ul> <li>Type: String</li> <li>Default: <code>INFO</code></li> <li>Options: <code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code>, <code>CRITICAL</code></li> <li>Description: Logging verbosity level</li> <li>Example: <code>DEBUG</code> for development</li> </ul>"},{"location":"getting-started/configuration/#log_file","title":"LOG_FILE","text":"<ul> <li>Type: Path</li> <li>Default: <code>./logs/bot.log</code></li> <li>Description: Path to log file</li> <li>Example: <code>./logs/tg-note.log</code></li> </ul>"},{"location":"getting-started/configuration/#security-settings","title":"Security Settings","text":""},{"location":"getting-started/configuration/#telegram_bot_token","title":"TELEGRAM_BOT_TOKEN","text":"<ul> <li>Type: String (Secret)</li> <li>Required: Yes</li> <li>Source: <code>.env</code> or environment variable only</li> <li>Description: Telegram bot authentication token</li> <li>Example: <code>1234567890:ABCdefGHIjklMNOpqrsTUVwxyz</code></li> </ul>"},{"location":"getting-started/configuration/#allowed_user_ids","title":"ALLOWED_USER_IDS","text":"<ul> <li>Type: List[int] (from env supports: empty, comma-separated, or JSON list)</li> <li>Default: <code>[]</code> (all users allowed)</li> <li>Description: Whitelist of allowed Telegram user IDs</li> <li>Examples: <code>\"12345678,87654321\"</code> or <code>[12345678, 87654321]</code></li> </ul>"},{"location":"getting-started/configuration/#openai_api_key","title":"OPENAI_API_KEY","text":"<ul> <li>Type: String (Secret)</li> <li>Required: No</li> <li>Source: <code>.env</code> or environment variable only</li> <li>Description: OpenAI API key for autonomous agent</li> <li>Example: <code>sk-...</code></li> </ul>"},{"location":"getting-started/configuration/#openai_base_url","title":"OPENAI_BASE_URL","text":"<ul> <li>Type: String (Secret)</li> <li>Required: No</li> <li>Source: <code>.env</code> or environment variable only</li> <li>Description: OpenAI API base URL for custom endpoints</li> <li>Example: <code>https://api.openai.com/v1</code></li> </ul>"},{"location":"getting-started/configuration/#qwen_api_key","title":"QWEN_API_KEY","text":"<ul> <li>Type: String (Secret)</li> <li>Required: No</li> <li>Source: <code>.env</code> or environment variable only</li> <li>Description: Qwen API key (for custom integrations)</li> <li>Example: <code>your_qwen_key</code></li> </ul>"},{"location":"getting-started/configuration/#anthropic_api_key","title":"ANTHROPIC_API_KEY","text":"<ul> <li>Type: String (Secret)</li> <li>Required: No</li> <li>Source: <code>.env</code> or environment variable only</li> <li>Description: Anthropic API key (future use)</li> <li>Example: <code>sk-ant-...</code></li> </ul>"},{"location":"getting-started/configuration/#github_token","title":"GITHUB_TOKEN","text":"<ul> <li>Type: String (Secret)</li> <li>Required: No</li> <li>Source: <code>.env</code> or environment variable only</li> <li>Description: GitHub personal access token for API operations</li> <li>Example: <code>ghp_...</code></li> </ul>"},{"location":"getting-started/configuration/#configuration-examples","title":"Configuration Examples","text":""},{"location":"getting-started/configuration/#development-setup","title":"Development Setup","text":"config.yaml<pre><code># Development configuration\nKB_PATH: ./dev-kb\nKB_GIT_ENABLED: true\nKB_GIT_AUTO_PUSH: false  # Manual push for dev\n\nAGENT_TYPE: \"stub\"  # Fast testing\nAGENT_TIMEOUT: 60\n\nMESSAGE_GROUP_TIMEOUT: 10  # Quick testing\n\nLOG_LEVEL: DEBUG\nLOG_FILE: ./logs/dev.log\n\nALLOWED_USER_IDS: \"your_user_id\"  # Only you\n</code></pre>"},{"location":"getting-started/configuration/#production-setup","title":"Production Setup","text":"config.yaml<pre><code># Production configuration\nKB_PATH: /var/kb/production\nKB_GIT_ENABLED: true\nKB_GIT_AUTO_PUSH: true\nKB_GIT_REMOTE: origin\nKB_GIT_BRANCH: main\n\nAGENT_TYPE: \"qwen_code_cli\"\nAGENT_MODEL: \"qwen-max\"\nAGENT_TIMEOUT: 300\nAGENT_ENABLE_WEB_SEARCH: true\nAGENT_ENABLE_GIT: true\nAGENT_ENABLE_GITHUB: true\nAGENT_ENABLE_SHELL: false\nAGENT_ENABLE_FILE_MANAGEMENT: true\nAGENT_ENABLE_FOLDER_MANAGEMENT: true\n\nMESSAGE_GROUP_TIMEOUT: 30\nPROCESSED_LOG_PATH: /var/data/processed.json\n\nLOG_LEVEL: INFO\nLOG_FILE: /var/log/tg-note/bot.log\n\nALLOWED_USER_IDS: \"\"  # Allow all authenticated users\n</code></pre>"},{"location":"getting-started/configuration/#testing-setup","title":"Testing Setup","text":"config.yaml<pre><code># Testing configuration\nKB_PATH: ./test-kb\nKB_GIT_ENABLED: false  # No git for tests\n\nAGENT_TYPE: \"stub\"\nAGENT_TIMEOUT: 30\n\nMESSAGE_GROUP_TIMEOUT: 5\n\nLOG_LEVEL: WARNING  # Reduce noise\nLOG_FILE: ./logs/test.log\n\nALLOWED_USER_IDS: \"123\"  # Test user only\n</code></pre>"},{"location":"getting-started/configuration/#environment-specific-configuration","title":"Environment-Specific Configuration","text":""},{"location":"getting-started/configuration/#using-environment-variables","title":"Using Environment Variables","text":"<p>Override any setting using environment variables:</p> <pre><code>export MESSAGE_GROUP_TIMEOUT=120\nexport LOG_LEVEL=DEBUG\nexport AGENT_TYPE=qwen_code_cli\n\npython main.py\n</code></pre>"},{"location":"getting-started/configuration/#docker-environment","title":"Docker Environment","text":"<pre><code>ENV TELEGRAM_BOT_TOKEN=your_token\nENV KB_PATH=/app/kb\nENV LOG_LEVEL=INFO\nENV AGENT_TYPE=qwen_code_cli\n</code></pre>"},{"location":"getting-started/configuration/#configuration-validation","title":"Configuration Validation","text":""},{"location":"getting-started/configuration/#check-current-configuration","title":"Check Current Configuration","text":"<pre><code>poetry run python -c \"from config import settings; print(settings)\"\n</code></pre>"},{"location":"getting-started/configuration/#validate-configuration","title":"Validate Configuration","text":"<pre><code>from config import settings\n\nerrors = settings.validate()\nif errors:\n    print(f\"Configuration errors: {errors}\")\nelse:\n    print(\"Configuration is valid!\")\n</code></pre>"},{"location":"getting-started/configuration/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/configuration/#setting-not-applied","title":"Setting Not Applied","text":"<p>Check the priority order:</p> <ol> <li>Environment variable set? \u2192 Takes precedence</li> <li>Value in <code>.env</code>? \u2192 Overrides <code>config.yaml</code></li> <li>Value in <code>config.yaml</code>? \u2192 Uses this</li> <li>Falls back to default</li> </ol> <pre><code># Check environment variable\necho $MESSAGE_GROUP_TIMEOUT\n\n# Check .env file\ncat .env | grep MESSAGE_GROUP_TIMEOUT\n\n# Check config.yaml\ncat config.yaml | grep MESSAGE_GROUP_TIMEOUT\n</code></pre>"},{"location":"getting-started/configuration/#yaml-syntax-error","title":"YAML Syntax Error","text":"<p>Validate YAML syntax:</p> <pre><code>python -c \"import yaml; yaml.safe_load(open('config.yaml'))\"\n</code></pre>"},{"location":"getting-started/configuration/#permission-issues","title":"Permission Issues","text":"<p>Check file permissions:</p> <pre><code>ls -la config.yaml .env\nchmod 600 .env  # Secure credentials\nchmod 644 config.yaml\n</code></pre>"},{"location":"getting-started/configuration/#see-also","title":"See Also","text":"<ul> <li>Installation Guide</li> <li>Settings Management</li> <li>Agent Configuration</li> </ul>"},{"location":"getting-started/first-steps/","title":"First Steps","text":"<p>Your first steps with tg-note after installation.</p>"},{"location":"getting-started/first-steps/#1-get-your-telegram-bot-token","title":"1. Get Your Telegram Bot Token","text":""},{"location":"getting-started/first-steps/#create-a-bot-with-botfather","title":"Create a Bot with BotFather","text":"<ol> <li>Open Telegram and search for @BotFather</li> <li>Start a chat and send <code>/newbot</code></li> <li>Follow the prompts:</li> <li>Choose a name for your bot (e.g., \"My Knowledge Bot\")</li> <li>Choose a username (must end in \"bot\", e.g., \"my_knowledge_bot\")</li> <li>BotFather will give you a token - save it securely!</li> </ol> <p>Example token format:</p> <pre><code>1234567890:ABCdefGHIjklMNOpqrsTUVwxyz12345678\n</code></pre>"},{"location":"getting-started/first-steps/#add-token-to-configuration","title":"Add Token to Configuration","text":"<p>Add your token to <code>.env</code>:</p> <pre><code>TELEGRAM_BOT_TOKEN=1234567890:ABCdefGHIjklMNOpqrsTUVwxyz12345678\n</code></pre>"},{"location":"getting-started/first-steps/#2-get-your-user-id-optional","title":"2. Get Your User ID (Optional)","text":"<p>If you want to restrict bot access to only yourself:</p> <ol> <li>Open Telegram and search for @userinfobot</li> <li>Start a chat and send any message</li> <li>Bot will reply with your user info</li> <li>Copy your User ID</li> </ol> <p>Add to <code>config.yaml</code>:</p> <pre><code>ALLOWED_USER_IDS: \"123456789\"  # Your user ID\n</code></pre>"},{"location":"getting-started/first-steps/#3-setup-knowledge-base","title":"3. Setup Knowledge Base","text":""},{"location":"getting-started/first-steps/#option-a-local-knowledge-base","title":"Option A: Local Knowledge Base","text":"<p>Create a new local Git repository:</p> <pre><code>mkdir my-knowledge-base\ncd my-knowledge-base\ngit init\ngit add .\ngit commit -m \"Initial commit\"\ncd ..\n</code></pre> <p>Update <code>config.yaml</code>:</p> <pre><code>KB_PATH: ./my-knowledge-base\nKB_GIT_ENABLED: true\nKB_GIT_AUTO_PUSH: false  # No remote yet\n</code></pre>"},{"location":"getting-started/first-steps/#option-b-github-knowledge-base","title":"Option B: GitHub Knowledge Base","text":"<ol> <li>Create a new repository on GitHub (e.g., <code>my-kb</code>)</li> <li>Clone it locally:</li> </ol> <pre><code>git clone https://github.com/yourusername/my-kb.git\n</code></pre> <ol> <li>Update <code>config.yaml</code>:</li> </ol> <pre><code>KB_PATH: ./my-kb\nKB_GIT_ENABLED: true\nKB_GIT_AUTO_PUSH: true\nKB_GIT_REMOTE: origin\nKB_GIT_BRANCH: main\n</code></pre>"},{"location":"getting-started/first-steps/#4-start-the-bot","title":"4. Start the Bot","text":"<pre><code>poetry run python main.py\n</code></pre> <p>Expected output:</p> <pre><code>INFO - Starting tg-note bot...\nINFO - Configuration validated successfully\nINFO - Processing tracker initialized\nINFO - Repository manager initialized\nINFO - Telegram bot started successfully\nINFO - Bot initialization completed\nINFO - Press Ctrl+C to stop\n</code></pre>"},{"location":"getting-started/first-steps/#5-initialize-bot-in-telegram","title":"5. Initialize Bot in Telegram","text":"<p>Open Telegram, find your bot, and send:</p> <pre><code>/start\n</code></pre> <p>Bot will greet you with an interactive menu showing:</p> <ul> <li>\ud83d\udcda \u0411\u0430\u0437\u0430 \u0437\u043d\u0430\u043d\u0438\u0439 (Knowledge Base) - Create or manage your KB</li> <li>\ud83d\udd04 \u0420\u0435\u0436\u0438\u043c \u0440\u0430\u0431\u043e\u0442\u044b (Work Mode) - Switch between note-taking, Q&amp;A, and agent modes</li> <li>\u2699\ufe0f \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 (Settings) - Configure bot behavior</li> <li>\ud83d\udd27 MCP \u0441\u0435\u0440\u0432\u0435\u0440\u044b (MCP Servers) - Manage MCP integrations</li> <li>\ud83d\udcac \u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 (Context) - Manage conversation context</li> <li>\u2753 \u041f\u043e\u043c\u043e\u0449\u044c (Help) - Get help and documentation</li> </ul>"},{"location":"getting-started/first-steps/#6-configure-knowledge-base-via-interactive-menu","title":"6. Configure Knowledge Base via Interactive Menu","text":""},{"location":"getting-started/first-steps/#quick-setup-click-the-button","title":"Quick Setup: Click the Button","text":"<ol> <li>In the <code>/start</code> menu, click \u2795 \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0411\u0417 (Create KB)</li> <li>Choose your KB type:</li> <li>\ud83d\udcc1 \u041b\u043e\u043a\u0430\u043b\u044c\u043d\u0430\u044f \u0411\u0417 - Create a local knowledge base</li> <li>\ud83c\udf10 GitHub \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 - Connect a GitHub repository</li> <li>Follow the prompts:</li> <li>For local KB: Enter a name (e.g., <code>my-notes</code>)</li> <li>For GitHub: Enter repository URL (e.g., <code>https://github.com/yourusername/my-kb</code>)</li> </ol>"},{"location":"getting-started/first-steps/#alternative-use-commands","title":"Alternative: Use Commands","text":"<p>You can still use traditional commands:</p> <pre><code>/kb\n</code></pre> <p>This opens the KB management menu where you can: - Create a new KB - Switch between multiple KBs - View KB information - Setup MkDocs documentation (for GitHub repos)</p>"},{"location":"getting-started/first-steps/#7-send-your-first-message","title":"7. Send Your First Message","text":"<p>Send or forward any message to the bot. Examples:</p> <ul> <li>Plain text message</li> <li>Forwarded message from a channel</li> <li>Article link</li> <li>Multiple messages</li> </ul> <p>The bot will process and save it to your knowledge base!</p>"},{"location":"getting-started/first-steps/#8-check-your-knowledge-base","title":"8. Check Your Knowledge Base","text":"<p>Look in your KB directory:</p> <pre><code>ls -la my-knowledge-base/\n</code></pre> <p>You should see:</p> <pre><code>topics/\n\u251c\u2500\u2500 general/\n\u2502   \u2514\u2500\u2500 2025-10-03-your-first-note.md\n\u2514\u2500\u2500 index.md\n</code></pre>"},{"location":"getting-started/first-steps/#9-verify-git-commits","title":"9. Verify Git Commits","text":"<pre><code>cd my-knowledge-base\ngit log --oneline\n</code></pre> <p>You should see automatic commits!</p>"},{"location":"getting-started/first-steps/#10-explore-bot-commands","title":"10. Explore Bot Commands","text":"<p>Try these commands:</p> <pre><code>/help      # Show all commands\n/kb        # Show KB info\n/status    # Show statistics\n/settings  # Open settings menu\n</code></pre>"},{"location":"getting-started/first-steps/#next-steps","title":"Next Steps","text":"<ul> <li> <p> Learn All Commands</p> <p>Master all bot commands and features</p> <p> Bot Commands</p> </li> <li> <p> Upgrade Your Agent</p> <p>Install Qwen Code CLI for better AI processing</p> <p> Agent Setup</p> </li> <li> <p> Customize Settings</p> <p>Configure bot behavior via Telegram</p> <p> Settings Guide</p> </li> <li> <p> Organize Your KB</p> <p>Learn KB structure and organization</p> <p> KB Setup</p> </li> </ul>"},{"location":"getting-started/first-steps/#common-first-time-issues","title":"Common First-Time Issues","text":""},{"location":"getting-started/first-steps/#bot-not-responding","title":"Bot Not Responding","text":"<ol> <li>Check if bot is running in terminal</li> <li>Verify bot token in <code>.env</code></li> <li>Check logs: <code>tail -f logs/bot.log</code></li> </ol>"},{"location":"getting-started/first-steps/#not-authorized-error","title":"\"Not authorized\" Error","text":"<ul> <li>Wrong bot token</li> <li>Check <code>.env</code> file</li> <li>Restart the bot</li> </ul>"},{"location":"getting-started/first-steps/#kb-not-created","title":"KB Not Created","text":"<ul> <li>Check <code>KB_PATH</code> in config</li> <li>Ensure directory exists</li> <li>Check permissions</li> </ul>"},{"location":"getting-started/first-steps/#messages-not-saved","title":"Messages Not Saved","text":"<ul> <li>Check logs for errors</li> <li>Verify KB setup: <code>/kb</code></li> <li>Check Git status in KB folder</li> </ul>"},{"location":"getting-started/first-steps/#getting-help","title":"Getting Help","text":"<ul> <li>\ud83d\udcd6 Full Documentation</li> <li>\ud83d\udc1b Issue Tracker</li> <li>\ud83d\udcac Discussions</li> </ul>"},{"location":"getting-started/installation/","title":"Installation Guide","text":"<p>Detailed installation instructions for tg-note.</p>"},{"location":"getting-started/installation/#system-requirements","title":"System Requirements","text":""},{"location":"getting-started/installation/#required","title":"Required","text":"<ul> <li>Python 3.11 or higher</li> <li>Poetry - Python dependency manager</li> <li>Git - Version control system</li> <li>Telegram Account - To create and use the bot</li> </ul>"},{"location":"getting-started/installation/#optional","title":"Optional","text":"<ul> <li>Node.js 20+ - Required for <code>qwen_code_cli</code> agent (recommended)</li> <li>Docker - For containerized deployment</li> </ul>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":"Local InstallationDocker Installation <p>Use Docker for a reproducible setup. See detailed guides in the Deployment section.</p> <pre><code># Build and start services\ndocker compose up -d --build\n\n# (optional) Authenticate Qwen CLI inside the bot container\ndocker exec -it tg-note-bot bash -lc \"qwen\"\ndocker exec -it tg-note-bot bash -lc \"qwen &lt;&lt;&lt;'/approval-mode yolo --project'\"\n</code></pre> <ul> <li>For service details see: Docker Deployment</li> <li>For semantic search stack see: Vector Search</li> </ul>"},{"location":"getting-started/installation/#1-install-python-311","title":"1. Install Python 3.11+","text":"<p>Check your Python version:</p> <pre><code>python3 --version\n</code></pre> <p>If you need to install Python 3.11+:</p> Ubuntu/DebianmacOSWindows <pre><code>sudo apt update\nsudo apt install python3.11 python3.11-venv python3-pip\n</code></pre> <pre><code>brew install python@3.11\n</code></pre> <p>Download from python.org</p>"},{"location":"getting-started/installation/#2-install-poetry","title":"2. Install Poetry","text":"<pre><code>curl -sSL https://install.python-poetry.org | python3 -\n</code></pre> <p>Or using pipx:</p> <pre><code>pipx install poetry\n</code></pre> <p>Add Poetry to your PATH (if needed):</p> <pre><code>export PATH=\"$HOME/.local/bin:$PATH\"\n</code></pre>"},{"location":"getting-started/installation/#3-clone-the-repository","title":"3. Clone the Repository","text":"<pre><code>git clone https://github.com/ArtyomZemlyak/tg-note.git\ncd tg-note\n</code></pre>"},{"location":"getting-started/installation/#4-install-dependencies","title":"4. Install Dependencies","text":"<pre><code>poetry install\n</code></pre> <p>This creates a virtual environment and installs all required packages.</p>"},{"location":"getting-started/installation/#5-verify-installation","title":"5. Verify Installation","text":"<pre><code>poetry run python -c \"from config import settings; print('Installation successful!')\"\n</code></pre>"},{"location":"getting-started/installation/#optional-dependencies","title":"Optional Dependencies","text":""},{"location":"getting-started/installation/#qwen-code-cli-recommended-for-production","title":"Qwen Code CLI (Recommended for Production)","text":"<p>The Qwen Code CLI agent provides the best AI-powered processing capabilities.</p>"},{"location":"getting-started/installation/#1-install-nodejs-20","title":"1. Install Node.js 20+","text":"Ubuntu/DebianmacOSWindows <pre><code>curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -\nsudo apt-get install -y nodejs\n</code></pre> <pre><code>brew install node@20\n</code></pre> <p>Download from nodejs.org</p>"},{"location":"getting-started/installation/#2-install-qwen-code-cli","title":"2. Install Qwen Code CLI","text":"<pre><code>npm install -g @qwen-code/qwen-code@latest\n</code></pre>"},{"location":"getting-started/installation/#3-verify-installation","title":"3. Verify Installation","text":"<pre><code>qwen --version\n</code></pre>"},{"location":"getting-started/installation/#4-authenticate","title":"4. Authenticate","text":"<pre><code>qwen\n</code></pre> <p>Follow the interactive authentication process. You'll get:</p> <ul> <li>2000 free requests per day</li> <li>60 requests per minute</li> <li>No token limits</li> </ul> <p>Learn more about Qwen Code CLI \u2192</p>"},{"location":"getting-started/installation/#post-installation-setup","title":"Post-Installation Setup","text":""},{"location":"getting-started/installation/#1-create-configuration-files","title":"1. Create Configuration Files","text":"<pre><code># Copy example configuration\ncp config.example.yaml config.yaml\n</code></pre>"},{"location":"getting-started/installation/#2-setup-environment-variables","title":"2. Setup Environment Variables","text":"<p>Create a <code>.env</code> file:</p> <pre><code>touch .env\n</code></pre> <p>Add your credentials:</p> <pre><code># Required\nTELEGRAM_BOT_TOKEN=your_bot_token_here\n\n# Optional - For advanced features\nOPENAI_API_KEY=your_openai_key\nANTHROPIC_API_KEY=your_anthropic_key\n</code></pre> <p>Security</p> <p>Never commit your <code>.env</code> file to version control! It's already in <code>.gitignore</code>, but always double-check.</p>"},{"location":"getting-started/installation/#3-configure-basic-settings","title":"3. Configure Basic Settings","text":"<p>Edit <code>config.yaml</code>:</p> <pre><code># Knowledge Base\nKB_PATH: ./knowledge_base\nKB_GIT_ENABLED: true\nKB_GIT_AUTO_PUSH: true\n\n# Agent Type\nAGENT_TYPE: \"stub\"  # Options: stub, autonomous, qwen_code_cli\n\n# Logging\nLOG_LEVEL: INFO\nLOG_FILE: ./logs/bot.log\n</code></pre> <p>Full configuration guide \u2192</p>"},{"location":"getting-started/installation/#verification","title":"Verification","text":""},{"location":"getting-started/installation/#run-tests","title":"Run Tests","text":"<p>Verify everything is working:</p> <pre><code># Run all tests\npoetry run pytest\n\n# Run with coverage\npoetry run pytest --cov=src --cov-report=html\n\n# Run specific test\npoetry run pytest tests/test_tracker.py -v\n</code></pre>"},{"location":"getting-started/installation/#check-configuration","title":"Check Configuration","text":"<pre><code>poetry run python -c \"from config import settings; print(settings)\"\n</code></pre>"},{"location":"getting-started/installation/#test-bot-connection","title":"Test Bot Connection","text":"<pre><code>poetry run python main.py\n</code></pre> <p>You should see:</p> <pre><code>INFO - Starting tg-note bot...\nINFO - Configuration validated successfully\nINFO - Bot initialization completed\n</code></pre>"},{"location":"getting-started/installation/#directory-structure","title":"Directory Structure","text":"<p>After installation, your directory should look like:</p> <pre><code>tg-note/\n\u251c\u2500\u2500 config/              # Configuration modules\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 bot/            # Telegram bot\n\u2502   \u251c\u2500\u2500 processor/      # Message processing\n\u2502   \u251c\u2500\u2500 agents/         # AI agents\n\u2502   \u251c\u2500\u2500 knowledge_base/ # KB management\n\u2502   \u2514\u2500\u2500 tracker/        # Processing tracker\n\u251c\u2500\u2500 tests/              # Unit tests\n\u251c\u2500\u2500 data/               # Created on first run\n\u251c\u2500\u2500 logs/               # Created on first run\n\u251c\u2500\u2500 config.yaml         # Your configuration\n\u251c\u2500\u2500 .env                # Your credentials\n\u251c\u2500\u2500 pyproject.toml      # Project metadata\n\u251c\u2500\u2500 poetry.lock         # Dependency lock file\n\u2514\u2500\u2500 main.py            # Entry point\n</code></pre>"},{"location":"getting-started/installation/#updating","title":"Updating","text":"<p>To update tg-note to the latest version:</p> <pre><code>git pull origin main\npoetry install\n</code></pre> <p>To update dependencies:</p> <pre><code>poetry update\n</code></pre>"},{"location":"getting-started/installation/#troubleshooting-installation","title":"Troubleshooting Installation","text":""},{"location":"getting-started/installation/#poetry-not-found","title":"Poetry Not Found","text":"<pre><code># Add to PATH\nexport PATH=\"$HOME/.local/bin:$PATH\"\n\n# Make permanent\necho 'export PATH=\"$HOME/.local/bin:$PATH\"' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre>"},{"location":"getting-started/installation/#python-version-issues","title":"Python Version Issues","text":"<pre><code># Use specific Python version with Poetry\npoetry env use python3.11\n\n# Verify\npoetry run python --version\n</code></pre>"},{"location":"getting-started/installation/#permission-errors","title":"Permission Errors","text":"<pre><code># On Linux/macOS\nsudo chown -R $USER:$USER ~/.local\n\n# Or install without sudo\ncurl -sSL https://install.python-poetry.org | python3 - --user\n</code></pre>"},{"location":"getting-started/installation/#virtual-environment-issues","title":"Virtual Environment Issues","text":"<pre><code># Remove and recreate\npoetry env remove python\npoetry install\n</code></pre>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>After successful installation:</p> <ol> <li>Configure the bot</li> <li>Get your Telegram bot token</li> <li>Run the bot</li> <li>Choose your agent</li> </ol>"},{"location":"getting-started/installation/#uninstallation","title":"Uninstallation","text":"<p>To completely remove tg-note:</p> <pre><code># Remove virtual environment\npoetry env remove python\n\n# Remove project directory\ncd ..\nrm -rf tg-note\n\n# Optionally remove Poetry\npipx uninstall poetry\n</code></pre>"},{"location":"getting-started/quick-start/","title":"Quick Start Guide","text":"<p>Get up and running with tg-note in just a few minutes!</p>"},{"location":"getting-started/quick-start/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have:</p> <ul> <li>Python 3.11+ installed</li> <li>Poetry (Python dependency manager)</li> <li>Git installed</li> <li>Telegram Account</li> <li>Node.js 20+ (optional, for qwen_code_cli agent)</li> </ul>"},{"location":"getting-started/quick-start/#installation-steps","title":"Installation Steps","text":""},{"location":"getting-started/quick-start/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/ArtyomZemlyak/tg-note.git\ncd tg-note\n</code></pre>"},{"location":"getting-started/quick-start/#2-install-poetry","title":"2. Install Poetry","text":"<p>If you don't have Poetry installed:</p> <pre><code>curl -sSL https://install.python-poetry.org | python3 -\n# or using pipx:\n# pipx install poetry\n</code></pre>"},{"location":"getting-started/quick-start/#3-install-dependencies","title":"3. Install Dependencies","text":"<pre><code>poetry install\n</code></pre> <p>This will automatically create a virtual environment and install all dependencies.</p>"},{"location":"getting-started/quick-start/#configuration","title":"Configuration","text":""},{"location":"getting-started/quick-start/#1-create-configuration-files","title":"1. Create Configuration Files","text":"<pre><code># Copy example configuration\ncp config.example.yaml config.yaml\n</code></pre>"},{"location":"getting-started/quick-start/#2-get-telegram-bot-token","title":"2. Get Telegram Bot Token","text":"<ol> <li>Open @BotFather in Telegram</li> <li>Send <code>/newbot</code> and follow instructions</li> <li>Copy the token provided</li> </ol>"},{"location":"getting-started/quick-start/#3-create-env-file","title":"3. Create <code>.env</code> File","text":"<p>Create a <code>.env</code> file with your credentials:</p> <pre><code>cat &gt; .env &lt;&lt; EOF\n# Required: Telegram Bot Token\nTELEGRAM_BOT_TOKEN=your_bot_token_here\n\n# Optional: API keys for advanced agents\n# OPENAI_API_KEY=your_openai_key\n# ANTHROPIC_API_KEY=your_anthropic_key\nEOF\n</code></pre>"},{"location":"getting-started/quick-start/#4-configure-configyaml","title":"4. Configure <code>config.yaml</code>","text":"<p>Edit <code>config.yaml</code> with your basic settings:</p> <pre><code># Knowledge Base Settings\nKB_PATH: ./knowledge_base\nKB_GIT_ENABLED: true\nKB_GIT_AUTO_PUSH: true\nKB_GIT_REMOTE: origin\nKB_GIT_BRANCH: main\n\n# Agent Configuration\nAGENT_TYPE: \"stub\"  # Options: stub, autonomous, qwen_code_cli\n\n# Processing Settings\nMESSAGE_GROUP_TIMEOUT: 30  # seconds\n\n# Logging\nLOG_LEVEL: INFO\nLOG_FILE: ./logs/bot.log\n\n# User Access Control\n# Accepts empty (allow all), comma-separated (e.g., \"123,456\"), or JSON list (e.g., [123,456])\nALLOWED_USER_IDS: \"\"\n</code></pre>"},{"location":"getting-started/quick-start/#running-the-bot","title":"Running the Bot","text":""},{"location":"getting-started/quick-start/#start-the-bot","title":"Start the Bot","text":"<pre><code>poetry run python main.py\n# or activate the virtual environment first:\npoetry shell\npython main.py\n</code></pre> <p>You should see:</p> <pre><code>INFO - Starting tg-note bot...\nINFO - Configuration validated successfully\nINFO - Processing tracker initialized\nINFO - Repository manager initialized\nINFO - Telegram bot started successfully\nINFO - Bot initialization completed\nINFO - Press Ctrl+C to stop\n</code></pre>"},{"location":"getting-started/quick-start/#configure-knowledge-base-in-telegram","title":"Configure Knowledge Base in Telegram","text":"<p>Open your bot in Telegram and:</p> <pre><code>/start                    # Initialize the bot\n/setkb my-notes           # Create local knowledge base\n# or\n/setkb https://github.com/username/kb-repo  # Use GitHub repository\n</code></pre>"},{"location":"getting-started/quick-start/#start-sending-messages","title":"Start Sending Messages","text":"<p>Just forward any message or write text - the bot will automatically process and save it to your knowledge base.</p>"},{"location":"getting-started/quick-start/#stop-the-bot","title":"Stop the Bot","text":"<p>Press <code>Ctrl+C</code> in the terminal.</p>"},{"location":"getting-started/quick-start/#optional-install-qwen-code-cli","title":"Optional: Install Qwen Code CLI","text":"<p>For advanced AI processing, install the Qwen Code CLI agent:</p> <pre><code># Install Node.js 20+ first, then:\nnpm install -g @qwen-code/qwen-code@latest\n\n# Authenticate (2000 free requests/day)\nqwen\n\n# Update config.yaml\nAGENT_TYPE: \"qwen_code_cli\"\n</code></pre> <p>Learn more about Qwen Code CLI \u2192</p>"},{"location":"getting-started/quick-start/#basic-commands","title":"Basic Commands","text":"Command Description Example <code>/start</code> Initialize bot interaction <code>/start</code> <code>/help</code> Display help information <code>/help</code> <code>/setkb &lt;name\\|url&gt;</code> Setup knowledge base <code>/setkb my-notes</code> <code>/kb</code> Show current KB info <code>/kb</code> <code>/status</code> Display processing statistics <code>/status</code> <code>/settings</code> Open interactive settings menu <code>/settings</code> <code>/note</code> Switch to note creation mode <code>/note</code> <code>/ask</code> Switch to question mode <code>/ask</code> <code>/agent</code> Switch to agent mode (full access) <code>/agent</code> <p>Full command reference \u2192</p>"},{"location":"getting-started/quick-start/#working-modes","title":"Working Modes","text":"<p>The bot has three working modes:</p>"},{"location":"getting-started/quick-start/#note-mode-default","title":"\ud83d\udcdd Note Mode (Default)","text":"<p>Analyzes and saves your messages to the knowledge base.</p>"},{"location":"getting-started/quick-start/#ask-mode","title":"\ud83e\udd14 Ask Mode","text":"<p>Answers questions about your knowledge base content.</p>"},{"location":"getting-started/quick-start/#agent-mode","title":"\ud83e\udd16 Agent Mode","text":"<p>Full autonomous access - can answer questions, add/edit content, and restructure the KB.</p> <p>Switch between modes with <code>/note</code>, <code>/ask</code>, or <code>/agent</code> commands.</p>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":"<p>Now that you have tg-note running, explore these topics:</p> <ul> <li> <p> Configuration</p> <p>Learn about all configuration options</p> <p> Configuration Guide</p> </li> <li> <p> User Guide</p> <p>Learn how to use all bot features</p> <p> User Guide</p> </li> <li> <p> Agent System</p> <p>Understand AI agents and choose the right one</p> <p> Agent Overview</p> </li> <li> <p> Knowledge Base</p> <p>Setup and manage your knowledge base</p> <p> KB Setup</p> </li> </ul>"},{"location":"getting-started/quick-start/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/quick-start/#common-issues","title":"Common Issues","text":"<p>TELEGRAM_BOT_TOKEN is required</p> <p>Add your bot token to the <code>.env</code> file</p> <p>Not a git repository</p> <p>Check <code>KB_PATH</code> in config.yaml - it should point to a git repository</p> <p>ModuleNotFoundError</p> <p>Activate the Poetry virtual environment: <code>poetry shell</code></p> <p>Tests not running</p> <p>Install dependencies: <code>poetry install</code></p> <p>Full troubleshooting guide \u2192</p>"},{"location":"getting-started/quick-start/#getting-help","title":"Getting Help","text":"<ul> <li>\ud83d\udcd6 Check the User Guide</li> <li>\ud83d\udc1b Report issues on GitHub</li> <li>\ud83d\udcac Ask questions in Discussions</li> </ul>"},{"location":"reference/api/","title":"Coming Soon","text":"<p>This documentation page is under construction.</p> <p>For now, please refer to the README or check back later.</p>"},{"location":"reference/configuration/","title":"Configuration Reference","text":"<p>Complete reference for all tg-note configuration options.</p>"},{"location":"reference/configuration/#configuration-files","title":"Configuration Files","text":"<p>tg-note uses two configuration files:</p> <ol> <li><code>.env</code> - Sensitive credentials (not committed to git)</li> <li><code>config.yaml</code> - Main configuration (can be committed)</li> </ol> <p>Priority: Environment Variables &gt; <code>.env</code> file &gt; <code>config.yaml</code></p>"},{"location":"reference/configuration/#knowledge-base-settings","title":"Knowledge Base Settings","text":""},{"location":"reference/configuration/#kb_path","title":"KB_PATH","text":"<p>Path to knowledge base directory.</p> <ul> <li>Type: <code>str</code></li> <li>Default: <code>./knowledge_base</code></li> <li>Example: <code>./my-notes</code> or <code>/path/to/kb</code></li> </ul>"},{"location":"reference/configuration/#kb_git_enabled","title":"KB_GIT_ENABLED","text":"<p>Enable Git integration for knowledge base.</p> <ul> <li>Type: <code>bool</code></li> <li>Default: <code>true</code></li> <li>Description: If enabled, changes are committed to git</li> </ul>"},{"location":"reference/configuration/#kb_git_auto_push","title":"KB_GIT_AUTO_PUSH","text":"<p>Automatically push commits to remote repository.</p> <ul> <li>Type: <code>bool</code></li> <li>Default: <code>true</code></li> <li>Requires: <code>KB_GIT_ENABLED=true</code></li> </ul>"},{"location":"reference/configuration/#kb_git_remote","title":"KB_GIT_REMOTE","text":"<p>Git remote name.</p> <ul> <li>Type: <code>str</code></li> <li>Default: <code>origin</code></li> </ul>"},{"location":"reference/configuration/#kb_git_branch","title":"KB_GIT_BRANCH","text":"<p>Git branch name.</p> <ul> <li>Type: <code>str</code></li> <li>Default: <code>main</code></li> </ul>"},{"location":"reference/configuration/#kb_topics_only","title":"KB_TOPICS_ONLY","text":"<p>Restrict agents to work only in <code>topics/</code> folder.</p> <ul> <li>Type: <code>bool</code></li> <li>Default: <code>true</code></li> <li>Description: Prevents agents from modifying meta files like <code>index.md</code>, <code>README.md</code> in KB root</li> <li>When true: Agents can only access <code>KB_PATH/topics/</code></li> <li>When false: Agents have full access to entire KB directory</li> </ul>"},{"location":"reference/configuration/#agent-settings","title":"Agent Settings","text":""},{"location":"reference/configuration/#agent_type","title":"AGENT_TYPE","text":"<p>Type of AI agent to use.</p> <ul> <li>Type: <code>str</code></li> <li>Default: <code>stub</code></li> <li>Options: <code>stub</code>, <code>autonomous</code>, <code>qwen_code_cli</code></li> <li>Description:</li> <li><code>stub</code> - Simple testing agent (no API needed)</li> <li><code>autonomous</code> - Python-based agent with OpenAI-compatible API</li> <li><code>qwen_code_cli</code> - Advanced agent using Qwen Code CLI</li> </ul>"},{"location":"reference/configuration/#agent_model","title":"AGENT_MODEL","text":"<p>Model name for the agent.</p> <ul> <li>Type: <code>str</code></li> <li>Default: <code>qwen-max</code></li> <li>Examples: <code>gpt-4</code>, <code>gpt-3.5-turbo</code>, <code>qwen-max</code>, <code>claude-3-sonnet</code></li> </ul>"},{"location":"reference/configuration/#agent_timeout","title":"AGENT_TIMEOUT","text":"<p>Maximum time (in seconds) for agent operations.</p> <ul> <li>Type: <code>int</code></li> <li>Default: <code>300</code></li> <li>Range: <code>60</code> to <code>600</code></li> </ul>"},{"location":"reference/configuration/#agent_enable_web_search","title":"AGENT_ENABLE_WEB_SEARCH","text":"<p>Enable web search capability for agents.</p> <ul> <li>Type: <code>bool</code></li> <li>Default: <code>true</code></li> </ul>"},{"location":"reference/configuration/#agent_enable_git","title":"AGENT_ENABLE_GIT","text":"<p>Enable Git operations for agents.</p> <ul> <li>Type: <code>bool</code></li> <li>Default: <code>true</code></li> </ul>"},{"location":"reference/configuration/#agent_enable_github","title":"AGENT_ENABLE_GITHUB","text":"<p>Enable GitHub integration for agents.</p> <ul> <li>Type: <code>bool</code></li> <li>Default: <code>true</code></li> </ul>"},{"location":"reference/configuration/#agent_enable_shell","title":"AGENT_ENABLE_SHELL","text":"<p>Enable shell command execution for agents.</p> <ul> <li>Type: <code>bool</code></li> <li>Default: <code>false</code></li> <li>Warning: Security risk if enabled</li> </ul>"},{"location":"reference/configuration/#agent_enable_file_management","title":"AGENT_ENABLE_FILE_MANAGEMENT","text":"<p>Enable file create/edit/delete operations.</p> <ul> <li>Type: <code>bool</code></li> <li>Default: <code>true</code></li> </ul>"},{"location":"reference/configuration/#agent_enable_folder_management","title":"AGENT_ENABLE_FOLDER_MANAGEMENT","text":"<p>Enable folder create/delete/move operations.</p> <ul> <li>Type: <code>bool</code></li> <li>Default: <code>true</code></li> </ul>"},{"location":"reference/configuration/#processing-settings","title":"Processing Settings","text":""},{"location":"reference/configuration/#message_group_timeout","title":"MESSAGE_GROUP_TIMEOUT","text":"<p>Time (in seconds) to wait for related messages before processing.</p> <ul> <li>Type: <code>int</code></li> <li>Default: <code>30</code></li> <li>Description: Bot groups consecutive messages within this timeout</li> </ul>"},{"location":"reference/configuration/#processed_log_path","title":"PROCESSED_LOG_PATH","text":"<p>Path to processed messages log file.</p> <ul> <li>Type: <code>str</code></li> <li>Default: <code>./data/processed.json</code></li> </ul>"},{"location":"reference/configuration/#logging-settings","title":"Logging Settings","text":""},{"location":"reference/configuration/#log_level","title":"LOG_LEVEL","text":"<p>Logging level.</p> <ul> <li>Type: <code>str</code></li> <li>Default: <code>INFO</code></li> <li>Options: <code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code>, <code>CRITICAL</code></li> </ul>"},{"location":"reference/configuration/#log_file","title":"LOG_FILE","text":"<p>Path to log file.</p> <ul> <li>Type: <code>str</code></li> <li>Default: <code>./logs/bot.log</code></li> </ul>"},{"location":"reference/configuration/#security-settings","title":"Security Settings","text":""},{"location":"reference/configuration/#allowed_user_ids","title":"ALLOWED_USER_IDS","text":"<p>Whitelist of allowed Telegram user IDs. When set via environment variables, it accepts:</p> <ul> <li>empty string \u2192 allow all users</li> <li>comma-separated string \u2192 e.g., <code>\"123456789,987654321\"</code></li> <li> <p>JSON list \u2192 e.g., <code>[123456789, 987654321]</code></p> </li> <li> <p>Type: <code>List[int]</code></p> </li> <li>Default: <code>[]</code> (empty list = all users allowed)</li> <li>Examples: <code>\"123456789,987654321\"</code> or <code>[123456789, 987654321]</code></li> </ul>"},{"location":"reference/configuration/#environment-variables-env","title":"Environment Variables (.env)","text":""},{"location":"reference/configuration/#required","title":"Required","text":"<pre><code>TELEGRAM_BOT_TOKEN=your_bot_token_here\n</code></pre>"},{"location":"reference/configuration/#optional-api-keys","title":"Optional API Keys","text":"<pre><code># OpenAI (for autonomous agent)\nOPENAI_API_KEY=sk-...\nOPENAI_BASE_URL=https://api.openai.com/v1  # Optional, for custom endpoints\n\n# Qwen\nQWEN_API_KEY=your_qwen_key\n\n# Anthropic\nANTHROPIC_API_KEY=sk-ant-...\n\n# GitHub\nGITHUB_TOKEN=ghp_...\n</code></pre>"},{"location":"reference/configuration/#example-configuration","title":"Example Configuration","text":""},{"location":"reference/configuration/#minimal-setup-stub-agent","title":"Minimal Setup (Stub Agent)","text":"<pre><code># config.yaml\nKB_PATH: ./knowledge_base\nKB_GIT_ENABLED: true\nKB_GIT_AUTO_PUSH: false\nAGENT_TYPE: \"stub\"\nLOG_LEVEL: INFO\n</code></pre> <pre><code># .env\nTELEGRAM_BOT_TOKEN=your_token\n</code></pre>"},{"location":"reference/configuration/#production-setup-qwen-code-cli","title":"Production Setup (Qwen Code CLI)","text":"<pre><code># config.yaml\nKB_PATH: /data/knowledge_base\nKB_GIT_ENABLED: true\nKB_GIT_AUTO_PUSH: true\nKB_GIT_REMOTE: origin\nKB_GIT_BRANCH: main\nKB_TOPICS_ONLY: true\n\nAGENT_TYPE: \"qwen_code_cli\"\nAGENT_TIMEOUT: 300\nAGENT_ENABLE_WEB_SEARCH: true\nAGENT_ENABLE_GIT: true\nAGENT_ENABLE_GITHUB: true\nAGENT_ENABLE_SHELL: false\nAGENT_ENABLE_FILE_MANAGEMENT: true\nAGENT_ENABLE_FOLDER_MANAGEMENT: true\n\nMESSAGE_GROUP_TIMEOUT: 30\nLOG_LEVEL: INFO\nLOG_FILE: /var/log/tg-note/bot.log\n\nALLOWED_USER_IDS: \"123456789\"\n</code></pre> <pre><code># .env\nTELEGRAM_BOT_TOKEN=your_production_token\nGITHUB_TOKEN=ghp_your_github_token\n</code></pre>"},{"location":"reference/configuration/#development-setup-autonomous-agent","title":"Development Setup (Autonomous Agent)","text":"<pre><code># config.yaml\nKB_PATH: ./test_kb\nKB_GIT_ENABLED: true\nKB_GIT_AUTO_PUSH: false\nKB_TOPICS_ONLY: false\n\nAGENT_TYPE: \"autonomous\"\nAGENT_MODEL: \"gpt-3.5-turbo\"\nAGENT_TIMEOUT: 200\nAGENT_ENABLE_WEB_SEARCH: true\nAGENT_ENABLE_FILE_MANAGEMENT: true\n\nMESSAGE_GROUP_TIMEOUT: 10\nLOG_LEVEL: DEBUG\n</code></pre> <pre><code># .env\nTELEGRAM_BOT_TOKEN=your_dev_token\nOPENAI_API_KEY=sk-...\n</code></pre>"},{"location":"reference/configuration/#see-also","title":"See Also","text":"<ul> <li>Quick Start Guide</li> <li>Settings Management</li> <li>Agent Overview</li> </ul>"},{"location":"reference/faq/","title":"Coming Soon","text":"<p>This documentation page is under construction.</p> <p>For now, please refer to the README or check back later.</p>"},{"location":"reference/git-operations/","title":"Git Operations Reference","text":"<p>This document provides detailed information about git operations in the knowledge base system.</p>"},{"location":"reference/git-operations/#overview","title":"Overview","text":"<p>The <code>GitOperations</code> class (<code>src/knowledge_base/git_ops.py</code>) provides a high-level interface for git operations with built-in error handling, authentication management, and safety checks.</p>"},{"location":"reference/git-operations/#key-features","title":"Key Features","text":""},{"location":"reference/git-operations/#1-automatic-https-authentication","title":"1. Automatic HTTPS Authentication","text":"<p>Automatically configures GitHub HTTPS remotes with credentials:</p> <pre><code>git_ops = GitOperations(\n    repo_path=\"/path/to/repo\",\n    enabled=True,\n    github_username=\"your_username\",\n    github_token=\"ghp_your_token\"\n)\n</code></pre> <p>Behavior: - Only modifies HTTPS GitHub URLs (<code>https://github.com/...</code>) - Skips URLs that already contain credentials (<code>@</code> in URL) - Leaves SSH remotes unchanged (<code>git@github.com:...</code>) - Idempotent: safe to call multiple times - Per-remote error handling: failure on one remote doesn't affect others</p>"},{"location":"reference/git-operations/#2-safety-checks","title":"2. Safety Checks","text":"<p>Repository Boundary Protection: - <code>add()</code> method validates that files are within repository boundaries - Prevents adding files from outside the repository (security) - Uses resolved absolute paths for comparison</p> <p>Branch Safety: - Detects detached HEAD state - Prevents dangerous operations in detached HEAD - Validates branch existence before operations - Verifies branch after switching</p> <p>Stash Protection: - Automatically stashes uncommitted changes before branch switch - Returns error if stashing fails (prevents data loss) - Restores stash after successful branch switch</p>"},{"location":"reference/git-operations/#3-error-handling","title":"3. Error Handling","text":"<p>All methods return clear success/failure status with descriptive messages:</p> <pre><code># Pull example\nsuccess, message = git_ops.pull(remote=\"origin\", branch=\"main\")\nif not success:\n    print(f\"Pull failed: {message}\")\n</code></pre> <p>Error categories: - Authentication errors (HTTPS/SSH) - Merge conflicts - Missing remotes/branches - Uncommitted changes - Detached HEAD state - File not found - Files outside repository</p>"},{"location":"reference/git-operations/#api-reference","title":"API Reference","text":""},{"location":"reference/git-operations/#__init__repo_path-enabledtrue-github_usernamenone-github_tokennone","title":"<code>__init__(repo_path, enabled=True, github_username=None, github_token=None)</code>","text":"<p>Initialize git operations for a repository.</p> <p>Parameters: - <code>repo_path</code> (str): Path to git repository - <code>enabled</code> (bool): Enable git operations (default: True) - <code>github_username</code> (str, optional): GitHub username for HTTPS auth - <code>github_token</code> (str, optional): GitHub personal access token</p> <p>Behavior: - Initializes repository if valid - Configures HTTPS credentials if provided - Disables operations if repo is invalid or GitPython not available</p>"},{"location":"reference/git-operations/#addfile_path-str-bool","title":"<code>add(file_path: str) -&gt; bool</code>","text":"<p>Add file to git staging area.</p> <p>Parameters: - <code>file_path</code> (str): Path to file to add</p> <p>Returns: - <code>bool</code>: True if successful, False otherwise</p> <p>Safety checks: - Validates file exists - Validates file is within repository boundaries - Uses relative path from repo root</p> <p>Error cases: - File doesn't exist - File is outside repository (security) - Git operations disabled - File add operation fails</p>"},{"location":"reference/git-operations/#commitmessage-str-bool","title":"<code>commit(message: str) -&gt; bool</code>","text":"<p>Commit staged changes.</p> <p>Parameters: - <code>message</code> (str): Commit message</p> <p>Returns: - <code>bool</code>: True if successful, False otherwise</p> <p>Error cases: - No staged changes - Git operations disabled - Commit operation fails</p>"},{"location":"reference/git-operations/#pullremoteorigin-branchnone-tuplebool-str","title":"<code>pull(remote=\"origin\", branch=None) -&gt; tuple[bool, str]</code>","text":"<p>Pull latest changes from remote repository.</p> <p>Parameters: - <code>remote</code> (str): Remote name (default: \"origin\") - <code>branch</code> (str, optional): Branch to pull. If None/\"auto\", uses tracking branch</p> <p>Returns: - <code>tuple[bool, str]</code>: (success, message)</p> <p>Behavior: - Checks for uncommitted changes (fails if found) - Validates remote exists - Determines tracking branch if not specified - Handles fast-forward and up-to-date cases - Creates and pushes branch if remote branch doesn't exist</p> <p>Error cases: - Uncommitted changes in working directory - Remote not found - Detached HEAD state (when creating missing branch) - Merge conflicts - Remote branch doesn't exist (auto-creates if possible) - Network/authentication errors</p>"},{"location":"reference/git-operations/#pushremoteorigin-branchnone-bool","title":"<code>push(remote=\"origin\", branch=None) -&gt; bool</code>","text":"<p>Push commits to remote repository.</p> <p>Parameters: - <code>remote</code> (str): Remote name (default: \"origin\") - <code>branch</code> (str, optional): Branch to push. If None/\"auto\", uses current branch</p> <p>Returns: - <code>bool</code>: True if successful, False otherwise</p> <p>Behavior: - Validates remote exists - Determines current branch if not specified - Sets upstream tracking if not configured - Provides authentication guidance on HTTPS errors</p> <p>Error cases: - Remote not found - Authentication failure (HTTPS/SSH) - Network errors - Force push required (diverged branches) - Detached HEAD state</p>"},{"location":"reference/git-operations/#add_commit_pushfile_path-message-remoteorigin-branchmain-bool","title":"<code>add_commit_push(file_path, message, remote=\"origin\", branch=\"main\") -&gt; bool</code>","text":"<p>Combined operation: add file, commit, and push in one call.</p> <p>Parameters: - <code>file_path</code> (str): Path to file to add - <code>message</code> (str): Commit message - <code>remote</code> (str): Remote name (default: \"origin\") - <code>branch</code> (str): Branch name (default: \"main\")</p> <p>Returns: - <code>bool</code>: True if all operations successful, False otherwise</p> <p>Behavior: - Calls <code>add()</code>, <code>commit()</code>, and <code>push()</code> in sequence - Stops on first failure</p>"},{"location":"reference/git-operations/#auto_commit_and_pushmessage-remoteorigin-branchnone-tuplebool-str","title":"<code>auto_commit_and_push(message, remote=\"origin\", branch=None) -&gt; tuple[bool, str]</code>","text":"<p>Automatically commit all changes and push to remote.</p> <p>Parameters: - <code>message</code> (str): Commit message - <code>remote</code> (str): Remote name (default: \"origin\") - <code>branch</code> (str, optional): Branch to commit/push to</p> <p>Returns: - <code>tuple[bool, str]</code>: (success, message)</p> <p>Behavior: 1. Switches to target branch if specified 2. Stashes uncommitted changes if switching branches 3. Checks for changes 4. Adds all changes (<code>git add -A</code>) 5. Commits with provided message 6. Pushes to remote if configured 7. Restores stash if created</p> <p>Safety features: - Validates branch after switching - Fails if stashing fails (prevents data loss) - Returns success even if push fails (commit succeeded) - Handles missing remote gracefully</p> <p>Error cases: - Failed to stash uncommitted changes - Failed to switch branches - Branch mismatch after switch - Failed to add changes - Failed to commit - Push failed (commit still succeeded)</p>"},{"location":"reference/git-operations/#has_remoteremoteorigin-bool","title":"<code>has_remote(remote=\"origin\") -&gt; bool</code>","text":"<p>Check if repository has a remote configured.</p> <p>Parameters: - <code>remote</code> (str): Remote name (default: \"origin\")</p> <p>Returns: - <code>bool</code>: True if remote exists, False otherwise</p>"},{"location":"reference/git-operations/#has_changes-bool","title":"<code>has_changes() -&gt; bool</code>","text":"<p>Check if repository has uncommitted changes.</p> <p>Returns: - <code>bool</code>: True if there are uncommitted changes (staged or unstaged), False otherwise</p>"},{"location":"reference/git-operations/#usage-examples","title":"Usage Examples","text":""},{"location":"reference/git-operations/#basic-operations","title":"Basic Operations","text":"<pre><code>from src.knowledge_base.git_ops import GitOperations\n\n# Initialize with HTTPS authentication\ngit_ops = GitOperations(\n    repo_path=\"/path/to/kb\",\n    enabled=True,\n    github_username=\"myusername\",\n    github_token=\"ghp_mytoken123\"\n)\n\n# Add, commit, push\ngit_ops.add(\"topics/ai/notes.md\")\ngit_ops.commit(\"Add AI notes\")\nsuccess = git_ops.push()\n\nif not success:\n    print(\"Push failed - check authentication\")\n</code></pre>"},{"location":"reference/git-operations/#pull-with-error-handling","title":"Pull with Error Handling","text":"<pre><code># Pull latest changes\nsuccess, message = git_ops.pull(remote=\"origin\", branch=\"main\")\n\nif not success:\n    if \"uncommitted changes\" in message.lower():\n        print(\"Please commit or stash your changes first\")\n    elif \"conflict\" in message.lower():\n        print(\"Merge conflict - resolve manually\")\n    elif \"remote\" in message.lower():\n        print(\"Remote not configured\")\n    else:\n        print(f\"Pull failed: {message}\")\n</code></pre>"},{"location":"reference/git-operations/#auto-commit-with-branch-switching","title":"Auto-commit with Branch Switching","text":"<pre><code># Commit all changes and push to feature branch\nsuccess, message = git_ops.auto_commit_and_push(\n    message=\"Update documentation\",\n    remote=\"origin\",\n    branch=\"feature/new-docs\"\n)\n\nif success:\n    print(f\"Success: {message}\")\nelse:\n    print(f\"Failed: {message}\")\n</code></pre>"},{"location":"reference/git-operations/#check-repository-state","title":"Check Repository State","text":"<pre><code># Check for remote\nif not git_ops.has_remote(\"origin\"):\n    print(\"No origin remote configured\")\n    print(\"Add with: git remote add origin &lt;url&gt;\")\n\n# Check for uncommitted changes\nif git_ops.has_changes():\n    print(\"You have uncommitted changes\")\n    # Commit them\n    git_ops.auto_commit_and_push(\"Auto-save changes\")\n</code></pre>"},{"location":"reference/git-operations/#error-scenarios-and-solutions","title":"Error Scenarios and Solutions","text":""},{"location":"reference/git-operations/#1-authentication-errors","title":"1. Authentication Errors","text":"<p>HTTPS without credentials: <pre><code>Error: \"could not read Username for 'https://github.com'\"\nSolution: Set GITHUB_USERNAME and GITHUB_TOKEN in .env\n</code></pre></p> <p>Invalid token: <pre><code>Error: \"authentication failed\"\nSolution: Generate new token at https://github.com/settings/tokens\nScopes needed: repo (full control of private repositories)\n</code></pre></p> <p>HTTPS with wrong credentials: <pre><code>Solution: Update .env file with correct credentials\nAlternative: Switch to SSH (git remote set-url origin git@github.com:user/repo.git)\n</code></pre></p>"},{"location":"reference/git-operations/#2-merge-conflicts","title":"2. Merge Conflicts","text":"<p>During pull: <pre><code>Error: \"Merge conflict during pull\"\nSolution: Resolve manually\n  1. git status (see conflicted files)\n  2. Edit conflicted files\n  3. git add &lt;resolved-files&gt;\n  4. git commit\n</code></pre></p>"},{"location":"reference/git-operations/#3-uncommitted-changes","title":"3. Uncommitted Changes","text":"<p>Preventing pull: <pre><code>Error: \"Repository has uncommitted changes\"\nSolution 1: Commit changes first\n  git_ops.auto_commit_and_push(\"WIP: save progress\")\nSolution 2: Stash changes\n  git stash\n  git_ops.pull()\n  git stash pop\n</code></pre></p> <p>Preventing branch switch: <pre><code>Error: \"Cannot switch branches with uncommitted changes\"\nSolution: auto_commit_and_push() handles this automatically via stashing\n</code></pre></p>"},{"location":"reference/git-operations/#4-branch-issues","title":"4. Branch Issues","text":"<p>Detached HEAD: <pre><code>Error: \"Not on any branch (detached HEAD state)\"\nSolution: Checkout a branch first\n  git checkout main\n</code></pre></p> <p>Missing remote branch: <pre><code>Behavior: Automatically creates branch locally and pushes to remote\nNote: Requires being on a valid branch (not detached HEAD)\n</code></pre></p>"},{"location":"reference/git-operations/#5-file-issues","title":"5. File Issues","text":"<p>File outside repository: <pre><code>Error: \"Cannot add file to git - file is outside repository\"\nSolution: This is a security feature. Only add files within the KB directory.\n</code></pre></p> <p>File not found: <pre><code>Error: \"Cannot add file to git - file does not exist\"\nSolution: Verify file path is correct\n</code></pre></p>"},{"location":"reference/git-operations/#security-considerations","title":"Security Considerations","text":""},{"location":"reference/git-operations/#path-traversal-prevention","title":"Path Traversal Prevention","text":"<p>The <code>add()</code> method validates that files are within repository boundaries:</p> <pre><code># This will fail\ngit_ops.add(\"../../etc/passwd\")  # Outside repo\n\n# This is allowed\ngit_ops.add(\"topics/notes.md\")  # Inside repo\n</code></pre>"},{"location":"reference/git-operations/#credential-handling","title":"Credential Handling","text":"<ul> <li>GitHub tokens are never logged</li> <li>HTTPS URLs in logs hide credentials</li> <li>Credentials are only injected into HTTPS URLs, never SSH</li> </ul>"},{"location":"reference/git-operations/#safe-branch-operations","title":"Safe Branch Operations","text":"<ul> <li>Detached HEAD state is detected and blocks dangerous operations</li> <li>Uncommitted changes are stashed before branch switches</li> <li>Stash failures prevent branch switches (no data loss)</li> </ul>"},{"location":"reference/git-operations/#testing","title":"Testing","text":"<p>See <code>tests/test_git_ops.py</code> for comprehensive test coverage:</p> <ul> <li>Basic operations (add, commit, push, pull)</li> <li>HTTPS authentication configuration</li> <li>Error handling (authentication, conflicts, missing remotes)</li> <li>Remote branch creation</li> <li>Detached HEAD detection</li> <li>File path validation</li> <li>Stash handling</li> </ul> <p>Run tests: <pre><code>pytest tests/test_git_ops.py -v\n</code></pre></p>"},{"location":"reference/git-operations/#related-documentation","title":"Related Documentation","text":"<ul> <li>KB Synchronization Architecture</li> <li>Knowledge Base Setup</li> <li>Troubleshooting</li> </ul>"},{"location":"reference/overview/","title":"Coming Soon","text":"<p>This documentation page is under construction.</p> <p>For now, please refer to the README or check back later.</p>"},{"location":"reference/security/","title":"Security Best Practices","text":"<p>This section outlines security practices for running tg-note in production.</p>"},{"location":"reference/security/#secrets-and-credentials","title":"Secrets and Credentials","text":"<ul> <li>Store tokens encrypted at rest; do not commit secrets to git</li> <li>Restrict file permissions for keys in <code>./data</code> (use mode <code>600</code>)</li> <li>Prefer per-user tokens over global tokens; scope minimally</li> </ul>"},{"location":"reference/security/#network-and-services","title":"Network and Services","text":"<ul> <li>Limit exposed ports; run services behind a reverse proxy</li> <li>Keep dependencies up to date; patch regularly</li> </ul>"},{"location":"reference/security/#data-protection","title":"Data Protection","text":"<ul> <li>Back up the encryption key at <code>./data/.credentials_key</code> securely</li> <li>Rotate credentials on compromise or staff changes</li> </ul>"},{"location":"reference/security/#incident-response","title":"Incident Response","text":"<ul> <li>Revoke leaked tokens immediately</li> <li>Audit logs for suspicious git operations</li> </ul>"},{"location":"reference/security/#related","title":"Related","text":"<ul> <li>Git Credentials Management</li> <li>Troubleshooting</li> </ul>"},{"location":"reference/troubleshooting/","title":"Troubleshooting","text":""},{"location":"reference/troubleshooting/#tests-pytest-command-not-found","title":"Tests: <code>pytest: command not found</code>","text":"<p>Some environments (e.g., system Python 3.13) install packages into user site without exposing console scripts on PATH. Use the module form instead:</p> <pre><code>python -m pytest\n</code></pre> <p>Alternatively, ensure your virtual environment is active so <code>pytest</code> is on PATH.</p>"},{"location":"reference/troubleshooting/#git-push-authentication-errors","title":"Git push: authentication errors","text":"<p>If pushing to <code>https://github.com/...</code> fails with username/password errors:</p> <ul> <li>Switch to SSH remote: <code>git remote set-url origin git@github.com:user/repo.git</code></li> <li>Or configure a credential helper: <code>git config credential.helper store</code></li> <li>Or use a personal access token (PAT) in the HTTPS URL.</li> </ul> <p><code>GitOperations</code> detects HTTPS and logs guidance. It also avoids double credential injection.</p>"},{"location":"reference/troubleshooting/#missing-optional-dependencies","title":"Missing optional dependencies","text":"<p>Vector search and some agents require extras. Install as needed:</p> <pre><code>pip install -e \".[vector-search]\"\npip install -e \".[mcp]\"\npip install -e \".[mem-agent]\"\n</code></pre>"},{"location":"user-guide/bot-commands/","title":"Bot Commands","text":"<p>Complete reference for all tg-note bot commands.</p>"},{"location":"user-guide/bot-commands/#working-modes","title":"Working Modes","text":"<p>The bot has three working modes that you can switch between:</p>"},{"location":"user-guide/bot-commands/#note-note-creation-mode-default","title":"/note \u2014 Note Creation Mode (Default)","text":"<p>Switches the bot to knowledge base creation mode.</p> <p>Usage: <pre><code>/note\n</code></pre></p> <p>Reply example: <pre><code>\ud83d\udcdd Note creation mode is active!\n\nYour messages will be analyzed and saved to the knowledge base.\nSend a message, a forward, or a document to process.\n\nSwitch: /ask | /agent\n</code></pre></p> <p>What it does: - Analyze incoming messages - Create structured notes in knowledge base - Auto-categorize content - Save to Git repository</p>"},{"location":"user-guide/bot-commands/#ask-question-mode","title":"/ask \u2014 Question Mode","text":"<p>Switches the bot to question mode for querying your knowledge base.</p> <p>Usage: <pre><code>/ask\n</code></pre></p> <p>Requirement: - Knowledge base must be configured via <code>/setkb</code></p> <p>Reply example: <pre><code>\ud83e\udd14 Question mode is active!\n\nYou can now ask questions about your knowledge base.\nThe agent will search and answer based on your content.\n\nSwitch: /note | /agent\n</code></pre></p>"},{"location":"user-guide/bot-commands/#agent-agent-mode-full-access","title":"/agent \u2014 Agent Mode (Full Access)","text":"<p>Switches the bot to agent mode with full autonomous capabilities.</p> <p>Usage: <pre><code>/agent\n</code></pre></p> <p>Requirement: - Knowledge base must be configured via <code>/setkb</code></p> <p>Reply example: <pre><code>\ud83e\udd16 Agent mode is active!\n\nThe agent can now perform any KB tasks:\n\u2022 Answer questions\n\u2022 Add new information\n\u2022 Edit existing notes\n\u2022 Restructure the knowledge base\n\nDescribe what to do; the agent will complete it autonomously.\n\nSwitch: /note | /ask\n</code></pre></p>"},{"location":"user-guide/bot-commands/#basic-commands","title":"Basic Commands","text":""},{"location":"user-guide/bot-commands/#start","title":"/start","text":"<p>Open the main interactive menu with buttons.</p> <p>Usage: <pre><code>/start\n</code></pre></p> <p>Shows main menu with options: - \ud83d\udcda \u0411\u0430\u0437\u0430 \u0437\u043d\u0430\u043d\u0438\u0439 - Manage your knowledge base - \ud83d\udd04 \u0420\u0435\u0436\u0438\u043c \u0440\u0430\u0431\u043e\u0442\u044b - Switch between modes (note/ask/agent) - \u2699\ufe0f \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 - Configure bot settings - \ud83d\udd27 MCP \u0441\u0435\u0440\u0432\u0435\u0440\u044b - Manage MCP integrations - \ud83d\udcac \u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 - Manage conversation context - \u2753 \u041f\u043e\u043c\u043e\u0449\u044c - Get help</p>"},{"location":"user-guide/bot-commands/#help","title":"/help","text":"<p>Show detailed help text with all available commands.</p> <p>Usage: <pre><code>/help\n</code></pre></p>"},{"location":"user-guide/bot-commands/#knowledge-base-commands","title":"Knowledge Base Commands","text":""},{"location":"user-guide/bot-commands/#kb","title":"/kb","text":"<p>Open interactive knowledge base management menu.</p> <p>Usage: <pre><code>/kb\n</code></pre></p> <p>If you have a KB configured: - \u2139\ufe0f View KB information - \ud83d\udd04 Switch to another KB - \u2795 Create new KB - \ud83d\udcd6 Setup MkDocs (for GitHub repos only)</p> <p>If no KB is configured: - \ud83d\udcc1 Create local KB - \ud83c\udf10 Connect GitHub repository</p> <p>All KB operations are now done through buttons - you only need to type when providing new information (KB name, GitHub URL, etc.).</p>"},{"location":"user-guide/bot-commands/#setkb-alternative-command","title":"/setkb (Alternative Command)","text":"<p>Setup or change knowledge base location using direct command.</p> <p>Note: Using the <code>/kb</code> button interface is now the recommended way to manage knowledge bases.</p> <p>Usage: <pre><code>/setkb &lt;name|url&gt;\n</code></pre></p> <p>Examples: <pre><code># Local KB\n/setkb my-notes\n\n# GitHub repository\n/setkb https://github.com/username/kb-repo\n\n# Private repo (configure auth separately)\n/setkb https://github.com/username/private-kb\n</code></pre></p>"},{"location":"user-guide/bot-commands/#setupmkdocs","title":"/setupmkdocs","text":"<p>Configure MkDocs for GitHub-based knowledge bases to build and deploy static documentation.</p> <p>Usage: <pre><code>/setupmkdocs\n</code></pre></p> <p>Requirements: - Knowledge base must be GitHub-based (configured via <code>/setkb &lt;github_url&gt;</code>) - MkDocs must not be already configured</p> <p>What it does: - Creates <code>mkdocs.yml</code> configuration file - Sets up <code>docs/</code> directory with structured content - Adds <code>.github/workflows/docs.yml</code> for automatic deployment - Creates <code>requirements-docs.txt</code> with dependencies - Updates <code>.gitignore</code> to exclude build artifacts</p> <p>After running: 1. Commit and push changes to GitHub 2. Enable GitHub Pages in repo settings (Settings \u2192 Pages \u2192 Source: GitHub Actions) 3. Documentation will be automatically built and deployed on every push</p> <p>Your docs will be available at: <code>https://&lt;username&gt;.github.io/&lt;repo-name&gt;/</code></p>"},{"location":"user-guide/bot-commands/#status","title":"Status","text":""},{"location":"user-guide/bot-commands/#status_1","title":"/status","text":"<p>Show processing statistics and current mode.</p> <p>Usage: <pre><code>/status\n</code></pre></p> <p>Returns: - Messages processed - Pending groups - Last processed time - Knowledge base info - Git integration status - Current mode and how to switch</p>"},{"location":"user-guide/bot-commands/#settings","title":"Settings","text":""},{"location":"user-guide/bot-commands/#settings_1","title":"/settings","text":"<p>Open interactive settings menu.</p>"},{"location":"user-guide/bot-commands/#viewsettings-category","title":"/viewsettings [category]","text":"<p>View all settings or filter by category.</p>"},{"location":"user-guide/bot-commands/#resetsetting","title":"/resetsetting  <p>Reset a setting to default.</p>","text":""},{"location":"user-guide/bot-commands/#kbsettings","title":"/kbsettings <p>Quick access to KB settings.</p>","text":""},{"location":"user-guide/bot-commands/#agentsettings","title":"/agentsettings <p>Quick access to agent settings.</p> <p>See also: - Settings Management - Working with Content - Knowledge Base Setup</p>","text":""},{"location":"user-guide/file-format-recognition/","title":"File format recognition","text":""},{"location":"user-guide/file-format-recognition/#overview","title":"Overview","text":"<p>tg-note supports automatic recognition and processing of various file formats using Docling. When you send a file to the bot, the system automatically extracts text content and integrates it into your knowledge base.</p>"},{"location":"user-guide/file-format-recognition/#supported-formats","title":"Supported formats","text":""},{"location":"user-guide/file-format-recognition/#documents","title":"Documents","text":"<ul> <li>PDF (<code>.pdf</code>)</li> <li>Word (<code>.docx</code>)</li> <li>PowerPoint (<code>.pptx</code>)</li> <li>Excel (<code>.xlsx</code>)</li> </ul>"},{"location":"user-guide/file-format-recognition/#text-files","title":"Text files","text":"<ul> <li>Markdown (<code>.md</code>)</li> <li>HTML (<code>.html</code>)</li> <li>Plain Text (<code>.txt</code>)</li> </ul>"},{"location":"user-guide/file-format-recognition/#images","title":"Images","text":"<ul> <li>JPEG (<code>.jpg</code>, <code>.jpeg</code>)</li> <li>PNG (<code>.png</code>)</li> <li>TIFF (<code>.tiff</code>)</li> </ul>"},{"location":"user-guide/file-format-recognition/#how-it-works","title":"How it works","text":""},{"location":"user-guide/file-format-recognition/#automatic-processing","title":"Automatic processing","text":"<ol> <li>Send a file to the bot (attachment or forwarded)</li> <li>The bot downloads the file to a temporary directory</li> <li>Docling processes the file and extracts text</li> <li>The content is merged with the message text for analysis</li> <li>The result is saved to the knowledge base</li> </ol>"},{"location":"user-guide/file-format-recognition/#example","title":"Example","text":"<pre><code># Just send a file to the bot\n# The bot will:\n# 1. Detect file format\n# 2. Extract content\n# 3. Analyze with the AI agent\n# 4. Save to the KB with proper structure\n</code></pre>"},{"location":"user-guide/file-format-recognition/#architecture","title":"Architecture","text":""},{"location":"user-guide/file-format-recognition/#components","title":"Components","text":"<ol> <li><code>FileProcessor</code> (<code>src/processor/file_processor.py</code>)</li> <li>Manages file processing</li> <li>Docling integration</li> <li>Telegram file download</li> <li> <p>Temporary storage</p> </li> <li> <p><code>ContentParser</code> (<code>src/processor/content_parser.py</code>)</p> </li> <li>Adds <code>parse_group_with_files()</code></li> <li>Merges file content with message text</li> <li> <p>Async processing</p> </li> <li> <p><code>BotHandlers</code> (<code>src/bot/handlers.py</code>)</p> </li> <li>Uses new method to process files</li> <li>Supports documents and photos</li> <li>Automatic temp files cleanup</li> </ol>"},{"location":"user-guide/file-format-recognition/#processing-flow","title":"Processing flow","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Telegram Message\u2502\n\u2502   with File     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502\n         \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Bot Handlers   \u2502\n\u2502 (download file) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502\n         \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 File Processor  \u2502\n\u2502   (Docling)     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502\n         \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Content Parser  \u2502\n\u2502 (merge content) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502\n         \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   AI Agent      \u2502\n\u2502  (analysis)     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502\n         \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Knowledge Base  \u2502\n\u2502    (save)       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/file-format-recognition/#installation","title":"Installation","text":"<p>Docling is installed as a dependency.</p> <pre><code># Poetry\npoetry install\n\n# Or pip\npip install -e \".\"\n</code></pre>"},{"location":"user-guide/file-format-recognition/#verify-installation","title":"Verify installation","text":"<pre><code>from src.processor.file_processor import FileProcessor\n\nprocessor = FileProcessor()\nif processor.is_available():\n    print(\"Docling available!\")\n    print(f\"Supported formats: {processor.get_supported_formats()}\")\nelse:\n    print(\"Docling not available\")\n</code></pre>"},{"location":"user-guide/file-format-recognition/#examples","title":"Examples","text":""},{"location":"user-guide/file-format-recognition/#pdf-document","title":"PDF document","text":"<pre><code>1. Send a PDF file\n2. Bot replies: \"\ud83d\udd04 Processing message...\"\n3. After processing you get details:\n   \u2705 Saved successfully!\n   \ud83d\udcc1 File: research-paper-2024-10-04.md\n   \ud83d\udcc2 Category: science/research\n   \ud83c\udff7 Tags: pdf, research, ai\n</code></pre>"},{"location":"user-guide/file-format-recognition/#image-with-text","title":"Image with text","text":"<pre><code>1. Send an image (screenshot or document photo)\n2. Docling extracts text from the image\n3. The text is analyzed and saved to the KB\n</code></pre>"},{"location":"user-guide/file-format-recognition/#multiple-files","title":"Multiple files","text":"<pre><code>1. Send multiple files in a row\n2. Bot groups them (30 seconds)\n3. All files are processed and merged into one note\n</code></pre>"},{"location":"user-guide/file-format-recognition/#error-handling","title":"Error handling","text":""},{"location":"user-guide/file-format-recognition/#unsupported-format","title":"Unsupported format","text":"<ul> <li>The bot still tries to extract text</li> <li>Processes the rest of the message content</li> <li>Does not abort processing</li> </ul>"},{"location":"user-guide/file-format-recognition/#file-processing-error","title":"File processing error","text":"<ul> <li>Error is logged</li> <li>User can be notified (optional)</li> <li>Other content is still processed</li> </ul>"},{"location":"user-guide/file-format-recognition/#temporary-files","title":"Temporary files","text":"<ul> <li>Temporary directories are created</li> <li>Files are cleaned up after processing</li> <li>Exceptions on cleanup are handled</li> </ul>"},{"location":"user-guide/file-format-recognition/#settings","title":"Settings","text":"<p>File format recognition works out of the box. You can customize whether it's enabled and which formats are processed:</p>"},{"location":"user-guide/file-format-recognition/#enablingdisabling-media-processing","title":"Enabling/Disabling media processing","text":"<p>You can completely enable or disable media file processing using the master switch:</p> <pre><code># config.yaml\n\n# Enable media processing (default)\nMEDIA_PROCESSING_ENABLED: true\n\n# Disable all media processing\nMEDIA_PROCESSING_ENABLED: false\n</code></pre> <p>When <code>MEDIA_PROCESSING_ENABLED</code> is set to <code>false</code>, all file processing is disabled regardless of other settings.</p>"},{"location":"user-guide/file-format-recognition/#enablingdisabling-specific-formats","title":"Enabling/Disabling specific formats","text":"<p>You can control which file formats are processed by configuring <code>MEDIA_PROCESSING_DOCLING_FORMATS</code> in <code>config.yaml</code>:</p> <pre><code># config.yaml\n\n# Enable all formats (default)\nMEDIA_PROCESSING_DOCLING_FORMATS:\n  - pdf\n  - docx\n  - pptx\n  - xlsx\n  - html\n  - md\n  - txt\n  - jpg\n  - jpeg\n  - png\n  - tiff\n\n# Enable only documents (no images)\nMEDIA_PROCESSING_DOCLING_FORMATS:\n  - pdf\n  - docx\n  - pptx\n  - xlsx\n\n# Enable only specific formats\nMEDIA_PROCESSING_DOCLING_FORMATS:\n  - pdf\n  - jpg\n  - png\n\n# Disable all media processing\nMEDIA_PROCESSING_DOCLING_FORMATS: []\n</code></pre>"},{"location":"user-guide/file-format-recognition/#message-grouping-timeout","title":"Message grouping timeout","text":"<pre><code># config.yaml\nMESSAGE_GROUP_TIMEOUT: 30  # seconds\n</code></pre>"},{"location":"user-guide/file-format-recognition/#media-processing-configuration-structure","title":"Media processing configuration structure","text":"<p>The media processing configuration has a hierarchical structure:</p> <pre><code># Master switch - controls all media processing\nMEDIA_PROCESSING_ENABLED: true\n\n# Per-framework format configuration\nMEDIA_PROCESSING_DOCLING_FORMATS:\n  - pdf\n  - jpg\n  - ...\n\n# Future frameworks can be added\n# MEDIA_PROCESSING_SOME_OTHER_FRAMEWORK_FORMATS:\n#   - mp3\n#   - mp4\n#   - ...\n</code></pre>"},{"location":"user-guide/file-format-recognition/#configuration-examples","title":"Configuration examples","text":"<pre><code># Example 1: Completely disable media processing\nMEDIA_PROCESSING_ENABLED: false\n# When disabled, format lists are ignored\n\n# Example 2: Enable only PDF processing\nMEDIA_PROCESSING_ENABLED: true\nMEDIA_PROCESSING_DOCLING_FORMATS:\n  - pdf\n\n# Example 3: Enable documents but not images\nMEDIA_PROCESSING_ENABLED: true\nMEDIA_PROCESSING_DOCLING_FORMATS:\n  - pdf\n  - docx\n  - pptx\n  - xlsx\n\n# Example 4: Enable only images (OCR)\nMEDIA_PROCESSING_ENABLED: true\nMEDIA_PROCESSING_DOCLING_FORMATS:\n  - jpg\n  - jpeg\n  - png\n  - tiff\n</code></pre>"},{"location":"user-guide/file-format-recognition/#advanced-usage","title":"Advanced usage","text":""},{"location":"user-guide/file-format-recognition/#programmatic-access","title":"Programmatic access","text":"<pre><code>from pathlib import Path\nfrom src.processor.file_processor import FileProcessor\n\nasync def process_my_file():\n    processor = FileProcessor()\n\n    if not processor.is_available():\n        print(\"Docling not available\")\n        return\n\n    result = await processor.process_file(Path(\"my_document.pdf\"))\n\n    if result:\n        print(f\"Extracted {len(result['text'])} chars\")\n        print(f\"Metadata: {result['metadata']}\")\n        print(f\"Text: {result['text'][:100]}...\")\n</code></pre>"},{"location":"user-guide/file-format-recognition/#agent-integration","title":"Agent integration","text":"<pre><code># in content_parser.py\ncontent = await self.content_parser.parse_group_with_files(group, bot=self.bot)\n\n# content['text'] contains:\n# - Message text\n# - Extracted file content\n# - File metadata\n</code></pre>"},{"location":"user-guide/file-format-recognition/#performance","title":"Performance","text":""},{"location":"user-guide/file-format-recognition/#optimization","title":"Optimization","text":"<ul> <li>Async IO for file operations</li> <li>Temporary files cleaned automatically</li> <li>Sequential but efficient handling of multiple files</li> </ul>"},{"location":"user-guide/file-format-recognition/#telegram-limits","title":"Telegram limits","text":"<ul> <li>Max file size: 20 MB (bots)</li> <li>Files hosted by Telegram temporarily</li> <li>Download speed depends on network</li> </ul>"},{"location":"user-guide/file-format-recognition/#debugging","title":"Debugging","text":"<p>Enable detailed logging: <pre><code># config.yaml\nLOG_LEVEL: DEBUG\n</code></pre></p> <p>You will see: - File download progress - Docling results - Errors and warnings - Cleanup operations</p>"},{"location":"user-guide/file-format-recognition/#check-docling","title":"Check Docling","text":"<pre><code>import logging\nlogging.basicConfig(level=logging.DEBUG)\nfrom src.processor.file_processor import FileProcessor\n\nprocessor = FileProcessor()\nprint(f\"Docling available: {processor.is_available()}\")\nprint(f\"Supported: {processor.get_supported_formats()}\")\n</code></pre>"},{"location":"user-guide/file-format-recognition/#known-issues","title":"Known issues","text":"<ul> <li>Large files (&gt;10 MB) may take longer</li> <li>Low-quality images reduce OCR quality</li> <li>Complex PDF layout may require extra processing</li> </ul>"},{"location":"user-guide/file-format-recognition/#support","title":"Support","text":"<ul> <li>Docs: https://artyomzemlyak.github.io/tg-note/</li> <li>Issues: https://github.com/ArtyomZemlyak/tg-note/issues</li> <li>Discussions: https://github.com/ArtyomZemlyak/tg-note/discussions</li> </ul>"},{"location":"user-guide/file-format-recognition/#roadmap","title":"Roadmap","text":"<ul> <li>\u2705 Basic file support</li> <li>\ud83d\udea7 Audio/video files</li> <li>\ud83d\udccb Better table extraction</li> <li>\ud83d\udccb Archive support (.zip, .tar.gz)</li> <li>\ud83d\udccb Batch processing</li> <li>\ud83d\udccb Caching</li> </ul>"},{"location":"user-guide/git-credentials/","title":"Git Credentials Management","text":""},{"location":"user-guide/git-credentials/#_1","title":"\u041e\u0431\u0437\u043e\u0440","text":"<p>tg-note \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0435 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0445 Git credentials (GitHub \u0438 GitLab \u0442\u043e\u043a\u0435\u043d\u043e\u0432) \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442:</p> <ul> <li>\ud83d\udd10 \u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0435 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435: \u0422\u043e\u043a\u0435\u043d\u044b \u0448\u0438\u0444\u0440\u0443\u044e\u0442\u0441\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Fernet (AES-128)</li> <li>\ud83d\udc65 \u041c\u0443\u043b\u044c\u0442\u0438\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0440\u0435\u0436\u0438\u043c: \u041a\u0430\u0436\u0434\u044b\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043c\u043e\u0436\u0435\u0442 \u0438\u043c\u0435\u0442\u044c \u0441\u0432\u043e\u0438 \u0442\u043e\u043a\u0435\u043d\u044b</li> <li>\ud83c\udf10 \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 GitHub \u0438 GitLab: \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u043e\u0431\u0435\u0438\u043c\u0438 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0430\u043c\u0438</li> <li>\ud83d\ude80 \u041f\u0440\u043e\u0441\u0442\u043e\u0435 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435: \u041a\u043e\u043c\u0430\u043d\u0434\u044b \u0432 Telegram \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f/\u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u043e\u0432</li> </ul>"},{"location":"user-guide/git-credentials/#_2","title":"\u0417\u0430\u0447\u0435\u043c \u044d\u0442\u043e \u043d\u0443\u0436\u043d\u043e?","text":"<p>\u041f\u0440\u0438 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 Git \u0447\u0435\u0440\u0435\u0437 HTTPS \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u0430 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f. \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u0430 \u0432 <code>.env</code> \u0444\u0430\u0439\u043b\u0435:</p> <p>\u274c \u041e\u0434\u0438\u043d \u0442\u043e\u043a\u0435\u043d \u043d\u0430 \u0432\u0441\u0435\u0445 - \u0432\u0441\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u043e\u0434\u0438\u043d \u0438 \u0442\u043e\u0442 \u0436\u0435 \u0442\u043e\u043a\u0435\u043d \u274c \u041d\u0435\u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u0430\u044f \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0430 - \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0430 \u0442\u043e\u043a\u0435\u043d\u0430 \u0447\u0435\u0440\u0435\u0437 \u0434\u0440\u0443\u0433\u0438\u0435 \u043a\u0430\u043d\u0430\u043b\u044b \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043d\u0435\u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0439 \u274c \u0421\u043b\u043e\u0436\u043d\u043e\u0435 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 - \u043d\u0443\u0436\u043d\u043e \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0444\u0430\u0439\u043b\u044b \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435</p> <p>\u2705 \u0420\u0435\u0448\u0435\u043d\u0438\u0435: \u041f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u0430\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0442\u043e\u043a\u0435\u043d\u044b \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f</p>"},{"location":"user-guide/git-credentials/#_3","title":"\u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c","text":""},{"location":"user-guide/git-credentials/#_4","title":"\u041a\u0430\u043a \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u0442\u043e\u043a\u0435\u043d\u044b?","text":"<ol> <li>\u0428\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u0435: \u0412\u0441\u0435 \u0442\u043e\u043a\u0435\u043d\u044b \u0448\u0438\u0444\u0440\u0443\u044e\u0442\u0441\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Fernet (\u0441\u0438\u043c\u043c\u0435\u0442\u0440\u0438\u0447\u043d\u043e\u0435 \u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u0435, AES-128)</li> <li>\u041a\u043b\u044e\u0447 \u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u044f: \u0425\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0432 \u0444\u0430\u0439\u043b\u0435 <code>./data/.credentials_key</code> \u0441 \u043f\u0440\u0430\u0432\u0430\u043c\u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u0430 <code>600</code> (\u0442\u043e\u043b\u044c\u043a\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u0435\u0446 \u043c\u043e\u0436\u0435\u0442 \u0447\u0438\u0442\u0430\u0442\u044c)</li> <li>\u0417\u0430\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435: \u0425\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u0432 <code>./data/user_credentials.enc</code> \u0441 \u043f\u0440\u0430\u0432\u0430\u043c\u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u0430 <code>600</code></li> <li>\u0411\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043a\u0430 \u0444\u0430\u0439\u043b\u043e\u0432: \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f file locking \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u044f race conditions</li> </ol>"},{"location":"user-guide/git-credentials/#_5","title":"\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u043f\u043e \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438","text":"<p>\u2705 DO: - \u0421\u043e\u0437\u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u0442\u043e\u043a\u0435\u043d\u044b \u0441 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u043c\u0438 \u043f\u0440\u0430\u0432\u0430\u043c\u0438 (<code>repo</code> \u0434\u043b\u044f GitHub, <code>write_repository</code> \u0434\u043b\u044f GitLab) - \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0439\u0442\u0435 \u0441\u0440\u043e\u043a \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u043e\u0432 - \u0423\u0434\u0430\u043b\u044f\u0439\u0442\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0441 \u0442\u043e\u043a\u0435\u043d\u0430\u043c\u0438 \u043f\u043e\u0441\u043b\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0431\u043e\u0442\u0443 - \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0440\u0430\u0437\u043d\u044b\u0435 \u0442\u043e\u043a\u0435\u043d\u044b \u0434\u043b\u044f \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432</p> <p>\u274c DON'T: - \u041d\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u0442\u043e\u043a\u0435\u043d\u044b \u0447\u0435\u0440\u0435\u0437 \u043d\u0435\u0437\u0430\u0449\u0438\u0449\u0435\u043d\u043d\u044b\u0435 \u043a\u0430\u043d\u0430\u043b\u044b - \u041d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0442\u043e\u043a\u0435\u043d\u044b \u0441 \u043f\u043e\u043b\u043d\u044b\u043c \u0434\u043e\u0441\u0442\u0443\u043f\u043e\u043c \u043a\u043e \u0432\u0441\u0435\u043c\u0443 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u0443 - \u041d\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0439\u0442\u0435 \u0442\u043e\u043a\u0435\u043d\u044b \u0432 \u043e\u0431\u0449\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u043c\u0435\u0441\u0442\u0430\u0445</p>"},{"location":"user-guide/git-credentials/#_6","title":"\u041a\u043e\u043c\u0430\u043d\u0434\u044b \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f","text":""},{"location":"user-guide/git-credentials/#settoken-","title":"<code>/settoken</code> - \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0442\u043e\u043a\u0435\u043d","text":"<p>\u041a\u043e\u043c\u0430\u043d\u0434\u0430 \u0434\u043b\u044f \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0433\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f Git \u0442\u043e\u043a\u0435\u043d\u0430.</p> <p>\u041f\u0440\u043e\u0446\u0435\u0441\u0441:</p> <ol> <li>\u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 <code>/settoken</code> \u0432 \u0447\u0430\u0442\u0435 \u0441 \u0431\u043e\u0442\u043e\u043c</li> <li>\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0443 (GitHub \u0438\u043b\u0438 GitLab)</li> <li>\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0432\u0430\u0448 username</li> <li>\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0432\u0430\u0448 Personal Access Token</li> </ol> <p>\u041f\u0440\u0438\u043c\u0435\u0440:</p> <pre><code>/settoken\n\u2192 \u0412\u044b\u0431\u0440\u0430\u0442\u044c: GitHub\n\u2192 \u0412\u0432\u0435\u0441\u0442\u0438: john_doe\n\u2192 \u0412\u0432\u0435\u0441\u0442\u0438: ghp_xxxxxxxxxxxxxxxxxxxx\n\u2192 \u2705 \u0422\u043e\u043a\u0435\u043d \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d \u0438 \u0437\u0430\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\n</code></pre> <p>\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435: \u041f\u043e\u0441\u043b\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0442\u043e\u043a\u0435\u043d\u0430, \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0443\u0434\u0430\u043b\u044f\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438.</p>"},{"location":"user-guide/git-credentials/#listcredentials-","title":"<code>/listcredentials</code> - \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0442\u043e\u043a\u0435\u043d\u043e\u0432","text":"<p>\u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u043d\u044b\u0445 \u0442\u043e\u043a\u0435\u043d\u0430\u0445 (\u0431\u0435\u0437 \u0440\u0430\u0441\u043a\u0440\u044b\u0442\u0438\u044f \u0441\u0430\u043c\u0438\u0445 \u0442\u043e\u043a\u0435\u043d\u043e\u0432).</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430:</p> <pre><code>\ud83d\udd10 \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u043d\u044b\u0435 Git Credentials\n\n\ud83d\udc19 GITHUB\n  \u2022 Username: john_doe\n  \u2022 Token: \u2705 \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\n  \u2022 Remote: https://github.com/user/repo\n\n\ud83e\udd8a GITLAB\n  \u2022 Username: jane_smith\n  \u2022 Token: \u2705 \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\n</code></pre>"},{"location":"user-guide/git-credentials/#removetoken-","title":"<code>/removetoken</code> - \u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0442\u043e\u043a\u0435\u043d","text":"<p>\u0423\u0434\u0430\u043b\u044f\u0435\u0442 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u043d\u044b\u0435 \u0442\u043e\u043a\u0435\u043d\u044b.</p> <p>\u0412\u0430\u0440\u0438\u0430\u043d\u0442\u044b:</p> <ul> <li>\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0442\u043e\u043a\u0435\u043d \u0434\u043b\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0439 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b (GitHub \u0438\u043b\u0438 GitLab)</li> <li>\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u0442\u043e\u043a\u0435\u043d\u044b \u0441\u0440\u0430\u0437\u0443</li> </ul> <p>\u041f\u0440\u0438\u043c\u0435\u0440:</p> <pre><code>/removetoken\n\u2192 \u0412\u044b\u0431\u0440\u0430\u0442\u044c: GitHub\n\u2192 \u2705 GitHub \u0442\u043e\u043a\u0435\u043d \u0443\u0434\u0430\u043b\u0435\u043d\n</code></pre>"},{"location":"user-guide/git-credentials/#_7","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u043e\u0432","text":""},{"location":"user-guide/git-credentials/#github-personal-access-token","title":"GitHub Personal Access Token","text":"<ol> <li>\u041f\u0435\u0440\u0435\u0439\u0434\u0438\u0442\u0435 \u043d\u0430 GitHub Settings \u2192 Developer settings \u2192 Personal access tokens</li> <li>\u041d\u0430\u0436\u043c\u0438\u0442\u0435 \"Generate new token\" \u2192 \"Generate new token (classic)\"</li> <li>\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \"tg-note bot\")</li> <li>\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 scope: <code>repo</code> (Full control of private repositories)</li> <li>\u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e: \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u0441\u0440\u043e\u043a \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u0430</li> <li>\u041d\u0430\u0436\u043c\u0438\u0442\u0435 \"Generate token\"</li> <li>\u0421\u043a\u043e\u043f\u0438\u0440\u0443\u0439\u0442\u0435 \u0442\u043e\u043a\u0435\u043d (\u043e\u043d \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043a\u0430\u0437\u0430\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u0440\u0430\u0437!)</li> </ol> <p>\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u043f\u0440\u0430\u0432\u0430: - \u2705 <code>repo</code> - \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043f\u0440\u0438\u0432\u0430\u0442\u043d\u044b\u043c\u0438 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044f\u043c\u0438</p>"},{"location":"user-guide/git-credentials/#gitlab-personal-access-token","title":"GitLab Personal Access Token","text":"<ol> <li>\u041f\u0435\u0440\u0435\u0439\u0434\u0438\u0442\u0435 \u043d\u0430 GitLab Settings \u2192 Access Tokens</li> <li>\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \"tg-note bot\")</li> <li>\u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 scopes: <code>write_repository</code></li> <li>\u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e: \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u0441\u0440\u043e\u043a \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0442\u043e\u043a\u0435\u043d\u0430</li> <li>\u041d\u0430\u0436\u043c\u0438\u0442\u0435 \"Create personal access token\"</li> <li>\u0421\u043a\u043e\u043f\u0438\u0440\u0443\u0439\u0442\u0435 \u0442\u043e\u043a\u0435\u043d (\u043e\u043d \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043a\u0430\u0437\u0430\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u0440\u0430\u0437!)</li> </ol> <p>\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u043f\u0440\u0430\u0432\u0430: - \u2705 <code>write_repository</code> - \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044f\u043c\u0438</p>"},{"location":"user-guide/git-credentials/#_8","title":"\u041a\u0430\u043a \u044d\u0442\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442?","text":""},{"location":"user-guide/git-credentials/#credentials","title":"\u041f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442 credentials","text":"<p>\u041f\u0440\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 Git \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442\u0430:</p> <ol> <li>\u041f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u0442\u043e\u043a\u0435\u043d \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f (\u0438\u0437 CredentialsManager) - \u0432\u044b\u0441\u0448\u0438\u0439 \u043f\u0440\u0438\u043e\u0440\u0438\u0442\u0435\u0442</li> <li>\u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0439 \u0442\u043e\u043a\u0435\u043d (\u0438\u0437 <code>.env</code> \u0444\u0430\u0439\u043b\u0430) - fallback</li> </ol> <p>\u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442: - \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u0441 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0442\u043e\u043a\u0435\u043d\u0430\u043c\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0438\u0445 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 - \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u0431\u0435\u0437 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0445 \u0442\u043e\u043a\u0435\u043d\u043e\u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0439 \u0442\u043e\u043a\u0435\u043d (\u0435\u0441\u043b\u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d)</p>"},{"location":"user-guide/git-credentials/#_9","title":"\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b","text":"<p>\u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0443 \u043f\u043e URL \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044f:</p> <ul> <li><code>github.com</code> \u2192 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 GitHub credentials</li> <li><code>gitlab.com</code> \u0438\u043b\u0438 \u0434\u0440\u0443\u0433\u043e\u0439 GitLab \u2192 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 GitLab credentials</li> </ul>"},{"location":"user-guide/git-credentials/#credentials-url","title":"\u0418\u043d\u0436\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 credentials \u0432 URL","text":"<p>\u041f\u0440\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 Git \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 (pull, push), credentials \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0432 HTTPS URL:</p> <pre><code>https://github.com/user/repo.git\n    \u2193\nhttps://username:token@github.com/user/repo.git\n</code></pre>"},{"location":"user-guide/git-credentials/#_10","title":"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0434\u043b\u044f \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430","text":""},{"location":"user-guide/git-credentials/#credentials-fallback","title":"\u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0435 credentials (fallback)","text":"<p>\u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u043c\u043e\u0436\u0435\u0442 \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0435 credentials \u0432 <code>.env</code> \u0444\u0430\u0439\u043b\u0435:</p> <pre><code># GitHub credentials (fallback for users without personal tokens)\nGITHUB_TOKEN=ghp_xxxxxxxxxxxxxxxxxxxx\nGITHUB_USERNAME=admin_username\n\n# GitLab credentials (fallback for users without personal tokens)\nGITLAB_TOKEN=glpat-xxxxxxxxxxxxxxxxxxxx\nGITLAB_USERNAME=admin_username\n</code></pre>"},{"location":"user-guide/git-credentials/#_11","title":"\u041c\u0435\u0441\u0442\u043e\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u043e\u0432","text":"<ul> <li>\u041a\u043b\u044e\u0447 \u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u044f: <code>./data/.credentials_key</code></li> <li>\u0417\u0430\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 credentials: <code>./data/user_credentials.enc</code></li> </ul> <p>\u0412\u0430\u0436\u043d\u043e: - \u041d\u0435 \u0443\u0434\u0430\u043b\u044f\u0439\u0442\u0435 \u043a\u043b\u044e\u0447 \u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u0438\u043d\u0430\u0447\u0435 \u0432\u0441\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u043d\u044b\u0435 \u0442\u043e\u043a\u0435\u043d\u044b \u0441\u0442\u0430\u043d\u0443\u0442 \u043d\u0435\u0447\u0438\u0442\u0430\u0435\u043c\u044b\u043c\u0438 - \u0414\u0435\u043b\u0430\u0439\u0442\u0435 \u0440\u0435\u0437\u0435\u0440\u0432\u043d\u044b\u0435 \u043a\u043e\u043f\u0438\u0438 \u043a\u043b\u044e\u0447\u0430 \u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u044f - \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0430\u0432\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a \u0444\u0430\u0439\u043b\u0430\u043c (600)</p>"},{"location":"user-guide/git-credentials/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/git-credentials/#authentication-failed","title":"\u041e\u0448\u0438\u0431\u043a\u0430: \"Authentication failed\"","text":"<p>\u041f\u0440\u0438\u0447\u0438\u043d\u044b: 1. \u0422\u043e\u043a\u0435\u043d \u043d\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d \u0438\u043b\u0438 \u0443\u0441\u0442\u0430\u0440\u0435\u043b 2. \u0423 \u0442\u043e\u043a\u0435\u043d\u0430 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043f\u0440\u0430\u0432 3. \u0422\u043e\u043a\u0435\u043d \u0431\u044b\u043b \u043e\u0442\u043e\u0437\u0432\u0430\u043d \u043d\u0430 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435</p> <p>\u0420\u0435\u0448\u0435\u043d\u0438\u0435: 1. \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 <code>/listcredentials</code> - \u043f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430 2. \u0423\u0434\u0430\u043b\u0438\u0442\u0435 \u0441\u0442\u0430\u0440\u044b\u0439 \u0442\u043e\u043a\u0435\u043d: <code>/removetoken</code> 3. \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043d\u043e\u0432\u044b\u0439 \u0442\u043e\u043a\u0435\u043d \u043d\u0430 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435 4. \u0414\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u043d\u043e\u0432\u044b\u0439 \u0442\u043e\u043a\u0435\u043d: <code>/settoken</code></p>"},{"location":"user-guide/git-credentials/#could-not-decrypt-credentials","title":"\u041e\u0448\u0438\u0431\u043a\u0430: \"Could not decrypt credentials\"","text":"<p>\u041f\u0440\u0438\u0447\u0438\u043d\u0430: \u041a\u043b\u044e\u0447 \u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0431\u044b\u043b \u0438\u0437\u043c\u0435\u043d\u0435\u043d \u0438\u043b\u0438 \u0443\u0434\u0430\u043b\u0435\u043d.</p> <p>\u0420\u0435\u0448\u0435\u043d\u0438\u0435: 1. \u0423\u0434\u0430\u043b\u0438\u0442\u0435 \u0432\u0441\u0435 \u0442\u043e\u043a\u0435\u043d\u044b: <code>/removetoken</code> \u2192 \u0423\u0434\u0430\u043b\u0438\u0442\u044c \u0432\u0441\u0435 2. \u0414\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u0442\u043e\u043a\u0435\u043d\u044b \u0437\u0430\u043d\u043e\u0432\u043e: <code>/settoken</code></p>"},{"location":"user-guide/git-credentials/#_12","title":"\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441 \u0442\u043e\u043a\u0435\u043d\u043e\u043c \u043d\u0435 \u0443\u0434\u0430\u043b\u0438\u043b\u043e\u0441\u044c","text":"<p>\u0420\u0435\u0448\u0435\u043d\u0438\u0435: 1. \u0423\u0434\u0430\u043b\u0438\u0442\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432\u0440\u0443\u0447\u043d\u0443\u044e 2. \u0415\u0441\u043b\u0438 \u0442\u043e\u043a\u0435\u043d \u0431\u044b\u043b \u0441\u043a\u043e\u043c\u043f\u0440\u043e\u043c\u0435\u0442\u0438\u0440\u043e\u0432\u0430\u043d - \u043e\u0442\u0437\u043e\u0432\u0438\u0442\u0435 \u0435\u0433\u043e \u043d\u0430 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435 3. \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043d\u043e\u0432\u044b\u0439 \u0442\u043e\u043a\u0435\u043d</p>"},{"location":"user-guide/git-credentials/#_13","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f","text":""},{"location":"user-guide/git-credentials/#1","title":"\u041f\u0440\u0438\u043c\u0435\u0440 1: \u041f\u0435\u0440\u0432\u043e\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0430\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430","text":"<pre><code>1. \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0442\u043e\u043a\u0435\u043d \u043d\u0430 GitHub\n2. \u041e\u0442\u043f\u0440\u0430\u0432\u044c\u0442\u0435 /settoken \u0431\u043e\u0442\u0443\n3. \u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 GitHub\n4. \u0412\u0432\u0435\u0434\u0438\u0442\u0435 username: john_doe\n5. \u0412\u0432\u0435\u0434\u0438\u0442\u0435 token: ghp_xxxxxxxxxxxxxxxxxxxx\n6. \u2705 \u0422\u043e\u043a\u0435\u043d \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d!\n\n\u0422\u0435\u043f\u0435\u0440\u044c \u0432\u0441\u0435 Git \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0431\u0443\u0434\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0430\u0448 \u0442\u043e\u043a\u0435\u043d \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438.\n</code></pre>"},{"location":"user-guide/git-credentials/#2","title":"\u041f\u0440\u0438\u043c\u0435\u0440 2: \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u043c\u0438 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0430\u043c\u0438","text":"<pre><code>1. \u0414\u043e\u0431\u0430\u0432\u044c\u0442\u0435 GitHub \u0442\u043e\u043a\u0435\u043d:\n   /settoken \u2192 GitHub \u2192 username \u2192 token\n\n2. \u0414\u043e\u0431\u0430\u0432\u044c\u0442\u0435 GitLab \u0442\u043e\u043a\u0435\u043d:\n   /settoken \u2192 GitLab \u2192 username \u2192 token\n\n3. \u041f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435:\n   /listcredentials\n\n\u0411\u043e\u0442 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0432\u044b\u0431\u0435\u0440\u0435\u0442 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0439 \u0442\u043e\u043a\u0435\u043d \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u044b.\n</code></pre>"},{"location":"user-guide/git-credentials/#3","title":"\u041f\u0440\u0438\u043c\u0435\u0440 3: \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430","text":"<pre><code>1. \u0421\u0442\u0430\u0440\u044b\u0439 \u0442\u043e\u043a\u0435\u043d \u0438\u0441\u0442\u0435\u043a\n2. \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043d\u043e\u0432\u044b\u0439 \u0442\u043e\u043a\u0435\u043d \u043d\u0430 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435\n3. \u041e\u0442\u043f\u0440\u0430\u0432\u044c\u0442\u0435 /settoken\n4. \u0412\u044b\u0431\u0435\u0440\u0438\u0442\u0435 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0443 (GitHub/GitLab)\n5. \u0412\u0432\u0435\u0434\u0438\u0442\u0435 username \u0438 \u043d\u043e\u0432\u044b\u0439 token\n\n\u041d\u043e\u0432\u044b\u0439 \u0442\u043e\u043a\u0435\u043d \u0437\u0430\u043c\u0435\u043d\u0438\u0442 \u0441\u0442\u0430\u0440\u044b\u0439 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438.\n</code></pre>"},{"location":"user-guide/git-credentials/#faq","title":"FAQ","text":"<p>Q: \u041c\u043e\u0436\u043d\u043e \u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c SSH \u0432\u043c\u0435\u0441\u0442\u043e HTTPS?</p> <p>A: \u0414\u0430, \u0435\u0441\u043b\u0438 \u0432\u0430\u0448 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 SSH URL (<code>git@github.com:...</code>), \u0442\u043e\u043a\u0435\u043d\u044b \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u044e\u0442\u0441\u044f. SSH \u043a\u043b\u044e\u0447\u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0447\u0435\u0440\u0435\u0437 \u0441\u0438\u0441\u0442\u0435\u043c\u0443.</p> <p>Q: \u0427\u0442\u043e \u043f\u0440\u043e\u0438\u0437\u043e\u0439\u0434\u0435\u0442 \u0435\u0441\u043b\u0438 \u044f \u043f\u043e\u0442\u0435\u0440\u044f\u044e \u043a\u043b\u044e\u0447 \u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u044f?</p> <p>A: \u0412\u0441\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u043d\u044b\u0435 \u0442\u043e\u043a\u0435\u043d\u044b \u0441\u0442\u0430\u043d\u0443\u0442 \u043d\u0435\u0447\u0438\u0442\u0430\u0435\u043c\u044b\u043c\u0438. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u043d\u0443\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0442\u043e\u043a\u0435\u043d\u044b \u0437\u0430\u043d\u043e\u0432\u043e \u0447\u0435\u0440\u0435\u0437 <code>/settoken</code>.</p> <p>Q: \u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e \u043b\u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u0442\u043e\u043a\u0435\u043d \u0447\u0435\u0440\u0435\u0437 Telegram?</p> <p>A: Telegram \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439. \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e: - \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441 \u0442\u043e\u043a\u0435\u043d\u043e\u043c \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0443\u0434\u0430\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f - \u0422\u043e\u043a\u0435\u043d \u0448\u0438\u0444\u0440\u0443\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0434 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c - \u0422\u043e\u043a\u0435\u043d \u043d\u0435 \u043b\u043e\u0433\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0435</p> <p>Q: \u041c\u043e\u0436\u0435\u0442 \u043b\u0438 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0432\u0438\u0434\u0435\u0442\u044c \u043c\u043e\u0438 \u0442\u043e\u043a\u0435\u043d\u044b?</p> <p>A: \u041d\u0435\u0442, \u0442\u043e\u043a\u0435\u043d\u044b \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u0432 \u0437\u0430\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u043c \u0432\u0438\u0434\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u043c\u043e\u0436\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0444\u0430\u0439\u043b \u0441 \u0437\u0430\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u0442\u043e\u043a\u0435\u043d\u0430\u043c\u0438, \u043d\u043e \u043d\u0435 \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u0438\u0445.</p> <p>Q: \u041c\u043e\u0436\u043d\u043e \u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043e\u0434\u0438\u043d \u0442\u043e\u043a\u0435\u043d \u0434\u043b\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0435\u0432?</p> <p>A: \u0414\u0430, \u043e\u0434\u0438\u043d \u0442\u043e\u043a\u0435\u043d \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0435\u0432 \u043d\u0430 \u0434\u0430\u043d\u043d\u043e\u0439 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435 (GitHub \u0438\u043b\u0438 GitLab).</p>"},{"location":"user-guide/git-credentials/#_14","title":"\u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430","text":""},{"location":"user-guide/git-credentials/#_15","title":"\u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b \u0441\u0438\u0441\u0442\u0435\u043c\u044b","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    Telegram Bot                          \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                                           \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502\n\u2502  \u2502 Credentials      \u2502        \u2502 Git Operations     \u2502    \u2502\n\u2502  \u2502 Handlers         \u2502\u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u25ba\u2502                    \u2502    \u2502\n\u2502  \u2502                  \u2502        \u2502 - pull/push        \u2502    \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518        \u2502 - commit           \u2502    \u2502\n\u2502           \u2502                   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502\n\u2502           \u2502                              \u2502               \u2502\n\u2502           \u25bc                              \u25bc               \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502      CredentialsManager                          \u2502   \u2502\n\u2502  \u2502                                                   \u2502   \u2502\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502   \u2502\n\u2502  \u2502  \u2502  Encryption  \u2502\u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u25ba\u2502  File Storage    \u2502  \u2502   \u2502\n\u2502  \u2502  \u2502  (Fernet)    \u2502        \u2502  (Encrypted)     \u2502  \u2502   \u2502\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2502                                                           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/git-credentials/#_16","title":"\u041f\u043e\u0442\u043e\u043a \u0434\u0430\u043d\u043d\u044b\u0445","text":"<ol> <li> <p>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0442\u043e\u043a\u0435\u043d\u0430: <pre><code>User \u2192 Telegram \u2192 CredentialsHandlers \u2192 CredentialsManager\n                                           \u2193\n                                       Encrypt \u2192 Save\n</code></pre></p> </li> <li> <p>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u0430: <pre><code>Git Operation \u2192 GitOperations \u2192 CredentialsManager\n                                   \u2193\n                               Decrypt \u2192 Return\n                                   \u2193\n                               Inject to URL \u2192 Execute Git\n</code></pre></p> </li> </ol>"},{"location":"user-guide/git-credentials/#_17","title":"\u0421\u043c. \u0442\u0430\u043a\u0436\u0435","text":"<ul> <li>Configuration Guide</li> <li>Security Best Practices</li> <li>Troubleshooting</li> </ul>"},{"location":"user-guide/knowledge-base-setup/","title":"Knowledge Base Setup","text":"<p>Setup and manage your knowledge base.</p>"},{"location":"user-guide/knowledge-base-setup/#creating-a-knowledge-base","title":"Creating a Knowledge Base","text":""},{"location":"user-guide/knowledge-base-setup/#option-1-local-kb-via-bot","title":"Option 1: Local KB (via bot)","text":"<p>Recommended: create and initialize a local KB directly from Telegram using the command:</p> <pre><code>/setkb my-kb\n</code></pre> <p>This will create a new KB under the bot's KB root and initialize Git.</p> <p>Alternatively, you can prepare one manually:</p> <pre><code>mkdir my-kb\ncd my-kb\ngit init\ngit commit --allow-empty -m \"Initial commit\"\n</code></pre> <p>Configure in <code>config.yaml</code>:</p> <pre><code>KB_PATH: ./my-kb\nKB_GIT_ENABLED: true\nKB_GIT_AUTO_PUSH: false\n</code></pre>"},{"location":"user-guide/knowledge-base-setup/#option-2-github-kb","title":"Option 2: GitHub KB","text":"<ol> <li>Create repo on GitHub</li> <li>Clone locally</li> <li>Configure path or simply use the Telegram command:</li> </ol> <pre><code>/setkb https://github.com/yourusername/my-kb\n</code></pre> <p>Alternatively, configure the path manually:</p> <pre><code>KB_PATH: ./my-kb\nKB_GIT_ENABLED: true\nKB_GIT_AUTO_PUSH: true\nKB_GIT_REMOTE: origin\nKB_GIT_BRANCH: main\n</code></pre> <p>Note: When cloning from GitHub, the system automatically creates the required KB structure (topics directory and category folders) if they don't exist in the repository. This ensures compatibility with the default <code>KB_TOPICS_ONLY=true</code> setting, which restricts agents to work only in the <code>topics/</code> folder for safety.</p>"},{"location":"user-guide/knowledge-base-setup/#setting-up-static-documentation-for-github-kb","title":"Setting up Static Documentation for GitHub KB","text":"<p>For GitHub-based knowledge bases, you can automatically configure MkDocs to build and deploy static documentation to GitHub Pages:</p> <pre><code>/setupmkdocs\n</code></pre> <p>This command will:</p> <ul> <li>Check if your KB is GitHub-based (command only works with GitHub repos)</li> <li>Verify that MkDocs is not already configured</li> <li>Create all necessary files:</li> <li><code>mkdocs.yml</code> - MkDocs configuration with Material theme</li> <li><code>docs/</code> - Documentation directory with structured content</li> <li><code>.github/workflows/docs.yml</code> - GitHub Actions workflow for automatic deployment</li> <li><code>requirements-docs.txt</code> - Python dependencies for building docs</li> </ul> <p>After running the command:</p> <ol> <li>Commit and push the changes to GitHub</li> <li>Enable GitHub Pages in repository settings:</li> <li>Go to: Settings \u2192 Pages \u2192 Source: GitHub Actions</li> <li>After push, documentation will be automatically built and published</li> </ol> <p>Your documentation will be available at: <pre><code>https://&lt;username&gt;.github.io/&lt;repo-name&gt;/\n</code></pre></p> <p>Features:</p> <ul> <li>\u2728 Beautiful Material theme with dark/light mode</li> <li>\ud83d\udd0d Full-text search</li> <li>\ud83d\udcf1 Mobile-responsive design</li> <li>\ud83c\udff7\ufe0f Tags and categories</li> <li>\ud83d\udd17 Automatic navigation from KB structure</li> <li>\ud83d\udcdd Markdown extensions (code highlighting, admonitions, etc.)</li> <li>\ud83e\udd16 Automatic deployment on every push</li> </ul>"},{"location":"user-guide/knowledge-base-setup/#kb-structure","title":"KB Structure","text":"<pre><code>knowledge_base/\n\u251c\u2500\u2500 topics/           # Categorized notes\n\u2502   \u251c\u2500\u2500 ai/\n\u2502   \u251c\u2500\u2500 biology/\n\u2502   \u251c\u2500\u2500 physics/\n\u2502   \u2514\u2500\u2500 tech/\n\u251c\u2500\u2500 attachments/      # Media files\n\u2514\u2500\u2500 index.md          # KB index\n</code></pre>"},{"location":"user-guide/knowledge-base-setup/#git-integration","title":"Git Integration","text":"<p>Enable Git operations:</p> <pre><code>KB_GIT_ENABLED: true\nKB_GIT_AUTO_PUSH: true\n</code></pre> <p>Every note is automatically:</p> <ul> <li>Added to Git</li> <li>Committed with message</li> <li>Pushed to remote (if enabled)</li> </ul>"},{"location":"user-guide/knowledge-base-setup/#multi-user-synchronization","title":"Multi-User Synchronization","text":"<p>When multiple users work with the same knowledge base (shared GitHub repository), the system automatically:</p> <ol> <li>Serializes operations: Only one user can modify the KB at a time using file-based locks</li> <li>Pulls latest changes: Before creating a note, the system pulls the latest changes from GitHub (in note mode)</li> <li>Prevents conflicts: Operations are queued and executed sequentially</li> </ol> <p>This applies to both: - Note mode (<code>/note</code>): Creating notes from messages - Agent mode (<code>/agent</code>): Agent tasks that may read/write KB files</p> <p>This ensures that: - No merge conflicts occur - All users see the latest version of the KB - Changes are properly synchronized across users - Safe concurrent access in both note and agent modes</p> <p>Example scenario: - User A starts creating a note (or executing agent task) \u2192 KB is locked - User B tries to create a note (or execute agent task) \u2192 Waits for User A to finish - User A's operation completes and changes are pushed \u2192 Lock is released - User B's operation starts \u2192 (In note mode: pulls latest changes including User A's changes) - User B's operation completes and changes are pushed</p> <p>Technical details: - Uses <code>filelock</code> for cross-process synchronization - Lock file: <code>.kb_operations.lock</code> in KB directory - Async locks prevent race conditions within the same process - Default timeout: 300 seconds (5 minutes)</p>"},{"location":"user-guide/knowledge-base-setup/#see-also","title":"See Also","text":"<ul> <li>Bot Commands</li> <li>Working with Content</li> <li>KB Synchronization Architecture</li> </ul>"},{"location":"user-guide/mcp-server-management/","title":"MCP Server Management via Telegram Bot","text":"<p>This guide explains how to manage MCP (Model Context Protocol) server configurations through the Telegram bot.</p>"},{"location":"user-guide/mcp-server-management/#overview","title":"Overview","text":"<p>You can add, list, enable, disable, and delete MCP server configurations directly through Telegram commands. This makes it easy to manage your MCP servers without editing configuration files manually.</p>"},{"location":"user-guide/mcp-server-management/#commands","title":"Commands","text":""},{"location":"user-guide/mcp-server-management/#add-a-new-mcp-server","title":"Add a New MCP Server","text":"<p>Command: <code>/addmcpserver</code></p> <p>You can add a new MCP server configuration by sending a JSON configuration:</p> <pre><code>/addmcpserver\n</code></pre> <p>The bot will prompt you to send the JSON configuration. Example:</p> <pre><code>{\n  \"name\": \"my-mcp-server\",\n  \"description\": \"My custom MCP server\",\n  \"command\": \"python3\",\n  \"args\": [\"-m\", \"my_package.server\"],\n  \"env\": {\n    \"API_KEY\": \"your-api-key\"\n  },\n  \"enabled\": true\n}\n</code></pre> <p>Alternatively, you can send the JSON directly with the command:</p> <pre><code>/addmcpserver {\"name\": \"my-server\", \"description\": \"Test server\", \"command\": \"python3\", \"args\": [\"-m\", \"test\"], \"enabled\": true}\n</code></pre>"},{"location":"user-guide/mcp-server-management/#required-fields","title":"Required Fields","text":"<ul> <li><code>name</code> - Unique server name (used as identifier)</li> <li><code>description</code> - Human-readable description</li> <li><code>command</code> - Executable command (e.g., \"python3\", \"node\", \"npx\")</li> <li><code>args</code> - Command-line arguments (array of strings)</li> </ul>"},{"location":"user-guide/mcp-server-management/#optional-fields","title":"Optional Fields","text":"<ul> <li><code>env</code> - Environment variables (object with key-value pairs)</li> <li><code>working_dir</code> - Working directory for the server</li> <li><code>enabled</code> - Whether to enable immediately (default: true)</li> </ul>"},{"location":"user-guide/mcp-server-management/#list-all-mcp-servers","title":"List All MCP Servers","text":"<p>Command: <code>/listmcpservers</code></p> <p>Shows all registered MCP servers with their current status (enabled/disabled). You can also enable/disable servers directly from the interactive buttons.</p>"},{"location":"user-guide/mcp-server-management/#mcp-status-summary","title":"MCP Status Summary","text":"<p>Command: <code>/mcpstatus</code></p> <p>Shows a quick summary:</p> <ul> <li>Total number of servers</li> <li>Number of enabled servers</li> <li>Number of disabled servers</li> </ul>"},{"location":"user-guide/mcp-server-management/#enable-an-mcp-server","title":"Enable an MCP Server","text":"<p>Command: <code>/enablemcp &lt;server_name&gt;</code></p> <p>Example:</p> <pre><code>/enablemcp my-mcp-server\n</code></pre> <p>This activates the specified MCP server, making it available for use.</p>"},{"location":"user-guide/mcp-server-management/#disable-an-mcp-server","title":"Disable an MCP Server","text":"<p>Command: <code>/disablemcp &lt;server_name&gt;</code></p> <p>Example:</p> <pre><code>/disablemcp my-mcp-server\n</code></pre> <p>This deactivates the specified MCP server without deleting its configuration.</p>"},{"location":"user-guide/mcp-server-management/#remove-an-mcp-server","title":"Remove an MCP Server","text":"<p>Command: <code>/removemcp &lt;server_name&gt;</code></p> <p>Example:</p> <pre><code>/removemcp my-mcp-server\n</code></pre> <p>\u26a0\ufe0f Warning: This permanently deletes the server configuration. The bot will ask for confirmation before deletion.</p>"},{"location":"user-guide/mcp-server-management/#configuration-storage","title":"Configuration Storage","text":"<p>MCP server configurations are stored as JSON files in the <code>data/mcp_servers/</code> directory. Each server has its own <code>.json</code> file named after the server name.</p> <p>Example file structure:</p> <pre><code>data/\n\u2514\u2500\u2500 mcp_servers/\n    \u251c\u2500\u2500 example-server.json\n    \u251c\u2500\u2500 my-custom-server.json\n    \u2514\u2500\u2500 memory-agent.json\n</code></pre>"},{"location":"user-guide/mcp-server-management/#use-cases","title":"Use Cases","text":""},{"location":"user-guide/mcp-server-management/#adding-a-memory-agent","title":"Adding a Memory Agent","text":"<pre><code>{\n  \"name\": \"memory-agent\",\n  \"description\": \"Personal memory agent for storing and retrieving information\",\n  \"command\": \"npx\",\n  \"args\": [\"-y\", \"@modelcontextprotocol/server-memory\"],\n  \"enabled\": true\n}\n</code></pre>"},{"location":"user-guide/mcp-server-management/#adding-a-github-mcp-server","title":"Adding a GitHub MCP Server","text":"<pre><code>{\n  \"name\": \"github-server\",\n  \"description\": \"GitHub repository access via MCP\",\n  \"command\": \"npx\",\n  \"args\": [\"-y\", \"@modelcontextprotocol/server-github\"],\n  \"env\": {\n    \"GITHUB_TOKEN\": \"your-github-token\"\n  },\n  \"enabled\": true\n}\n</code></pre>"},{"location":"user-guide/mcp-server-management/#adding-a-custom-python-mcp-server","title":"Adding a Custom Python MCP Server","text":"<pre><code>{\n  \"name\": \"my-python-server\",\n  \"description\": \"Custom Python MCP server\",\n  \"command\": \"python3\",\n  \"args\": [\"-m\", \"my_package.mcp_server\"],\n  \"working_dir\": \"/path/to/project\",\n  \"env\": {\n    \"API_KEY\": \"secret-key\",\n    \"DEBUG\": \"true\"\n  },\n  \"enabled\": true\n}\n</code></pre>"},{"location":"user-guide/mcp-server-management/#tips","title":"Tips","text":"<ol> <li> <p>Test servers before enabling - Set <code>\"enabled\": false</code> when adding a new server, test it manually first, then enable it via <code>/enablemcp</code>.</p> </li> <li> <p>Use descriptive names - Use clear, descriptive names for your servers to make management easier.</p> </li> <li> <p>Secure your secrets - Environment variables are stored in the JSON files. Make sure to protect these files and don't commit them to public repositories.</p> </li> <li> <p>Check status regularly - Use <code>/mcpstatus</code> to quickly see which servers are running.</p> </li> <li> <p>Interactive management - The <code>/listmcpservers</code> command provides interactive buttons for quick enable/disable actions.</p> </li> </ol>"},{"location":"user-guide/mcp-server-management/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/mcp-server-management/#server-not-appearing-in-the-list","title":"Server not appearing in the list","text":"<ul> <li>Check that the JSON configuration is valid</li> <li>Verify the server name is unique</li> <li>Check the logs for any error messages</li> </ul>"},{"location":"user-guide/mcp-server-management/#server-fails-to-start","title":"Server fails to start","text":"<ul> <li>Verify the command and arguments are correct</li> <li>Check that all required environment variables are set</li> <li>Ensure the working directory (if specified) exists</li> <li>Check that the executable is in your PATH</li> </ul>"},{"location":"user-guide/mcp-server-management/#cannot-delete-a-server","title":"Cannot delete a server","text":"<ul> <li>Verify you're using the correct server name</li> <li>Check file permissions in the <code>data/mcp_servers/</code> directory</li> </ul>"},{"location":"user-guide/mcp-server-management/#security-notes","title":"Security Notes","text":"<p>\u26a0\ufe0f Important Security Considerations:</p> <ol> <li>Access Control - Only authorized users should be able to add MCP servers, as they can execute arbitrary commands</li> <li>Environment Variables - Be careful with API keys and secrets in environment variables</li> <li>Command Validation - The system doesn't validate commands, so only add trusted MCP servers</li> <li>File Permissions - Ensure the <code>data/mcp_servers/</code> directory has appropriate permissions</li> </ol>"},{"location":"user-guide/mcp-server-management/#see-also","title":"See Also","text":"<ul> <li>MCP Server Registry</li> <li>MCP Tools</li> <li>Bot Commands</li> </ul>"},{"location":"user-guide/settings-management/","title":"Settings Management","text":"<p>Configure tg-note directly from Telegram.</p>"},{"location":"user-guide/settings-management/#overview","title":"Overview","text":"<p>The settings management system allows you to customize bot behavior without editing configuration files. All settings can be changed directly through Telegram commands.</p>"},{"location":"user-guide/settings-management/#features","title":"Features","text":"<ul> <li>\u2705 Interactive UI - Inline keyboards with category navigation</li> <li>\u2705 Type Safety - Automatic validation and conversion</li> <li>\u2705 Per-User - Each user has their own settings</li> <li>\u2705 Auto-Generated - New settings appear automatically</li> <li>\u2705 Secure - Credentials cannot be changed via Telegram</li> </ul>"},{"location":"user-guide/settings-management/#quick-start","title":"Quick Start","text":""},{"location":"user-guide/settings-management/#open-settings-menu","title":"Open Settings Menu","text":"<pre><code>/settings\n</code></pre>"},{"location":"user-guide/settings-management/#view-all-settings","title":"View All Settings","text":"<pre><code>/viewsettings\n</code></pre>"},{"location":"user-guide/settings-management/#change-a-setting","title":"Change a Setting","text":"<p>Use the interactive menu and inline buttons:</p> <pre><code>/settings \u2192 choose category \u2192 select setting \u2192 use buttons or send value\n</code></pre>"},{"location":"user-guide/settings-management/#reset-to-default","title":"Reset to Default","text":"<pre><code>/resetsetting AGENT_TIMEOUT\n</code></pre>"},{"location":"user-guide/settings-management/#settings-categories","title":"Settings Categories","text":""},{"location":"user-guide/settings-management/#knowledge-base","title":"\ud83d\udcda Knowledge Base","text":"<ul> <li><code>KB_PATH</code> - Path to knowledge base</li> <li><code>KB_GIT_ENABLED</code> - Enable Git operations  </li> <li><code>KB_GIT_AUTO_PUSH</code> - Auto-push changes</li> <li><code>KB_GIT_REMOTE</code> - Git remote name</li> <li><code>KB_GIT_BRANCH</code> - Git branch</li> </ul>"},{"location":"user-guide/settings-management/#agent","title":"\ud83e\udd16 Agent","text":"<ul> <li><code>AGENT_TYPE</code> - Agent implementation</li> <li><code>AGENT_MODEL</code> - AI model to use</li> <li><code>AGENT_QWEN_CLI_PATH</code> - Path to qwen CLI executable</li> <li><code>AGENT_INSTRUCTION</code> - Custom instruction for agent</li> <li><code>AGENT_TIMEOUT</code> - Operation timeout</li> <li><code>AGENT_ENABLE_WEB_SEARCH</code> - Enable web search</li> <li><code>AGENT_ENABLE_GIT</code> - Enable Git operations</li> <li><code>AGENT_ENABLE_GITHUB</code> - Enable GitHub API</li> <li><code>AGENT_ENABLE_SHELL</code> - Enable shell commands (\u26a0\ufe0f security risk)</li> <li><code>AGENT_ENABLE_FILE_MANAGEMENT</code> - Enable file operations</li> <li><code>AGENT_ENABLE_FOLDER_MANAGEMENT</code> - Enable folder operations</li> </ul>"},{"location":"user-guide/settings-management/#processing","title":"\u2699\ufe0f Processing","text":"<ul> <li><code>MESSAGE_GROUP_TIMEOUT</code> - Message grouping timeout</li> <li><code>PROCESSED_LOG_PATH</code> - Processing log path</li> </ul>"},{"location":"user-guide/settings-management/#logging","title":"\ud83d\udcdd Logging","text":"<ul> <li><code>LOG_LEVEL</code> - Logging level (DEBUG, INFO, WARNING, ERROR)</li> <li><code>LOG_FILE</code> - Log file path</li> </ul>"},{"location":"user-guide/settings-management/#interactive-menu","title":"Interactive Menu","text":"<p>The <code>/settings</code> command provides:</p> <ol> <li>Category Selection - Browse by category</li> <li>Quick Toggles - One-tap for booleans</li> <li>Setting Details - View descriptions</li> <li>Reset Options - Restore defaults</li> </ol>"},{"location":"user-guide/settings-management/#examples","title":"Examples","text":""},{"location":"user-guide/settings-management/#change-timeout","title":"Change Timeout","text":"<p>Open <code>/settings</code>, navigate to Agent category, select <code>AGENT_TIMEOUT</code>, and set it to <code>600</code>.</p>"},{"location":"user-guide/settings-management/#disable-auto-push","title":"Disable Auto-Push","text":"<p>Open <code>/settings</code>, navigate to Knowledge Base category, and toggle <code>KB_GIT_AUTO_PUSH</code> to off.</p>"},{"location":"user-guide/settings-management/#enable-debug-logging","title":"Enable Debug Logging","text":"<p>Open <code>/settings</code>, navigate to Logging, select <code>LOG_LEVEL</code>, and choose <code>DEBUG</code>.</p>"},{"location":"user-guide/settings-management/#see-also","title":"See Also","text":"<ul> <li>Bot Commands</li> <li>Configuration Guide</li> </ul>"},{"location":"user-guide/working-with-content/","title":"Working with Content","text":"<p>Learn how to work with different types of content in tg-note.</p>"},{"location":"user-guide/working-with-content/#supported-content-types","title":"Supported Content Types","text":"<ul> <li>\u2705 Text messages</li> <li>\u2705 Forwarded messages from channels</li> <li>\u2705 Photos with captions  </li> <li>\u2705 Documents</li> <li>\u2705 Links and URLs</li> <li>\u2705 Multiple consecutive messages</li> </ul>"},{"location":"user-guide/working-with-content/#sending-text-messages","title":"Sending Text Messages","text":"<p>Simply send any text to save it:</p> <pre><code>This is an interesting article about AI...\n</code></pre> <p>The bot will:</p> <ol> <li>Receive your message</li> <li>Analyze the content</li> <li>Categorize it</li> <li>Save as Markdown</li> <li>Commit to Git</li> </ol>"},{"location":"user-guide/working-with-content/#forwarding-messages","title":"Forwarding Messages","text":"<p>Forward messages from any chat or channel:</p> <ol> <li>Find the message</li> <li>Tap Forward</li> <li>Select your tg-note bot</li> </ol> <p>Works with:</p> <ul> <li>Channel posts</li> <li>Group messages  </li> <li>Media with captions</li> <li>Links</li> </ul>"},{"location":"user-guide/working-with-content/#sending-multiple-messages","title":"Sending Multiple Messages","text":"<p>Send consecutive messages for automatic grouping:</p> <pre><code>First message...\n(wait)\nSecond message...\n(wait)\nThird message...\n</code></pre> <p>Messages sent within 30 seconds (configurable) are grouped into one note.</p>"},{"location":"user-guide/working-with-content/#sending-links","title":"Sending Links","text":"<p>Send article URLs:</p> <pre><code>https://arxiv.org/abs/12345\n</code></pre> <p>With Qwen Code CLI, the bot will:</p> <ul> <li>Fetch the article</li> <li>Analyze content</li> <li>Extract key info</li> <li>Save structured note</li> </ul>"},{"location":"user-guide/working-with-content/#processing-workflow","title":"Processing Workflow","text":"<pre><code>graph LR\n    A[Content] --&gt; B[Analysis]\n    B --&gt; C[Categorization]\n    C --&gt; D[Markdown]\n    D --&gt; E[Git Commit]\n    E --&gt; F[Notification]\n</code></pre>"},{"location":"user-guide/working-with-content/#output-structure","title":"Output Structure","text":"<p>Your KB will have this structure:</p> <pre><code>knowledge_base/\n\u251c\u2500\u2500 topics/\n\u2502   \u251c\u2500\u2500 ai/\n\u2502   \u2502   \u2514\u2500\u2500 2025-10-03-neural-networks.md\n\u2502   \u251c\u2500\u2500 biology/\n\u2502   \u2502   \u2514\u2500\u2500 2025-10-03-crispr.md\n\u2502   \u2514\u2500\u2500 physics/\n\u2502       \u2514\u2500\u2500 2025-10-03-quantum.md\n\u2514\u2500\u2500 index.md\n</code></pre>"},{"location":"user-guide/working-with-content/#see-also","title":"See Also","text":"<ul> <li>Bot Commands</li> <li>Knowledge Base Setup</li> </ul>"},{"location":"user-guide/working-with-content/#connections-and-summaries","title":"Connections and Summaries","text":"<ul> <li>The bot now shows a Connections section (\u0421\u0432\u044f\u0437\u0438) after processing.</li> <li>New files created in the same run are excluded from Connections to reduce noise.</li> <li>Each connection includes a brief explanation (derived from the target file title when available).</li> <li>In the summary of changes, file entries include GitHub links when your KB is linked to a GitHub remote and branch.</li> </ul>"}]}
