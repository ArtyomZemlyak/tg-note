{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to tg-note Documentation","text":"**Intelligent Knowledge Base Builder**  Telegram bot that automatically transforms your messages, reposts, and articles into a structured knowledge base using AI agents.  [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT) [![Python 3.11+](https://img.shields.io/badge/python-3.11+-blue.svg)](https://www.python.org/downloads/)  [Get Started](getting-started/quick-start.md){ .md-button .md-button--primary } [View on GitHub](https://github.com/ArtyomZemlyak/tg-note){ .md-button }"},{"location":"#what-is-tg-note","title":"What is tg-note?","text":"<p>tg-note is a Telegram bot that acts as your personal knowledge curator. It receives messages, reposts, and articles through Telegram, analyzes them using AI agent systems, and automatically saves the important information to your GitHub-based knowledge base in structured Markdown format.</p> <p>Perfect for:</p> <ul> <li>\ud83d\udcda Building a personal knowledge base from Telegram channels</li> <li>\ud83d\udd2c Organizing research papers and scientific articles</li> <li>\ud83d\udcf0 Archiving news and insights from multiple sources</li> <li>\ud83e\udde0 Creating a searchable second brain</li> </ul>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li> <p> AI-Powered Analysis</p> <p>Intelligent content categorization and structuring using advanced agent systems</p> </li> <li> <p> Automatic Markdown</p> <p>Converts any content into well-formatted Markdown files with proper structure</p> </li> <li> <p> Smart Organization</p> <p>Automatic categorization by topics (AI, biology, physics, tech, etc.)</p> </li> <li> <p> GitHub Integration</p> <p>Direct commits to your knowledge base repository with version control</p> </li> <li> <p> Multi-User Support</p> <p>Each user can have their own personal knowledge base</p> </li> <li> <p> Flexible Configuration</p> <p>Configure bot settings directly via Telegram commands</p> </li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Get started with tg-note in just a few minutes:</p> 1. Installation2. Configuration3. Run <pre><code>git clone https://github.com/ArtyomZemlyak/tg-note.git\ncd tg-note\npoetry install\n</code></pre> <pre><code># Copy configuration files\ncp config.example.yaml config.yaml\n\n# Add your Telegram bot token to .env\necho \"TELEGRAM_BOT_TOKEN=your_token_here\" &gt; .env\n</code></pre> <pre><code>poetry run python main.py\n</code></pre> <p>Full Installation Guide \u2192</p>"},{"location":"#agent-types","title":"Agent Types","text":"<p>Choose the right agent for your needs:</p>"},{"location":"#qwen-code-cli-recommended","title":"Qwen Code CLI (Recommended)","text":"<p>Uses Qwen Code CLI for advanced AI processing.</p> <ul> <li>\u2705 Full integration with Qwen3-Coder models</li> <li>\u2705 Automatic TODO planning</li> <li>\u2705 Built-in tools: web search, git, github, shell</li> <li>\u2705 Free tier: 2000 requests/day</li> </ul> <p>Learn More \u2192</p>"},{"location":"#autonomous-agent","title":"Autonomous Agent","text":"<p>Python-based agent with OpenAI-compatible API support.</p> <ul> <li>\u2705 OpenAI-compatible API integration</li> <li>\u2705 Autonomous planning and decision-making</li> <li>\u2705 Function calling support</li> <li>\u2705 Works with various LLM providers</li> </ul> <p>Learn More \u2192</p>"},{"location":"#stub-agent","title":"Stub Agent","text":"<p>Simple stub agent for testing and MVP.</p> <ul> <li>\u26a1 Fast and lightweight</li> <li>\ud83d\udd27 No external dependencies</li> <li>\ud83e\uddea Perfect for testing</li> </ul> <p>Learn More \u2192</p>"},{"location":"#architecture-overview","title":"Architecture Overview","text":"<pre><code>graph TD\n    A[Telegram Bot] --&gt; B[Message Processor]\n    B --&gt; C[Agent System]\n    C --&gt; D[Knowledge Base Manager]\n    D --&gt; E[Git Operations]\n\n    style A fill:#e1f5ff\n    style C fill:#fff3e0\n    style D fill:#f3e5f5\n    style E fill:#e8f5e9\n</code></pre> <p>Detailed Architecture \u2192</p>"},{"location":"#documentation-sections","title":"Documentation Sections","text":"<ul> <li> <p> Getting Started</p> <p>Installation, configuration, and first steps</p> <p> Start Here</p> </li> <li> <p> User Guide</p> <p>Commands, content management, and settings</p> <p> Read Guide</p> </li> <li> <p> Agent System</p> <p>AI agents, tools, and autonomous processing</p> <p> Explore Agents</p> </li> <li> <p> Architecture</p> <p>System design and component details</p> <p> View Architecture</p> </li> <li> <p> Development</p> <p>Contributing, testing, and code quality</p> <p> Start Contributing</p> </li> <li> <p> Deployment</p> <p>Production setup, Docker, and CI/CD</p> <p> Deploy</p> </li> </ul>"},{"location":"#community-support","title":"Community &amp; Support","text":"<ul> <li> GitHub Repository</li> <li> Issue Tracker</li> <li> Discussions</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>   **Built with \u2764\ufe0f by [Artem Zemliak](https://github.com/ArtyomZemlyak)**  \u2b50 Star this repository if you find it helpful!"},{"location":"agents/autonomous-agent/","title":"Autonomous Agent Guide","text":"<p>Python-based autonomous agent with OpenAI-compatible API support for intelligent knowledge base building.</p>"},{"location":"agents/autonomous-agent/#overview","title":"Overview","text":"<p>The Autonomous Agent is a Python-based AI agent that uses OpenAI-compatible APIs to process messages and build your knowledge base. It features autonomous planning, decision-making, and tool execution capabilities.</p> <p>Unlike the Qwen Code CLI agent (which uses Node.js), the autonomous agent is pure Python and works with any OpenAI-compatible API endpoint, making it flexible for custom LLM providers.</p>"},{"location":"agents/autonomous-agent/#key-features","title":"Key Features","text":""},{"location":"agents/autonomous-agent/#autonomous-decision-making","title":"\ud83e\udd16 Autonomous Decision Making","text":"<ul> <li>Self-Planning - Creates execution plans autonomously</li> <li>Dynamic Tool Selection - Chooses appropriate tools based on context</li> <li>Iterative Refinement - Adapts strategy based on results</li> <li>Error Recovery - Handles failures gracefully</li> </ul>"},{"location":"agents/autonomous-agent/#built-in-tools","title":"\ud83d\udd27 Built-in Tools","text":"<ul> <li>Web Search - Search the internet for additional context</li> <li>Git Operations - Version control for knowledge base</li> <li>GitHub API - Repository management</li> <li>File Management - Create, read, update files in KB</li> <li>Folder Management - Organize KB structure</li> <li>Shell Commands - Execute safe shell operations (optional)</li> </ul>"},{"location":"agents/autonomous-agent/#llm-flexibility","title":"\ud83d\udd0c LLM Flexibility","text":"<ul> <li>OpenAI - Native support for GPT models</li> <li>Custom Endpoints - Use any OpenAI-compatible API</li> <li>Qwen - Works with Qwen models via compatible API</li> <li>Azure OpenAI - Enterprise deployment support</li> <li>Local Models - Compatible with local LLM servers</li> </ul>"},{"location":"agents/autonomous-agent/#function-calling","title":"\ud83c\udfaf Function Calling","text":"<ul> <li>Native function calling support</li> <li>Automatic tool discovery</li> <li>Structured output generation</li> <li>Type-safe parameter passing</li> </ul>"},{"location":"agents/autonomous-agent/#installation","title":"Installation","text":""},{"location":"agents/autonomous-agent/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11+</li> <li>Poetry (recommended) or pip</li> <li>OpenAI API key or compatible API endpoint</li> </ul>"},{"location":"agents/autonomous-agent/#setup","title":"Setup","text":"<ol> <li>Install dependencies (OpenAI library included):</li> </ol> <pre><code>poetry install\n</code></pre> <ol> <li>Configure environment variables:</li> </ol> <pre><code># .env file\nOPENAI_API_KEY=sk-...\nOPENAI_BASE_URL=https://api.openai.com/v1  # Optional, for custom endpoints\n</code></pre> <ol> <li>Update config.yaml:</li> </ol> <pre><code>AGENT_TYPE: \"autonomous\"\nAGENT_MODEL: \"gpt-3.5-turbo\"\nAGENT_TIMEOUT: 300\nAGENT_ENABLE_WEB_SEARCH: true\nAGENT_ENABLE_GIT: true\nAGENT_ENABLE_FILE_MANAGEMENT: true\n</code></pre>"},{"location":"agents/autonomous-agent/#configuration","title":"Configuration","text":""},{"location":"agents/autonomous-agent/#basic-configuration","title":"Basic Configuration","text":"<pre><code># config.yaml\nAGENT_TYPE: \"autonomous\"\nAGENT_MODEL: \"gpt-3.5-turbo\"  # or gpt-4, qwen-max, etc.\nAGENT_TIMEOUT: 300  # seconds\n</code></pre>"},{"location":"agents/autonomous-agent/#tool-permissions","title":"Tool Permissions","text":"<pre><code># Enable/disable specific tools\nAGENT_ENABLE_WEB_SEARCH: true\nAGENT_ENABLE_GIT: true\nAGENT_ENABLE_GITHUB: true\nAGENT_ENABLE_SHELL: false  # Disabled by default for security\nAGENT_ENABLE_FILE_MANAGEMENT: true\nAGENT_ENABLE_FOLDER_MANAGEMENT: true\n</code></pre>"},{"location":"agents/autonomous-agent/#advanced-settings","title":"Advanced Settings","text":"<pre><code># Custom instruction for the agent\nAGENT_INSTRUCTION: |\n  You are a knowledge base curator.\n  Analyze content, categorize it, and create well-structured Markdown files.\n\n# Maximum planning iterations\nAGENT_MAX_ITERATIONS: 10\n\n# Knowledge base path\nKB_PATH: ./knowledge_base\n</code></pre>"},{"location":"agents/autonomous-agent/#environment-variables","title":"Environment Variables","text":"<pre><code># OpenAI Configuration\nOPENAI_API_KEY=sk-...\nOPENAI_BASE_URL=https://api.openai.com/v1\n\n# Alternative: Use Qwen API\nOPENAI_API_KEY=sk-...\nOPENAI_BASE_URL=https://dashscope.aliyuncs.com/compatible-mode/v1\n\n# GitHub (optional, for GitHub tools)\nGITHUB_TOKEN=ghp_...\n</code></pre>"},{"location":"agents/autonomous-agent/#usage-examples","title":"Usage Examples","text":""},{"location":"agents/autonomous-agent/#using-with-openai","title":"Using with OpenAI","text":"<pre><code># config.yaml\nAGENT_TYPE: \"autonomous\"\nAGENT_MODEL: \"gpt-3.5-turbo\"\n</code></pre> <pre><code># .env\nOPENAI_API_KEY=sk-proj-...\n</code></pre>"},{"location":"agents/autonomous-agent/#using-with-qwen-api","title":"Using with Qwen API","text":"<pre><code># config.yaml\nAGENT_TYPE: \"autonomous\"\nAGENT_MODEL: \"qwen-max\"\n</code></pre> <pre><code># .env\nOPENAI_API_KEY=sk-...\nOPENAI_BASE_URL=https://dashscope.aliyuncs.com/compatible-mode/v1\n</code></pre>"},{"location":"agents/autonomous-agent/#using-with-azure-openai","title":"Using with Azure OpenAI","text":"<pre><code># config.yaml\nAGENT_TYPE: \"autonomous\"\nAGENT_MODEL: \"gpt-35-turbo\"\n</code></pre> <pre><code># .env\nOPENAI_API_KEY=your-azure-key\nOPENAI_BASE_URL=https://your-resource.openai.azure.com/\n</code></pre>"},{"location":"agents/autonomous-agent/#using-with-local-llm","title":"Using with Local LLM","text":"<pre><code># config.yaml\nAGENT_TYPE: \"autonomous\"\nAGENT_MODEL: \"local-model\"\n</code></pre> <pre><code># .env\nOPENAI_API_KEY=not-needed\nOPENAI_BASE_URL=http://localhost:8080/v1\n</code></pre>"},{"location":"agents/autonomous-agent/#how-it-works","title":"How It Works","text":""},{"location":"agents/autonomous-agent/#processing-pipeline","title":"Processing Pipeline","text":"<pre><code>graph LR\n    A[Message] --&gt; B[Autonomous Agent]\n    B --&gt; C{Plan}\n    C --&gt; D[Select Tool]\n    D --&gt; E[Execute]\n    E --&gt; F{Success?}\n    F --&gt;|Yes| G[Next Step]\n    F --&gt;|No| H[Adapt]\n    H --&gt; C\n    G --&gt; I{Done?}\n    I --&gt;|No| C\n    I --&gt;|Yes| J[Generate KB Entry]\n    J --&gt; K[Commit to Git]\n\n    style B fill:#fff3e0\n    style J fill:#e8f5e9\n</code></pre>"},{"location":"agents/autonomous-agent/#execution-flow","title":"Execution Flow","text":"<ol> <li>Receive Content</li> <li>Text, URLs, forwarded messages</li> <li> <p>Extract and parse information</p> </li> <li> <p>Autonomous Planning</p> </li> <li>LLM creates execution plan</li> <li>Decides which tools to use</li> <li> <p>Plans iterative steps</p> </li> <li> <p>Tool Execution</p> </li> <li>Web search for context</li> <li>Analyze content structure</li> <li>Create folders/files</li> <li> <p>Git operations</p> </li> <li> <p>Iterative Refinement</p> </li> <li>Evaluate results</li> <li>Adjust strategy if needed</li> <li> <p>Handle errors gracefully</p> </li> <li> <p>KB Generation</p> </li> <li>Create Markdown file</li> <li>Add metadata</li> <li> <p>Proper categorization</p> </li> <li> <p>Version Control</p> </li> <li>Git commit</li> <li>Push to remote (if enabled)</li> </ol>"},{"location":"agents/autonomous-agent/#available-tools","title":"Available Tools","text":""},{"location":"agents/autonomous-agent/#web-search-tool","title":"Web Search Tool","text":"<p>Search the internet for additional context.</p> <pre><code># Automatically used when agent needs more information\ntool: web_search\nparams:\n  query: \"machine learning basics\"\n</code></pre>"},{"location":"agents/autonomous-agent/#file-management-tools","title":"File Management Tools","text":"<p>Create and manage files in the knowledge base.</p> <pre><code># Create new file\ntool: file_create\nparams:\n  path: \"topics/ai/neural-networks.md\"\n  content: \"# Neural Networks\\n\\n...\"\n</code></pre>"},{"location":"agents/autonomous-agent/#folder-management-tools","title":"Folder Management Tools","text":"<p>Organize knowledge base structure.</p> <pre><code># Create folder\ntool: folder_create\nparams:\n  path: \"topics/new-category\"\n</code></pre>"},{"location":"agents/autonomous-agent/#git-tools","title":"Git Tools","text":"<p>Version control operations.</p> <pre><code># Safe git commands only\ntool: git_command\nparams:\n  command: \"git status\"\n</code></pre>"},{"location":"agents/autonomous-agent/#github-tools","title":"GitHub Tools","text":"<p>Repository management (requires GITHUB_TOKEN).</p> <pre><code># GitHub operations\ntool: github_api\nparams:\n  endpoint: \"/repos/:owner/:repo/issues\"\n  method: \"GET\"\n</code></pre>"},{"location":"agents/autonomous-agent/#performance","title":"Performance","text":""},{"location":"agents/autonomous-agent/#processing-time","title":"Processing Time","text":"Content Type Typical Time With Web Search Short text (&lt; 500 chars) 5-10s 10-20s Medium text (500-2000) 10-30s 20-60s Long text (&gt; 2000) 30-90s 60-180s With URLs 15-45s 30-120s"},{"location":"agents/autonomous-agent/#factors-affecting-speed","title":"Factors Affecting Speed","text":"<ul> <li>Model Selection - GPT-4 slower but higher quality</li> <li>Tool Usage - Web search adds latency</li> <li>Content Complexity - More analysis = longer time</li> <li>API Latency - Network and API response time</li> <li>Iterations - Complex tasks need more planning steps</li> </ul>"},{"location":"agents/autonomous-agent/#best-practices","title":"Best Practices","text":""},{"location":"agents/autonomous-agent/#model-selection","title":"Model Selection","text":"<p>GPT-3.5-turbo - \u2705 Fast response time - \u2705 Cost-effective - \u2705 Good for simple content - \u274c Less sophisticated analysis</p> <p>GPT-4 - \u2705 Best quality - \u2705 Complex reasoning - \u2705 Better categorization - \u274c Slower and more expensive</p> <p>Qwen-max - \u2705 Free tier available - \u2705 Good quality - \u2705 Chinese language support - \u274c Requires Qwen API</p>"},{"location":"agents/autonomous-agent/#tool-configuration","title":"Tool Configuration","text":"<p>Enable for Production: <pre><code>AGENT_ENABLE_WEB_SEARCH: true\nAGENT_ENABLE_GIT: true\nAGENT_ENABLE_FILE_MANAGEMENT: true\nAGENT_ENABLE_FOLDER_MANAGEMENT: true\n</code></pre></p> <p>Disable for Security: <pre><code>AGENT_ENABLE_SHELL: false  # Keep disabled unless needed\nAGENT_ENABLE_GITHUB: false  # If not using GitHub API\n</code></pre></p>"},{"location":"agents/autonomous-agent/#custom-instructions","title":"Custom Instructions","text":"<p>Tailor agent behavior with custom instructions:</p> <pre><code>AGENT_INSTRUCTION: |\n  You are a scientific paper curator.\n\n  For each paper:\n  1. Extract: title, authors, abstract, key findings\n  2. Categorize by research field\n  3. Add relevant tags\n  4. Create bibliography entry\n\n  Use clear, academic language.\n</code></pre>"},{"location":"agents/autonomous-agent/#troubleshooting","title":"Troubleshooting","text":""},{"location":"agents/autonomous-agent/#agent-not-working","title":"Agent Not Working","text":"<p>Problem: Agent fails to start or process messages</p> <p>Solutions: 1. Check API key: <code>echo $OPENAI_API_KEY</code> 2. Verify base URL if using custom endpoint 3. Test API connection: <code>curl $OPENAI_BASE_URL/models</code> 4. Check logs: <code>tail -f logs/bot.log</code></p>"},{"location":"agents/autonomous-agent/#slow-processing","title":"Slow Processing","text":"<p>Problem: Agent takes too long to process</p> <p>Solutions: 1. Use faster model (GPT-3.5 instead of GPT-4) 2. Disable web search if not needed 3. Reduce <code>AGENT_MAX_ITERATIONS</code> 4. Check network latency to API endpoint</p>"},{"location":"agents/autonomous-agent/#poor-quality-results","title":"Poor Quality Results","text":"<p>Problem: Agent produces low-quality KB entries</p> <p>Solutions: 1. Upgrade to GPT-4 or better model 2. Enable web search for more context 3. Customize <code>AGENT_INSTRUCTION</code> for your use case 4. Increase <code>AGENT_TIMEOUT</code> for complex content</p>"},{"location":"agents/autonomous-agent/#api-errors","title":"API Errors","text":"<p>Problem: OpenAI API errors (rate limits, etc.)</p> <p>Solutions: 1. Check API quota and billing 2. Implement retry logic (already built-in) 3. Consider using different endpoint 4. Monitor rate limits in dashboard</p>"},{"location":"agents/autonomous-agent/#comparison-with-other-agents","title":"Comparison with Other Agents","text":""},{"location":"agents/autonomous-agent/#vs-qwen-code-cli","title":"vs. Qwen Code CLI","text":"Feature Autonomous Qwen CLI Language Python Node.js Setup pip install npm install API OpenAI-compatible Qwen specific Flexibility High Medium Free Tier Depends on API 2000/day Vision Depends on model \u2705 Yes <p>Choose Autonomous when: - Python-only environment - Need custom LLM provider - Already have OpenAI API - Want maximum flexibility</p> <p>Choose Qwen CLI when: - Want free tier (2000/day) - Node.js is available - Vision support is required - Official Qwen integration preferred</p>"},{"location":"agents/autonomous-agent/#vs-stub-agent","title":"vs. Stub Agent","text":"Feature Autonomous Stub AI \u2705 Yes \u274c No Tools \u2705 Yes \u274c No Quality High Basic Speed Medium Fast Cost API cost Free <p>Use Autonomous for production, Stub for testing.</p>"},{"location":"agents/autonomous-agent/#advanced-features","title":"Advanced Features","text":""},{"location":"agents/autonomous-agent/#custom-llm-connectors","title":"Custom LLM Connectors","text":"<p>Implement custom connector for any LLM:</p> <pre><code>from src.agents.llm_connectors import BaseLLMConnector\n\nclass CustomConnector(BaseLLMConnector):\n    async def generate(self, messages, tools=None):\n        # Your custom implementation\n        pass\n</code></pre>"},{"location":"agents/autonomous-agent/#tool-registration","title":"Tool Registration","text":"<p>Register custom tools programmatically:</p> <pre><code>agent.register_tool(\"my_tool\", my_tool_function)\n</code></pre>"},{"location":"agents/autonomous-agent/#context-management","title":"Context Management","text":"<p>Agent maintains execution context:</p> <pre><code>context = AgentContext(task=\"Process message\")\ncontext.add_execution(execution)\ncontext.get_history()\n</code></pre>"},{"location":"agents/autonomous-agent/#example-code","title":"Example Code","text":"<p>See examples/autonomous_agent_example.py for complete examples:</p> <ul> <li>Basic usage</li> <li>Custom instructions</li> <li>Error handling</li> <li>Tool registration</li> </ul>"},{"location":"agents/autonomous-agent/#see-also","title":"See Also","text":"<ul> <li>Agent Overview</li> <li>Qwen Code CLI Agent</li> <li>Stub Agent</li> <li>Configuration Reference</li> </ul>"},{"location":"agents/kb-reading-tools/","title":"Knowledge Base Reading Tools","text":"<p>\u0410\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u044b\u0439 \u0430\u0433\u0435\u043d\u0442 \u0442\u0435\u043f\u0435\u0440\u044c \u0438\u043c\u0435\u0435\u0442 \u043d\u0430\u0431\u043e\u0440 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f \u0438 \u043f\u043e\u0438\u0441\u043a\u0430 \u0432 \u0431\u0430\u0437\u0435 \u0437\u043d\u0430\u043d\u0438\u0439. \u042d\u0442\u0438 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0442 \u0430\u0433\u0435\u043d\u0442\u0443 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0441 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0432 KB \u043f\u0435\u0440\u0435\u0434 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435\u043c \u043d\u043e\u0432\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430.</p>"},{"location":"agents/kb-reading-tools/#_1","title":"\u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b","text":""},{"location":"agents/kb-reading-tools/#1-kb_read_file-","title":"1. <code>kb_read_file</code> - \u0427\u0442\u0435\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u043e\u0432","text":"<p>\u0427\u0438\u0442\u0430\u0435\u0442 \u043e\u0434\u0438\u043d \u0438\u043b\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0444\u0430\u0439\u043b\u043e\u0432 \u0438\u0437 \u0431\u0430\u0437\u044b \u0437\u043d\u0430\u043d\u0438\u0439.</p> <p>\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b: - <code>paths</code> (array of strings, \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439) - \u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043f\u0443\u0442\u0435\u0439 \u043a \u0444\u0430\u0439\u043b\u0430\u043c</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f: <pre><code>{\n  \"paths\": [\"topics/ai/neural-networks.md\", \"topics/tech/python.md\"]\n}\n</code></pre></p> <p>\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442: <pre><code>{\n  \"success\": true,\n  \"files_read\": 2,\n  \"results\": [\n    {\n      \"path\": \"topics/ai/neural-networks.md\",\n      \"full_path\": \"/path/to/kb/topics/ai/neural-networks.md\",\n      \"content\": \"# Neural Networks\\n\\n...\",\n      \"size\": 1234\n    }\n  ],\n  \"errors\": null\n}\n</code></pre></p> <p>\u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438: - \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0447\u0442\u0435\u043d\u0438\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0444\u0430\u0439\u043b\u043e\u0432 \u0437\u0430 \u043e\u0434\u0438\u043d \u0432\u044b\u0437\u043e\u0432 - \u0412\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u043f\u0443\u0442\u0435\u0439 \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u044f path traversal \u0430\u0442\u0430\u043a - \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0438 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430 - \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0438 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430</p>"},{"location":"agents/kb-reading-tools/#2-kb_list_directory-","title":"2. <code>kb_list_directory</code> - \u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e \u043f\u0430\u043f\u043a\u0438","text":"<p>\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0444\u0430\u0439\u043b\u044b \u0438 \u043f\u0430\u043f\u043a\u0438 \u0432 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0439 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438.</p> <p>\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b: - <code>path</code> (string, \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439) - \u041e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0443\u0442\u044c \u043a \u043f\u0430\u043f\u043a\u0435. \u041f\u0443\u0441\u0442\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0434\u043b\u044f \u043a\u043e\u0440\u043d\u044f. - <code>recursive</code> (boolean, \u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439) - \u0420\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u043f\u043e\u0434\u043f\u0430\u043f\u043a\u0438 (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e <code>false</code>)</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f: <pre><code>{\n  \"path\": \"topics/ai\",\n  \"recursive\": false\n}\n</code></pre></p> <p>\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442: <pre><code>{\n  \"success\": true,\n  \"path\": \"topics/ai\",\n  \"recursive\": false,\n  \"files\": [\n    {\n      \"path\": \"topics/ai/neural-networks.md\",\n      \"name\": \"neural-networks.md\",\n      \"size\": 1234\n    }\n  ],\n  \"directories\": [\n    {\n      \"path\": \"topics/ai/machine-learning\",\n      \"name\": \"machine-learning\"\n    }\n  ],\n  \"file_count\": 1,\n  \"directory_count\": 1\n}\n</code></pre></p> <p>\u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438: - \u041c\u043e\u0436\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0433\u043e \u0434\u0435\u0440\u0435\u0432\u0430 \u0444\u0430\u0439\u043b\u043e\u0432 - \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u0444\u0430\u0439\u043b\u044b \u0438 \u043f\u0430\u043f\u043a\u0438 - \u0412\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0440\u0430\u0437\u043c\u0435\u0440 \u0444\u0430\u0439\u043b\u043e\u0432 - \u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u0430\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u043f\u0443\u0442\u0435\u0439</p>"},{"location":"agents/kb-reading-tools/#3-kb_search_files-","title":"3. <code>kb_search_files</code> - \u041f\u043e\u0438\u0441\u043a \u0444\u0430\u0439\u043b\u043e\u0432 \u043f\u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044e","text":"<p>\u0418\u0449\u0435\u0442 \u0444\u0430\u0439\u043b\u044b \u0438 \u043f\u0430\u043f\u043a\u0438 \u043f\u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044e \u0438\u043b\u0438 glob-\u0448\u0430\u0431\u043b\u043e\u043d\u0443.</p> <p>\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b: - <code>pattern</code> (string, \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439) - \u0428\u0430\u0431\u043b\u043e\u043d \u043f\u043e\u0438\u0441\u043a\u0430 (\u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 glob: <code>*</code>, <code>?</code>, <code>[]</code>) - <code>case_sensitive</code> (boolean, \u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439) - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u043e\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u044b\u0439 \u043f\u043e\u0438\u0441\u043a (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e <code>false</code>)</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432: - <code>*.md</code> - \u0432\u0441\u0435 markdown \u0444\u0430\u0439\u043b\u044b - <code>ai/**/*.md</code> - \u0432\u0441\u0435 markdown \u0444\u0430\u0439\u043b\u044b \u0432 \u043f\u0430\u043f\u043a\u0435 ai \u0438 \u043f\u043e\u0434\u043f\u0430\u043f\u043a\u0430\u0445 - <code>*neural*</code> - \u0444\u0430\u0439\u043b\u044b \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \"neural\" \u0432 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0438</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f: <pre><code>{\n  \"pattern\": \"*neural*.md\",\n  \"case_sensitive\": false\n}\n</code></pre></p> <p>\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442: <pre><code>{\n  \"success\": true,\n  \"pattern\": \"*neural*.md\",\n  \"case_sensitive\": false,\n  \"files\": [\n    {\n      \"path\": \"topics/ai/neural-networks.md\",\n      \"name\": \"neural-networks.md\",\n      \"size\": 1234\n    }\n  ],\n  \"directories\": [],\n  \"file_count\": 1,\n  \"directory_count\": 0\n}\n</code></pre></p> <p>\u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438: - \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 glob-\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432 - \u041f\u043e\u0438\u0441\u043a \u043a\u0430\u043a \u043f\u043e \u043f\u043e\u043b\u043d\u043e\u043c\u0443 \u043f\u0443\u0442\u0438, \u0442\u0430\u043a \u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e \u0438\u043c\u0435\u043d\u0438 \u0444\u0430\u0439\u043b\u0430 - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u043e\u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e - \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438 \u0444\u0430\u0439\u043b\u044b, \u0438 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438</p>"},{"location":"agents/kb-reading-tools/#4-kb_search_content-","title":"4. <code>kb_search_content</code> - \u041f\u043e\u0438\u0441\u043a \u043f\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u043c\u0443","text":"<p>\u0418\u0449\u0435\u0442 \u0442\u0435\u043a\u0441\u0442 \u0432\u043d\u0443\u0442\u0440\u0438 \u0444\u0430\u0439\u043b\u043e\u0432 \u0432 \u0431\u0430\u0437\u0435 \u0437\u043d\u0430\u043d\u0438\u0439.</p> <p>\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b: - <code>query</code> (string, \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439) - \u0422\u0435\u043a\u0441\u0442 \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 - <code>case_sensitive</code> (boolean, \u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439) - \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u043e\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u044b\u0439 \u043f\u043e\u0438\u0441\u043a (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e <code>false</code>) - <code>file_pattern</code> (string, \u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439) - Glob \u0448\u0430\u0431\u043b\u043e\u043d \u0434\u043b\u044f \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u0444\u0430\u0439\u043b\u043e\u0432 (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e <code>*.md</code>)</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f: <pre><code>{\n  \"query\": \"machine learning\",\n  \"case_sensitive\": false,\n  \"file_pattern\": \"*.md\"\n}\n</code></pre></p> <p>\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442: <pre><code>{\n  \"success\": true,\n  \"query\": \"machine learning\",\n  \"case_sensitive\": false,\n  \"file_pattern\": \"*.md\",\n  \"matches\": [\n    {\n      \"path\": \"topics/ai/neural-networks.md\",\n      \"name\": \"neural-networks.md\",\n      \"occurrences\": 3,\n      \"matches\": [\n        {\n          \"line_number\": 5,\n          \"line\": \"Machine learning is a subset of AI\",\n          \"context\": \"# Introduction\\n\\nMachine learning is a subset of AI\\nthat focuses on...\"\n        }\n      ]\n    }\n  ],\n  \"files_found\": 1\n}\n</code></pre></p> <p>\u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438: - \u041f\u043e\u043b\u043d\u043e\u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u043c\u0443 \u0444\u0430\u0439\u043b\u043e\u0432 - \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043d\u043e\u043c\u0435\u0440\u0430 \u0441\u0442\u0440\u043e\u043a \u0438 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0432\u043e\u043a\u0440\u0443\u0433 \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u043e\u0433\u043e \u0442\u0435\u043a\u0441\u0442\u0430 - \u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435: \u043f\u0435\u0440\u0432\u044b\u0435 5 \u0441\u043e\u0432\u043f\u0430\u0434\u0435\u043d\u0438\u0439 \u043d\u0430 \u0444\u0430\u0439\u043b - \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e \u0442\u0438\u043f\u0443 \u0444\u0430\u0439\u043b\u043e\u0432 \u0447\u0435\u0440\u0435\u0437 glob-\u0448\u0430\u0431\u043b\u043e\u043d - \u042d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u043d\u0443\u0436\u043d\u044b\u0445 \u0444\u0430\u0439\u043b\u0430\u0445</p>"},{"location":"agents/kb-reading-tools/#_2","title":"\u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c","text":"<p>\u0412\u0441\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0432\u043a\u043b\u044e\u0447\u0430\u044e\u0442 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e \u043f\u0443\u0442\u0435\u0439 \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u044f: - Path traversal \u0430\u0442\u0430\u043a (<code>../../../etc/passwd</code>) - \u0414\u043e\u0441\u0442\u0443\u043f\u0430 \u0437\u0430 \u043f\u0440\u0435\u0434\u0435\u043b\u044b \u043a\u043e\u0440\u043d\u044f \u0431\u0430\u0437\u044b \u0437\u043d\u0430\u043d\u0438\u0439 - \u0427\u0442\u0435\u043d\u0438\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u044b\u0445 \u0444\u0430\u0439\u043b\u043e\u0432</p> <p>\u0412\u0441\u0435 \u043f\u0443\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u0438 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u0432\u043d\u0443\u0442\u0440\u0438 <code>kb_root_path</code>.</p>"},{"location":"agents/kb-reading-tools/#_3","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f","text":""},{"location":"agents/kb-reading-tools/#1","title":"\u0421\u0446\u0435\u043d\u0430\u0440\u0438\u0439 1: \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430 \u043f\u0435\u0440\u0435\u0434 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435\u043c","text":"<pre><code># \u0410\u0433\u0435\u043d\u0442 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0438\u0449\u0435\u0442 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0444\u0430\u0439\u043b\u044b \u043e \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u044b\u0445 \u0441\u0435\u0442\u044f\u0445\nresult = await agent._execute_tool({\n    \"tool_name\": \"kb_search_files\",\n    \"tool_params\": {\"pattern\": \"*neural*.md\"}\n})\n\n# \u0415\u0441\u043b\u0438 \u043d\u0430\u0445\u043e\u0434\u0438\u0442, \u0447\u0438\u0442\u0430\u0435\u0442 \u0438\u0445\nif result[\"file_count\"] &gt; 0:\n    read_result = await agent._execute_tool({\n        \"tool_name\": \"kb_read_file\",\n        \"tool_params\": {\"paths\": [f[\"path\"] for f in result[\"files\"]]}\n    })\n    # \u0410\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u043a\u043e\u043d\u0442\u0435\u043d\u0442 \u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u044f\u0435\u0442, \u0430 \u043d\u0435 \u0434\u0443\u0431\u043b\u0438\u0440\u0443\u0435\u0442\n</code></pre>"},{"location":"agents/kb-reading-tools/#2","title":"\u0421\u0446\u0435\u043d\u0430\u0440\u0438\u0439 2: \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0431\u0430\u0437\u044b \u0437\u043d\u0430\u043d\u0438\u0439","text":"<pre><code># \u0421\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439\ncategories = await agent._execute_tool({\n    \"tool_name\": \"kb_list_directory\",\n    \"tool_params\": {\"path\": \"topics\", \"recursive\": False}\n})\n\n# \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443\nfor category in categories[\"directories\"]:\n    files = await agent._execute_tool({\n        \"tool_name\": \"kb_list_directory\",\n        \"tool_params\": {\"path\": category[\"path\"], \"recursive\": True}\n    })\n</code></pre>"},{"location":"agents/kb-reading-tools/#3","title":"\u0421\u0446\u0435\u043d\u0430\u0440\u0438\u0439 3: \u041f\u043e\u0438\u0441\u043a \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0442\u0435\u043c","text":"<pre><code># \u0418\u0449\u0435\u0442 \u0432\u0441\u0435 \u0443\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u044f \"Python\" \u0432 \u0431\u0430\u0437\u0435\npython_refs = await agent._execute_tool({\n    \"tool_name\": \"kb_search_content\",\n    \"tool_params\": {\n        \"query\": \"Python\",\n        \"file_pattern\": \"*.md\"\n    }\n})\n\n# \u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u043a\u0430\u0440\u0442\u0443 \u0441\u0432\u044f\u0437\u0435\u0439 \u043c\u0435\u0436\u0434\u0443 \u0442\u0435\u043c\u0430\u043c\u0438\n</code></pre>"},{"location":"agents/kb-reading-tools/#_4","title":"\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 \u0430\u0433\u0435\u043d\u0442\u0441\u043a\u0438\u043c \u0446\u0438\u043a\u043b\u043e\u043c","text":"<p>\u042d\u0442\u0438 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0432 \u0430\u0433\u0435\u043d\u0442\u0441\u043a\u043e\u043c \u0446\u0438\u043a\u043b\u0435 \u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0432\u044b\u0437\u0432\u0430\u043d\u044b LLM \u0447\u0435\u0440\u0435\u0437 function calling:</p> <pre><code>agent = AutonomousAgent(\n    llm_connector=openai_connector,\n    kb_root_path=Path(\"./my_knowledge_base\")\n)\n\n# LLM \u043c\u043e\u0436\u0435\u0442 \u0440\u0435\u0448\u0438\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043b\u044e\u0431\u043e\u0439 \u0438\u0437 \u044d\u0442\u0438\u0445 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432\n# \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430\nresult = await agent.process({\n    \"text\": \"Find and summarize all articles about machine learning\"\n})\n</code></pre> <p>LLM \u0441\u0430\u043c \u0440\u0435\u0448\u0430\u0435\u0442: 1. \u041a\u0430\u043a\u0438\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c 2. \u0412 \u043a\u0430\u043a\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0438\u0445 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c 3. \u041a\u0430\u043a \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b</p>"},{"location":"agents/kb-reading-tools/#_5","title":"\u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c","text":"<p>\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438:</p> <ol> <li>kb_read_file: \u0427\u0438\u0442\u0430\u0439\u0442\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0444\u0430\u0439\u043b\u043e\u0432 \u0437\u0430 \u0440\u0430\u0437, \u043d\u043e \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 10-20 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e</li> <li>kb_list_directory: \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 <code>recursive=false</code> \u043a\u043e\u0433\u0434\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e</li> <li>kb_search_files: \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0447\u043d\u044b\u0435 \u0448\u0430\u0431\u043b\u043e\u043d\u044b \u0432\u043c\u0435\u0441\u0442\u043e <code>*</code></li> <li>kb_search_content: \u0423\u043a\u0430\u0437\u044b\u0432\u0430\u0439\u0442\u0435 <code>file_pattern</code> \u0434\u043b\u044f \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u043f\u043e\u0438\u0441\u043a\u0430</li> </ol> <p>\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f:</p> <ul> <li><code>kb_search_content</code> \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c 5 \u0441\u043e\u0432\u043f\u0430\u0434\u0435\u043d\u0438\u0439 \u043d\u0430 \u0444\u0430\u0439\u043b</li> <li>\u0412\u0441\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e (\u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u044b)</li> <li>\u0420\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u044b\u0439 listing \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043c\u0435\u0434\u043b\u0435\u043d\u043d\u044b\u043c \u043d\u0430 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0431\u0430\u0437\u0430\u0445</li> </ul>"},{"location":"agents/kb-reading-tools/#_6","title":"\u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435","text":"<p>\u0414\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0447\u0442\u0435\u043d\u0438\u044f KB:</p> <ol> <li>\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043c\u0435\u0442\u043e\u0434 <code>_tool_kb_your_tool</code> \u0432 <code>AutonomousAgent</code></li> <li>\u0417\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0443\u0439\u0442\u0435 \u0432 <code>_register_all_tools()</code></li> <li>\u0414\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u0441\u0445\u0435\u043c\u0443 \u0432 <code>_build_tools_schema()</code></li> <li>\u0414\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u0442\u0435\u0441\u0442\u044b \u0432 <code>tests/test_kb_reading_tools.py</code></li> </ol> <p>\u041f\u0440\u0438\u043c\u0435\u0440: <pre><code>async def _tool_kb_get_stats(self, params: Dict[str, Any]) -&gt; Dict[str, Any]:\n    \"\"\"Get statistics about knowledge base\"\"\"\n    # Implementation\n    pass\n</code></pre></p>"},{"location":"agents/mcp-config-format/","title":"MCP Server Configuration Format","text":"<p>This document describes the standard MCP (Model Context Protocol) server configuration format used in this project.</p>"},{"location":"agents/mcp-config-format/#overview","title":"Overview","text":"<p>The configuration file <code>data/mcp_servers/mem-agent.json</code> follows the standard MCP configuration format that is compatible with: - \u2713 Cursor MCP - \u2713 Claude Desktop - \u2713 Qwen CLI - \u2713 Other MCP clients</p>"},{"location":"agents/mcp-config-format/#standard-configuration-structure","title":"Standard Configuration Structure","text":"<p>All MCP server configurations follow this top-level structure:</p> <pre><code>{\n  \"mcpServers\": {\n    \"server-name\": {\n      // Server configuration here\n    }\n  }\n}\n</code></pre>"},{"location":"agents/mcp-config-format/#httpsse-transport-default","title":"HTTP/SSE Transport (Default)","text":"<p>For servers using HTTP with Server-Sent Events (SSE), the configuration format is:</p> <pre><code>{\n  \"mcpServers\": {\n    \"mem-agent\": {\n      \"url\": \"http://127.0.0.1:8765/sse\",\n      \"timeout\": 10000,\n      \"trust\": true,\n      \"description\": \"Agent's personal note-taking and search system\"\n    }\n  }\n}\n</code></pre>"},{"location":"agents/mcp-config-format/#httpsse-fields","title":"HTTP/SSE Fields","text":"Field Type Required Description <code>url</code> string \u2713 SSE endpoint URL (typically <code>/sse</code> path) <code>timeout</code> number \u2713 Connection timeout in milliseconds <code>trust</code> boolean \u2713 Whether to trust this server <code>description</code> string \u2713 Human-readable server description"},{"location":"agents/mcp-config-format/#advantages-of-httpsse","title":"Advantages of HTTP/SSE","text":"<ul> <li>\u2713 Better compatibility with network environments</li> <li>\u2713 Easier debugging with standard HTTP tools</li> <li>\u2713 Single server instance can handle multiple clients</li> <li>\u2713 Works across different processes and machines</li> </ul>"},{"location":"agents/mcp-config-format/#stdio-transport","title":"stdio Transport","text":"<p>For servers using standard input/output, the configuration format is:</p> <pre><code>{\n  \"mcpServers\": {\n    \"mem-agent\": {\n      \"command\": \"python\",\n      \"args\": [\"-m\", \"src.agents.mcp.memory.memory_server\"],\n      \"cwd\": \"/path/to/project\",\n      \"env\": {},\n      \"timeout\": 10000,\n      \"trust\": true,\n      \"description\": \"Agent's personal note-taking and search system\"\n    }\n  }\n}\n</code></pre>"},{"location":"agents/mcp-config-format/#stdio-fields","title":"stdio Fields","text":"Field Type Required Description <code>command</code> string \u2713 Command to execute (e.g., \"python\", \"node\") <code>args</code> array \u2713 Command arguments <code>cwd</code> string \u2713 Working directory for the process <code>env</code> object \u2713 Environment variables <code>timeout</code> number \u2713 Connection timeout in milliseconds <code>trust</code> boolean \u2713 Whether to trust this server <code>description</code> string \u2713 Human-readable server description"},{"location":"agents/mcp-config-format/#advantages-of-stdio","title":"Advantages of stdio","text":"<ul> <li>\u2713 Simpler for local-only scenarios</li> <li>\u2713 One server instance per client</li> <li>\u2713 No network ports required</li> <li>\u2713 Easier process isolation</li> </ul>"},{"location":"agents/mcp-config-format/#our-implementation","title":"Our Implementation","text":""},{"location":"agents/mcp-config-format/#generated-configuration","title":"Generated Configuration","text":"<p>When the bot starts, it automatically generates <code>data/mcp_servers/mem-agent.json</code> with:</p> <ol> <li>HTTP/SSE configuration (default) - Used for client connections</li> <li>stdio variant (reference) - Available in <code>_stdio_variant</code> field for alternative setups</li> </ol> <p>Example generated file:</p> <pre><code>{\n  \"mcpServers\": {\n    \"mem-agent\": {\n      \"url\": \"http://127.0.0.1:8765/sse\",\n      \"timeout\": 10000,\n      \"trust\": true,\n      \"description\": \"Agent's personal note-taking and search system\",\n      \"_transport\": \"http\",\n      \"_command\": \"python\",\n      \"_args\": [\"-m\", \"src.agents.mcp.memory.memory_server_http\", \"--host\", \"127.0.0.1\", \"--port\", \"8765\"],\n      \"_cwd\": \"/workspace\",\n      \"_stdio_variant\": {\n        \"command\": \"python\",\n        \"args\": [\"-m\", \"src.agents.mcp.mem_agent_server_http\", \"--host\", \"127.0.0.1\", \"--port\", \"8765\"],\n        \"cwd\": \"/workspace\",\n        \"env\": {},\n        \"timeout\": 10000,\n        \"trust\": true,\n        \"description\": \"Agent's personal note-taking and search system (stdio variant)\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"agents/mcp-config-format/#internal-metadata-fields","title":"Internal Metadata Fields","text":"<p>Fields prefixed with <code>_</code> are used internally and are not part of the standard MCP format:</p> <ul> <li><code>_transport</code>: Transport type (\"http\" or \"stdio\")</li> <li><code>_command</code>: Command for internal process management</li> <li><code>_args</code>: Arguments for internal process management</li> <li><code>_cwd</code>: Working directory for internal process management</li> <li><code>_stdio_variant</code>: Complete stdio configuration for reference</li> </ul> <p>These fields are ignored by standard MCP clients and provide additional metadata for our internal tooling.</p>"},{"location":"agents/mcp-config-format/#using-the-configuration","title":"Using the Configuration","text":""},{"location":"agents/mcp-config-format/#with-qwen-cli","title":"With Qwen CLI","text":"<p>The Qwen CLI configuration generator (<code>qwen_config_generator.py</code>) creates compatible configurations:</p> <pre><code>from src.agents.mcp.qwen_config_generator import setup_qwen_mcp_config\n\n# HTTP/SSE mode (default)\nsetup_qwen_mcp_config(\n    global_config=True,\n    use_http=True,\n    http_port=8765\n)\n\n# stdio mode\nsetup_qwen_mcp_config(\n    global_config=True,\n    use_http=False\n)\n</code></pre>"},{"location":"agents/mcp-config-format/#with-python-mcp-client","title":"With Python MCP Client","text":"<pre><code>from src.agents.mcp.memory.memory_tool import MemoryMCPTool\n\ntool = MemoryMCPTool()\nconfig = tool.mcp_server_config\n\n# Config is automatically loaded from mem-agent.json\n# and supports both HTTP/SSE and stdio formats\n</code></pre>"},{"location":"agents/mcp-config-format/#with-cursor-claude-desktop","title":"With Cursor / Claude Desktop","text":"<p>Copy the configuration (without internal <code>_</code> fields) to: - Cursor: <code>.mcp.json</code> in project root - Claude Desktop: <code>~/Library/Application Support/Claude/claude_desktop_config.json</code> (macOS)</p>"},{"location":"agents/mcp-config-format/#validation","title":"Validation","text":"<p>To validate your configuration:</p> <pre><code>python3 test_mcp_config_format_simple.py\n</code></pre> <p>This will: 1. Create a sample configuration 2. Validate the format 3. Show compatibility information 4. Display both HTTP/SSE and stdio variants</p>"},{"location":"agents/mcp-config-format/#references","title":"References","text":"<ul> <li>Model Context Protocol Specification</li> <li>Cursor MCP Documentation</li> <li>Claude Desktop MCP Support</li> <li>Qwen Code CLI Agent</li> </ul>"},{"location":"agents/mcp-config-format/#migration-from-old-format","title":"Migration from Old Format","text":"<p>If you have an old-format configuration file, it will be automatically replaced with the standard format when the bot starts. The old format looked like:</p> <pre><code>{\n  \"name\": \"mem-agent\",\n  \"command\": \"python\",\n  \"args\": [...],\n  \"working_dir\": \"...\",\n  \"enabled\": true,\n  \"transport\": \"http\"\n}\n</code></pre> <p>This non-standard format is no longer supported. Delete the old <code>mem-agent.json</code> and let the bot recreate it in the standard format.</p>"},{"location":"agents/mcp-server-registry/","title":"MCP Server Registry","text":"<p>The MCP (Model Context Protocol) Server Registry provides a flexible system for discovering, managing, and connecting to MCP servers through simple JSON configuration files.</p>"},{"location":"agents/mcp-server-registry/#overview","title":"Overview","text":"<p>The registry system allows you to:</p> <ul> <li>Discover servers automatically from JSON configuration files</li> <li>Enable/disable servers through configuration</li> <li>Add custom MCP servers by uploading JSON files</li> <li>Integrate external MCP servers without modifying code</li> </ul>"},{"location":"agents/mcp-server-registry/#architecture","title":"Architecture","text":"<p>The MCP server system consists of three main components:</p> <ol> <li>MCP Server Registry - Discovers and manages server configurations</li> <li>MCP Registry Client - Connects to enabled servers</li> <li>MCP Tools - Agent tools that use MCP servers</li> </ol> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         Agent with MCP Support              \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                             \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u2502\n\u2502  \u2502   MCP Registry Client             \u2502     \u2502\n\u2502  \u2502   - Discovers enabled servers     \u2502     \u2502\n\u2502  \u2502   - Creates MCP clients           \u2502     \u2502\n\u2502  \u2502   - Manages connections           \u2502     \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2502\n\u2502           \u2502                                 \u2502\n\u2502           \u25bc                                 \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u2502\n\u2502  \u2502   MCP Server Registry             \u2502     \u2502\n\u2502  \u2502   - Scans data/mcp_servers/*.json \u2502     \u2502\n\u2502  \u2502   - Loads server configurations   \u2502     \u2502\n\u2502  \u2502   - Manages enable/disable state  \u2502     \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2502\n\u2502                                             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"agents/mcp-server-registry/#server-configuration","title":"Server Configuration","text":""},{"location":"agents/mcp-server-registry/#json-format","title":"JSON Format","text":"<p>MCP server configurations are stored as JSON files in <code>data/mcp_servers/</code>:</p> <pre><code>{\n  \"name\": \"server-name\",\n  \"description\": \"Human-readable description of the server\",\n  \"command\": \"python\",\n  \"args\": [\"-m\", \"package.module\"],\n  \"env\": {\n    \"ENV_VAR\": \"value\"\n  },\n  \"working_dir\": \"/path/to/directory\",\n  \"enabled\": true\n}\n</code></pre>"},{"location":"agents/mcp-server-registry/#fields","title":"Fields","text":"<ul> <li>name (required): Unique identifier for the server</li> <li>description (required): Human-readable description</li> <li>command (required): Command to execute the server process</li> <li>args (optional): Command-line arguments as array</li> <li>env (optional): Environment variables as object</li> <li>working_dir (optional): Working directory for the server process</li> <li>enabled (optional, default: true): Whether the server is enabled</li> </ul>"},{"location":"agents/mcp-server-registry/#example-memory-agent-server","title":"Example: Memory Agent Server","text":"<pre><code>{\n  \"name\": \"mem-agent\",\n  \"description\": \"Local memory agent with intelligent memory management\",\n  \"command\": \"python\",\n  \"args\": [\"-m\", \"src.mem_agent.server\"],\n  \"env\": {\n    \"MEM_AGENT_MEMORY_POSTFIX\": \"memory\",\n    \"KB_PATH\": \"/workspace/knowledge_bases/user_kb\"\n  },\n  \"working_dir\": \"/workspace\",\n  \"enabled\": true\n}\n</code></pre>"},{"location":"agents/mcp-server-registry/#adding-mcp-servers","title":"Adding MCP Servers","text":""},{"location":"agents/mcp-server-registry/#method-1-installation-script","title":"Method 1: Installation Script","text":"<p>For built-in servers like mem-agent, use the installation script:</p> <pre><code>python scripts/install_mem_agent.py\n</code></pre> <p>This automatically: 1. Installs dependencies 2. Downloads required models 3. Creates the MCP server configuration 4. Sets up directory structure</p>"},{"location":"agents/mcp-server-registry/#method-2-manual-configuration","title":"Method 2: Manual Configuration","text":"<p>Create a JSON file in <code>data/mcp_servers/</code>:</p> <pre><code>cat &gt; data/mcp_servers/my-server.json &lt;&lt; EOF\n{\n  \"name\": \"my-server\",\n  \"description\": \"My custom MCP server\",\n  \"command\": \"npx\",\n  \"args\": [\"@my-org/mcp-server\"],\n  \"enabled\": true\n}\nEOF\n</code></pre>"},{"location":"agents/mcp-server-registry/#method-3-programmatic-addition","title":"Method 3: Programmatic Addition","text":"<pre><code>from src.mcp_registry import MCPServersManager\n\nmanager = MCPServersManager()\nmanager.initialize()\n\n# Add from JSON string\njson_config = '''\n{\n  \"name\": \"custom-server\",\n  \"description\": \"Custom MCP server\",\n  \"command\": \"node\",\n  \"args\": [\"server.js\"]\n}\n'''\n\nsuccess = manager.add_server_from_json(json_config)\n</code></pre>"},{"location":"agents/mcp-server-registry/#managing-servers","title":"Managing Servers","text":""},{"location":"agents/mcp-server-registry/#list-all-servers","title":"List All Servers","text":"<pre><code>from src.mcp_registry import MCPServersManager\n\nmanager = MCPServersManager()\nmanager.initialize()\n\n# Get all servers\nall_servers = manager.get_all_servers()\nfor server in all_servers:\n    status = \"enabled\" if server.enabled else \"disabled\"\n    print(f\"{server.name}: {server.description} ({status})\")\n\n# Get only enabled servers\nenabled_servers = manager.get_enabled_servers()\nprint(f\"\\nEnabled servers: {len(enabled_servers)}\")\n</code></pre>"},{"location":"agents/mcp-server-registry/#enabledisable-servers","title":"Enable/Disable Servers","text":"<pre><code># Enable a server\nmanager.enable_server(\"mem-agent\")\n\n# Disable a server\nmanager.disable_server(\"mem-agent\")\n\n# Get summary\nsummary = manager.get_servers_summary()\nprint(f\"Total: {summary['total']}, Enabled: {summary['enabled']}\")\n</code></pre>"},{"location":"agents/mcp-server-registry/#remove-server","title":"Remove Server","text":"<pre><code># Remove server configuration\nmanager.remove_server(\"my-server\")\n</code></pre>"},{"location":"agents/mcp-server-registry/#using-mcp-servers-in-agents","title":"Using MCP Servers in Agents","text":""},{"location":"agents/mcp-server-registry/#automatic-discovery","title":"Automatic Discovery","text":"<p>The MCP registry client automatically discovers and connects to enabled servers:</p> <pre><code>from src.agents.mcp import MCPRegistryClient\n\n# Create registry client\nclient = MCPRegistryClient()\nclient.initialize()\n\n# Connect to all enabled servers\nconnected = await client.connect_all_enabled()\nprint(f\"Connected to {len(connected)} servers\")\n\n# List connected servers\nfor name in connected:\n    print(f\"- {name}\")\n</code></pre>"},{"location":"agents/mcp-server-registry/#using-specific-server","title":"Using Specific Server","text":"<pre><code># Get a specific server's client\nmem_agent_client = client.get_client(\"mem-agent\")\n\nif mem_agent_client and mem_agent_client.is_connected:\n    # Use the client\n    result = await mem_agent_client.call_tool(\n        \"use_memory_agent\",\n        {\"question\": \"What's my name?\"}\n    )\n    print(result)\n</code></pre>"},{"location":"agents/mcp-server-registry/#bot-integration","title":"Bot Integration","text":"<p>Users can add MCP servers through the Telegram bot by uploading JSON files.</p>"},{"location":"agents/mcp-server-registry/#future-bot-command-todo","title":"Future Bot Command (TODO)","text":"<pre><code>/mcp add &lt;server-name&gt;\n</code></pre> <p>Then upload a JSON file with the server configuration.</p> <pre><code>/mcp list\n/mcp enable &lt;server-name&gt;\n/mcp disable &lt;server-name&gt;\n/mcp remove &lt;server-name&gt;\n</code></pre>"},{"location":"agents/mcp-server-registry/#configuration-in-settings","title":"Configuration in Settings","text":"<p>MCP servers can be configured through <code>config.yaml</code> or environment variables:</p> <pre><code># Enable MCP support\nAGENT_ENABLE_MCP: true\nAGENT_ENABLE_MCP_MEMORY: true\n\n# MCP servers postfix (per-user within KB)\nMCP_SERVERS_POSTFIX: .mcp_servers\n\n# Memory agent settings\nMEM_AGENT_MODEL: BAAI/bge-m3\nMEM_AGENT_MODEL_PRECISION: 4bit\nMEM_AGENT_BACKEND: auto\nMEM_AGENT_MEMORY_POSTFIX: memory\n</code></pre>"},{"location":"agents/mcp-server-registry/#best-practices","title":"Best Practices","text":""},{"location":"agents/mcp-server-registry/#server-configuration_1","title":"Server Configuration","text":"<ol> <li>Use descriptive names: Make server names clear and unique</li> <li>Provide good descriptions: Help users understand what the server does</li> <li>Set appropriate timeouts: Configure server timeouts based on expected response time</li> <li>Use relative paths: When possible, use relative paths for portability</li> </ol>"},{"location":"agents/mcp-server-registry/#security","title":"Security","text":"<ol> <li>Validate server configurations: Check JSON files before adding</li> <li>Limit server permissions: Use working_dir to restrict file access</li> <li>Review environment variables: Don't expose sensitive credentials</li> <li>Monitor server processes: Ensure servers don't leak resources</li> </ol>"},{"location":"agents/mcp-server-registry/#performance","title":"Performance","text":"<ol> <li>Enable only needed servers: Disable unused servers to save resources</li> <li>Use connection pooling: Reuse MCP clients when possible</li> <li>Handle errors gracefully: Implement proper error handling for server failures</li> </ol>"},{"location":"agents/mcp-server-registry/#troubleshooting","title":"Troubleshooting","text":""},{"location":"agents/mcp-server-registry/#server-wont-connect","title":"Server Won't Connect","text":"<ol> <li> <p>Check if server is enabled:    <pre><code>server = manager.get_server(\"server-name\")\nprint(f\"Enabled: {server.enabled}\")\n</code></pre></p> </li> <li> <p>Verify command and args are correct:    <pre><code>print(f\"Command: {server.command}\")\nprint(f\"Args: {server.args}\")\n</code></pre></p> </li> <li> <p>Check server process logs:    <pre><code># Run server manually to see errors\npython -m src.mem_agent.server\n</code></pre></p> </li> </ol>"},{"location":"agents/mcp-server-registry/#server-configuration-not-loading","title":"Server Configuration Not Loading","text":"<ol> <li> <p>Verify JSON file location:    <pre><code>ls -la data/mcp_servers/\n</code></pre></p> </li> <li> <p>Check JSON syntax:    <pre><code>python -m json.tool data/mcp_servers/server-name.json\n</code></pre></p> </li> <li> <p>Re-discover servers:    <pre><code>manager = MCPServersManager()\nmanager.initialize()  # Forces re-discovery\n</code></pre></p> </li> </ol>"},{"location":"agents/mcp-server-registry/#memory-agent-issues","title":"Memory Agent Issues","text":"<p>See mem-agent-setup.md for specific mem-agent troubleshooting.</p>"},{"location":"agents/mcp-server-registry/#see-also","title":"See Also","text":"<ul> <li>MCP Tools - Overview of MCP tools for agents</li> <li>Memory Agent Setup - Detailed mem-agent setup guide</li> <li>Agent Architecture - Overall agent architecture</li> </ul>"},{"location":"agents/mcp-tools/","title":"MCP (Model Context Protocol) Tools","text":"<p>The autonomous agent supports MCP (Model Context Protocol) tools, allowing you to connect external tools and services as agent capabilities.</p>"},{"location":"agents/mcp-tools/#overview","title":"Overview","text":"<p>MCP is a protocol for connecting AI agents to external tools and data sources. The agent can communicate with MCP servers to access their tools and functionality.</p>"},{"location":"agents/mcp-tools/#built-in-mcp-tools","title":"Built-in MCP Tools","text":"<p>Currently, the following built-in MCP tools are available:</p>"},{"location":"agents/mcp-tools/#memory-agent-tool","title":"Memory Agent Tool","text":"<p>Personal note-taking and search system for the agent using embeddings (e.g., bge-m3).</p> <p>Purpose: This tool is specifically designed for the main agent to: - Record notes: Write down important information, findings, or context during task execution - Search notes: Find and recall previously recorded information - Maintain working memory: Keep context across multiple LLM calls within a single session</p> <p>Use Cases: - During complex multi-step tasks, the agent records findings and retrieves them later - Autonomous agents (like qwen code cli) making many LLM calls in one session - Maintaining context when the agent needs to remember what it discovered earlier</p> <p>Tools: - <code>mcp_memory_agent</code> - Unified note management (store, search, list) - <code>memory_store</code> - Record a note - <code>memory_search</code> - Search through recorded notes</p>"},{"location":"agents/mcp-tools/#configuration","title":"Configuration","text":""},{"location":"agents/mcp-tools/#enable-mcp-tools","title":"Enable MCP Tools","text":"<p>Add to your <code>config.yaml</code>:</p> <pre><code># MCP Settings\nAGENT_ENABLE_MCP: true\nAGENT_ENABLE_MCP_MEMORY: true\nMCP_MEMORY_PROVIDER: \"openai\"\nMCP_MEMORY_MODEL: \"gpt-4\"\n</code></pre> <p>Or set environment variables:</p> <pre><code>export AGENT_ENABLE_MCP=true\nexport AGENT_ENABLE_MCP_MEMORY=true\nexport MCP_MEMORY_PROVIDER=openai\nexport MCP_MEMORY_MODEL=gpt-4\n</code></pre>"},{"location":"agents/mcp-tools/#install-mcp-server","title":"Install MCP Server","text":"<p>The memory agent tool requires the <code>mem-agent-mcp</code> server:</p> <pre><code># Install globally\nnpm install -g @firstbatch/mem-agent-mcp\n\n# Or use npx (no installation required)\n# The tool will automatically use npx if the server is not installed\n</code></pre>"},{"location":"agents/mcp-tools/#set-api-keys","title":"Set API Keys","text":"<p>The memory agent requires an LLM API key:</p> <pre><code># For OpenAI\nexport OPENAI_API_KEY=your_key_here\n\n# For Anthropic\nexport ANTHROPIC_API_KEY=your_key_here\n</code></pre>"},{"location":"agents/mcp-tools/#usage","title":"Usage","text":""},{"location":"agents/mcp-tools/#enable-in-code","title":"Enable in Code","text":"<pre><code>from src.agents.autonomous_agent import AutonomousAgent\nfrom src.agents.llm_connectors import OpenAIConnector\n\nagent = AutonomousAgent(\n    llm_connector=OpenAIConnector(api_key=\"your_key\"),\n    enable_mcp=True,\n    enable_mcp_memory=True,\n    max_iterations=10\n)\n</code></pre>"},{"location":"agents/mcp-tools/#record-notes-store","title":"Record Notes (Store)","text":"<pre><code># The agent records a note during task execution\nresult = await agent.tool_manager.execute(\n    \"memory_store\",\n    {\n        \"content\": \"Found SQL injection vulnerability in login endpoint /api/auth\",\n        \"tags\": [\"security\", \"findings\"]\n    }\n)\n</code></pre>"},{"location":"agents/mcp-tools/#search-notes-recall","title":"Search Notes (Recall)","text":"<pre><code># Later, the agent searches its notes to remember\nresult = await agent.tool_manager.execute(\n    \"memory_search\",\n    {\n        \"query\": \"What security issues did I find?\",\n        \"limit\": 5\n    }\n)\n</code></pre>"},{"location":"agents/mcp-tools/#unified-note-management","title":"Unified Note Management","text":"<pre><code># Record a note\nawait agent.tool_manager.execute(\n    \"mcp_memory_agent\",\n    {\n        \"action\": \"store\",\n        \"content\": \"Database uses PostgreSQL 14 with pgvector extension\",\n        \"context\": \"Infrastructure analysis\"\n    }\n)\n\n# Search notes to recall information\nawait agent.tool_manager.execute(\n    \"mcp_memory_agent\",\n    {\n        \"action\": \"search\",\n        \"content\": \"What database technology is used?\"\n    }\n)\n\n# List all recorded notes\nawait agent.tool_manager.execute(\n    \"mcp_memory_agent\",\n    {\n        \"action\": \"list\"\n    }\n)\n</code></pre>"},{"location":"agents/mcp-tools/#how-it-works","title":"How It Works","text":""},{"location":"agents/mcp-tools/#mcp-architecture","title":"MCP Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Autonomous Agent   \u2502\n\u2502                     \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502  Tool Manager \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n           \u2502\n           \u2502 Function Calls\n           \u2502\n           \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   MCP Client         \u2502\n\u2502   (Python)           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n           \u2502\n           \u2502 JSON-RPC over stdio\n           \u2502\n           \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   MCP Server         \u2502\n\u2502   (Node.js)          \u2502\n\u2502                      \u2502\n\u2502  mem-agent-mcp       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n           \u2502\n           \u2502 API Calls\n           \u2502\n           \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   LLM API            \u2502\n\u2502   (OpenAI, etc.)     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"agents/mcp-tools/#communication-flow","title":"Communication Flow","text":"<ol> <li>Agent Decision: The agent decides to use an MCP tool</li> <li>Tool Execution: The tool manager calls the MCP tool</li> <li>MCP Connection: The MCP client connects to the server (if not already connected)</li> <li>JSON-RPC Request: The client sends a JSON-RPC request over stdio</li> <li>Server Processing: The MCP server processes the request</li> <li>LLM Interaction: The server may call an LLM API for processing</li> <li>Response: The result is sent back through the chain</li> </ol>"},{"location":"agents/mcp-tools/#creating-custom-mcp-tools","title":"Creating Custom MCP Tools","text":"<p>You can create custom MCP tools by extending the <code>BaseMCPTool</code> class:</p> <pre><code>from src.agents.mcp import BaseMCPTool, MCPServerConfig\n\nclass MyCustomMCPTool(BaseMCPTool):\n    @property\n    def name(self) -&gt; str:\n        return \"my_custom_tool\"\n\n    @property\n    def description(self) -&gt; str:\n        return \"Description of what the tool does\"\n\n    @property\n    def parameters_schema(self) -&gt; Dict[str, Any]:\n        return {\n            \"type\": \"object\",\n            \"properties\": {\n                \"param1\": {\"type\": \"string\"},\n            },\n            \"required\": [\"param1\"]\n        }\n\n    @property\n    def mcp_server_config(self) -&gt; MCPServerConfig:\n        return MCPServerConfig(\n            command=\"npx\",\n            args=[\"@your/mcp-server\"],\n            env=os.environ.copy()\n        )\n\n    @property\n    def mcp_tool_name(self) -&gt; str:\n        return \"tool_name_in_server\"\n</code></pre>"},{"location":"agents/mcp-tools/#connecting-any-mcp-server","title":"Connecting Any MCP Server","text":"<p>To connect any MCP-compatible server:</p> <ol> <li>Install the MCP server (usually via npm)</li> <li>Create a tool class extending <code>BaseMCPTool</code></li> <li>Configure the server in <code>mcp_server_config</code></li> <li>Enable the tool in your configuration</li> <li>Register the tool in the tool manager</li> </ol> <p>See <code>src/agents/mcp/memory_agent_tool.py</code> for a complete example.</p>"},{"location":"agents/mcp-tools/#troubleshooting","title":"Troubleshooting","text":""},{"location":"agents/mcp-tools/#mcp-server-not-found","title":"MCP Server Not Found","text":"<pre><code>Error: Failed to connect to MCP server\n</code></pre> <p>Solution: Install the MCP server: <pre><code>npm install -g @firstbatch/mem-agent-mcp\n</code></pre></p>"},{"location":"agents/mcp-tools/#api-key-missing","title":"API Key Missing","text":"<pre><code>Error: API key not found\n</code></pre> <p>Solution: Set the appropriate API key: <pre><code>export OPENAI_API_KEY=your_key_here\n</code></pre></p>"},{"location":"agents/mcp-tools/#connection-issues","title":"Connection Issues","text":"<pre><code>Error: Server process exited immediately\n</code></pre> <p>Solutions: 1. Check that Node.js is installed: <code>node --version</code> 2. Check server installation: <code>npm list -g @firstbatch/mem-agent-mcp</code> 3. Try running the server manually: <code>npx @firstbatch/mem-agent-mcp</code> 4. Check server logs for errors</p>"},{"location":"agents/mcp-tools/#examples","title":"Examples","text":"<p>See <code>examples/mcp_memory_agent_example.py</code> for complete working examples.</p>"},{"location":"agents/mcp-tools/#references","title":"References","text":"<ul> <li>MCP Protocol Specification</li> <li>bge-m3 Model</li> <li>mem-agent-mcp Server</li> <li>MCP Python SDK</li> </ul>"},{"location":"agents/mem-agent-setup/","title":"Memory System Setup Guide","text":"<p>This guide covers the installation, configuration, and usage of the MCP Memory tool - a personal note-taking and search system for autonomous agents.</p> <p>Terminology Note: - MCP Memory - The current note-taking tool for agents (what you're setting up here) - mem-agent - A planned future LLM-based memory assistant (not yet implemented)</p> <p>The configuration still uses <code>MEM_AGENT_*</code> prefixes for historical reasons.</p>"},{"location":"agents/mem-agent-setup/#overview","title":"Overview","text":"<p>The MCP Memory tool is a local note-taking system specifically designed for the main agent. The agent uses it to:</p> <ul> <li>Record notes: Write down important information, findings, or context during task execution</li> <li>Search notes: Find and recall previously recorded information to \"remember\" details</li> <li>Maintain context: Keep working memory across multiple LLM calls within a single session</li> </ul> <p>This is particularly useful for autonomous agents (like qwen code cli) that make many LLM calls within one continuous session.</p>"},{"location":"agents/mem-agent-setup/#storage-types","title":"Storage Types","text":"<p>The system supports two storage backends:</p>"},{"location":"agents/mem-agent-setup/#1-json-storage-default","title":"1. JSON Storage (Default)","text":"<ul> <li>Simple and Fast: File-based JSON storage with substring search</li> <li>No Dependencies: No ML models or additional libraries required</li> <li>Lightweight: Minimal memory footprint</li> <li>Best for: Most users, small to medium memory sizes, simple search needs</li> </ul>"},{"location":"agents/mem-agent-setup/#2-model-based-storage","title":"2. Model-Based Storage","text":"<ul> <li>AI-Powered: Semantic search using the <code>BAAI/bge-m3</code> model from HuggingFace</li> <li>Smart Search: Understands meaning, not just keywords</li> <li>Best for: Large memory sizes, complex queries, semantic understanding needed</li> <li>Requires: Additional dependencies (transformers, sentence-transformers)</li> </ul> <p>The storage type is configured via <code>MEM_AGENT_STORAGE_TYPE</code> setting (default: <code>json</code>).</p>"},{"location":"agents/mem-agent-setup/#quick-start","title":"Quick Start","text":""},{"location":"agents/mem-agent-setup/#installation","title":"Installation","text":"<p>Run the installation script:</p> <pre><code>python scripts/install_mem_agent.py\n</code></pre> <p>This will: 1. Install all required dependencies 2. Download the mem-agent model from HuggingFace 3. Setup the memory directory structure 4. Create the MCP server configuration 5. Register mem-agent as an MCP server</p>"},{"location":"agents/mem-agent-setup/#configuration","title":"Configuration","text":"<p>Enable mem-agent in your <code>config.yaml</code>:</p> <pre><code># Enable MCP support\nAGENT_ENABLE_MCP: true\nAGENT_ENABLE_MCP_MEMORY: true\n\n# Memory agent settings\nMEM_AGENT_STORAGE_TYPE: json  # Storage type: \"json\" (default) or \"vector\"\nMEM_AGENT_MODEL: BAAI/bge-m3  # Model for semantic search (if using \"vector\" storage)\nMEM_AGENT_MODEL_PRECISION: 4bit\nMEM_AGENT_BACKEND: auto\nMEM_AGENT_MEMORY_POSTFIX: memory  # Postfix within KB (kb_path/memory)\nMEM_AGENT_MAX_TOOL_TURNS: 20\n\n# MCP settings\nMCP_SERVERS_POSTFIX: .mcp_servers  # Per-user MCP servers (kb_path/.mcp_servers)\n</code></pre> <p>Or use environment variables in <code>.env</code>:</p> <pre><code>AGENT_ENABLE_MCP=true\nAGENT_ENABLE_MCP_MEMORY=true\nMEM_AGENT_STORAGE_TYPE=json  # or \"vector\" for semantic search\nMEM_AGENT_MODEL=BAAI/bge-m3\nMEM_AGENT_MODEL_PRECISION=4bit\nMEM_AGENT_BACKEND=auto\nMEM_AGENT_MEMORY_POSTFIX=memory\nMCP_SERVERS_POSTFIX=.mcp_servers\n</code></pre>"},{"location":"agents/mem-agent-setup/#choosing-storage-type","title":"Choosing Storage Type","text":"<p>Use JSON storage (default) if: - You want fast, lightweight storage - Simple keyword search is sufficient - You don't want to download ML models - You have limited resources</p> <p>Use Model-based storage if: - You need semantic search (understands meaning) - You have large amounts of memories - You want AI-powered relevance ranking - You have resources for ML models</p> <p>To enable model-based storage:</p> <ol> <li>Set <code>MEM_AGENT_STORAGE_TYPE: vector</code> in config</li> <li>Install additional dependencies:    <pre><code>pip install sentence-transformers transformers torch\n</code></pre></li> <li>The model will be downloaded automatically on first use</li> </ol>"},{"location":"agents/mem-agent-setup/#verification","title":"Verification","text":"<p>Test that mem-agent is installed correctly:</p> <pre><code># Check if model is downloaded\nhuggingface-cli scan-cache | grep mem-agent\n\n# Verify MCP server configuration exists\ncat data/mcp_servers/mem-agent.json\n\n# Check memory directory\nls -la knowledge_bases/default/memory/\n</code></pre>"},{"location":"agents/mem-agent-setup/#advanced-installation","title":"Advanced Installation","text":""},{"location":"agents/mem-agent-setup/#custom-model-location","title":"Custom Model Location","text":"<pre><code>python scripts/install_mem_agent.py \\\n  --model BAAI/bge-m3 \\\n  --precision 8bit \\\n  --workspace /path/to/workspace\n</code></pre>"},{"location":"agents/mem-agent-setup/#skip-model-download","title":"Skip Model Download","text":"<p>If you've already downloaded the model:</p> <pre><code>python scripts/install_mem_agent.py --skip-model-download\n</code></pre>"},{"location":"agents/mem-agent-setup/#platform-specific-backends","title":"Platform-Specific Backends","text":""},{"location":"agents/mem-agent-setup/#linux-with-gpu-vllm","title":"Linux with GPU (vLLM)","text":"<pre><code># Install vLLM\npip install vllm\n\n# Configure to use vLLM\nexport MEM_AGENT_BACKEND=vllm\nexport MEM_AGENT_VLLM_HOST=127.0.0.1\nexport MEM_AGENT_VLLM_PORT=8001\n</code></pre>"},{"location":"agents/mem-agent-setup/#macos-with-apple-silicon-mlx","title":"macOS with Apple Silicon (MLX)","text":"<pre><code># Install MLX\npip install mlx mlx-lm\n\n# Configure to use MLX\nexport MEM_AGENT_BACKEND=mlx\nexport MEM_AGENT_MODEL_PRECISION=4bit\n</code></pre>"},{"location":"agents/mem-agent-setup/#cpu-fallback-transformers","title":"CPU Fallback (Transformers)","text":"<pre><code># Already installed with base dependencies\nexport MEM_AGENT_BACKEND=transformers\n</code></pre>"},{"location":"agents/mem-agent-setup/#memory-structure","title":"Memory Structure","text":"<p>The memory agent uses an Obsidian-like file structure stored per-user within each knowledge base:</p> <pre><code>knowledge_bases/\n\u2514\u2500\u2500 {user_kb_name}/       # Each user has their own KB\n    \u251c\u2500\u2500 .mcp_servers/     # Per-user MCP server configs\n    \u2502   \u2514\u2500\u2500 mem-agent.json\n    \u251c\u2500\u2500 memory/           # Per-user memory (postfix configurable)\n    \u2502   \u251c\u2500\u2500 user.md       # Personal information\n    \u2502   \u2514\u2500\u2500 entities/     # Entity files\n    \u2502       \u251c\u2500\u2500 person_name.md\n    \u2502       \u251c\u2500\u2500 company_name.md\n    \u2502       \u2514\u2500\u2500 place_name.md\n    \u2514\u2500\u2500 topics/           # User's notes\n</code></pre> <p>Key Points: - Memory path is constructed as: <code>{kb_path}/{MEM_AGENT_MEMORY_POSTFIX}</code> - MCP servers are stored at: <code>{kb_path}/{MCP_SERVERS_POSTFIX}</code> - Each user gets their own isolated memory and MCP configuration</p>"},{"location":"agents/mem-agent-setup/#usermd-structure","title":"user.md Structure","text":"<pre><code># User Information\n- user_name: John Doe\n- user_age: 30\n- user_location: San Francisco, CA\n\n## User Relationships\n- employer: [[entities/acme_corp.md]]\n- spouse: [[entities/jane_doe.md]]\n\n## Preferences\n- favorite_color: blue\n- favorite_food: pizza\n</code></pre>"},{"location":"agents/mem-agent-setup/#entity-file-structure","title":"Entity File Structure","text":"<pre><code># Acme Corporation\n- entity_type: Company\n- industry: Technology\n- location: San Francisco, CA\n- founded: 2010\n\n## Employees\n- ceo: [[entities/john_smith.md]]\n</code></pre>"},{"location":"agents/mem-agent-setup/#usage","title":"Usage","text":""},{"location":"agents/mem-agent-setup/#through-agent","title":"Through Agent","text":"<p>The agent automatically uses mem-agent when enabled to record notes and search them:</p> <pre><code>from src.agents import AgentFactory\nfrom config.settings import settings\n\n# Create agent with mem-agent enabled\nagent = AgentFactory.from_settings(settings)\n\n# The agent can record notes during task execution\n# For example, during a complex task:\nresult = await agent.process({\n    \"text\": \"Analyze this codebase and suggest improvements\"\n})\n# The agent internally records findings like:\n# - \"Found authentication vulnerability in login.py\"\n# - \"Database queries missing indexes in user_service.py\"\n# - \"Found 15 TODO comments that need attention\"\n\n# Later in the same session, the agent can search its notes:\n# When asked about specific findings, the agent searches:\n# \"What security issues did I find?\"\n# And retrieves the authentication vulnerability note\n</code></pre>"},{"location":"agents/mem-agent-setup/#direct-api-advanced","title":"Direct API (Advanced)","text":"<pre><code>from config.settings import settings\nfrom pathlib import Path\n\n# Memory agent settings are now part of the main settings module\n# Construct paths based on user's KB:\nkb_path = Path(\"./knowledge_bases/user_kb_name\")  # Get from user settings\n\nprint(f\"Model: {settings.MEM_AGENT_MODEL}\")\nprint(f\"Memory postfix: {settings.MEM_AGENT_MEMORY_POSTFIX}\")\nprint(f\"Full memory path: {settings.get_mem_agent_memory_path(kb_path)}\")\nprint(f\"MCP servers dir: {settings.get_mcp_servers_dir(kb_path)}\")\nprint(f\"Backend: {settings.get_mem_agent_backend()}\")\n\n# The MemoryAgent and MemoryAgentMCPServer classes are planned for future development\n</code></pre>"},{"location":"agents/mem-agent-setup/#model-selection","title":"Model Selection","text":""},{"location":"agents/mem-agent-setup/#available-models","title":"Available Models","text":"<ul> <li>BAAI/bge-m3 (default) - High-quality multilingual embedding model</li> <li>Any sentence-transformers compatible model can be used</li> </ul>"},{"location":"agents/mem-agent-setup/#changing-models","title":"Changing Models","text":"<ol> <li>Update configuration:</li> </ol> <pre><code>MEM_AGENT_MODEL: sentence-transformers/all-MiniLM-L6-v2\nMEM_AGENT_MODEL_PRECISION: fp16\n</code></pre> <ol> <li>Download new model:</li> </ol> <pre><code>huggingface-cli download BAAI/bge-m3\n</code></pre> <ol> <li>Restart the application</li> </ol>"},{"location":"agents/mem-agent-setup/#model-download-management","title":"Model Download Management","text":"<p>Models are cached in HuggingFace cache directory:</p> <pre><code># Check downloaded models\nhuggingface-cli scan-cache\n\n# Delete specific model\nhuggingface-cli delete-cache --repo BAAI/bge-m3\n\n# Clear entire cache\nhuggingface-cli delete-cache\n</code></pre>"},{"location":"agents/mem-agent-setup/#configuration-options","title":"Configuration Options","text":""},{"location":"agents/mem-agent-setup/#settings-reference","title":"Settings Reference","text":"Setting Default Description <code>MEM_AGENT_STORAGE_TYPE</code> <code>json</code> Storage type: <code>json</code> (simple) or <code>vector</code> (AI-powered) <code>MEM_AGENT_MODEL</code> <code>BAAI/bge-m3</code> HuggingFace model ID (for <code>vector</code> storage type) <code>MEM_AGENT_MODEL_PRECISION</code> <code>4bit</code> Model precision (4bit, 8bit, fp16) <code>MEM_AGENT_BACKEND</code> <code>auto</code> Backend (auto, vllm, mlx, transformers) <code>MEM_AGENT_MEMORY_POSTFIX</code> <code>memory</code> Memory directory postfix within KB <code>MEM_AGENT_MAX_TOOL_TURNS</code> <code>20</code> Max tool execution iterations <code>MEM_AGENT_TIMEOUT</code> <code>20</code> Timeout for code execution (seconds) <code>MEM_AGENT_VLLM_HOST</code> <code>127.0.0.1</code> vLLM server host <code>MEM_AGENT_VLLM_PORT</code> <code>8001</code> vLLM server port <code>MEM_AGENT_FILE_SIZE_LIMIT</code> <code>1048576</code> Max file size (1MB) <code>MEM_AGENT_DIR_SIZE_LIMIT</code> <code>10485760</code> Max directory size (10MB) <code>MEM_AGENT_MEMORY_SIZE_LIMIT</code> <code>104857600</code> Max total memory (100MB) <code>MCP_SERVERS_POSTFIX</code> <code>.mcp_servers</code> MCP servers directory postfix within KB"},{"location":"agents/mem-agent-setup/#storage-type-comparison","title":"Storage Type Comparison","text":"Feature JSON Storage Model-Based Storage Search Type Substring match Semantic similarity Speed Very fast Moderate (first query slower) Memory Usage Minimal Higher (model in memory) Dependencies None transformers, sentence-transformers Model Download Not required Required (~400MB) Best Use Case Simple searches Complex semantic queries Example Query \"vulnerability\" finds \"vulnerability\" \"security issue\" finds \"vulnerability\""},{"location":"agents/mem-agent-setup/#backend-selection-logic","title":"Backend Selection Logic","text":"<p>The <code>auto</code> backend automatically selects the best available option:</p> <ol> <li>macOS: MLX if available, else Transformers</li> <li>Linux: vLLM if available, else Transformers</li> <li>Windows: Transformers</li> </ol>"},{"location":"agents/mem-agent-setup/#performance-tuning","title":"Performance Tuning","text":""},{"location":"agents/mem-agent-setup/#gpu-acceleration-vllm","title":"GPU Acceleration (vLLM)","text":"<p>For best performance on Linux with GPU:</p> <pre><code>MEM_AGENT_BACKEND: vllm\nMEM_AGENT_MODEL_PRECISION: fp16\n</code></pre> <p>Adjust vLLM parameters:</p> <pre><code># Note: vLLM is for LLM inference, not for embeddings\n# For embeddings, the model is loaded directly via sentence-transformers\n# vllm serve BAAI/bge-m3 \\\n#   --host 127.0.0.1 \\\n#   --port 8001 \\\n  --tensor-parallel-size 1\n</code></pre>"},{"location":"agents/mem-agent-setup/#memory-limits","title":"Memory Limits","text":"<p>Adjust memory size limits based on your use case:</p> <pre><code># For power users with lots of memories\nMEM_AGENT_FILE_SIZE_LIMIT: 5242880      # 5MB per file\nMEM_AGENT_DIR_SIZE_LIMIT: 52428800      # 50MB per directory  \nMEM_AGENT_MEMORY_SIZE_LIMIT: 524288000  # 500MB total\n</code></pre>"},{"location":"agents/mem-agent-setup/#response-time","title":"Response Time","text":"<p>Reduce max tool turns for faster responses:</p> <pre><code>MEM_AGENT_MAX_TOOL_TURNS: 10  # Faster but less thorough\n</code></pre>"},{"location":"agents/mem-agent-setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"agents/mem-agent-setup/#model-download-issues","title":"Model Download Issues","text":"<p>Problem: Model download fails or is very slow</p> <p>Solutions: 1. Check internet connection 2. Try using a HuggingFace mirror:    <pre><code>export HF_ENDPOINT=https://hf-mirror.com\n</code></pre> 3. Download manually:    <pre><code>huggingface-cli download BAAI/bge-m3 --local-dir ./models/bge-m3\n</code></pre></p>"},{"location":"agents/mem-agent-setup/#backend-issues","title":"Backend Issues","text":"<p>Problem: Backend initialization fails</p> <p>Solutions:</p> <ol> <li> <p>For vLLM errors:    <pre><code># Ensure CUDA is available\npython -c \"import torch; print(torch.cuda.is_available())\"\n\n# Reinstall vLLM\npip uninstall vllm\npip install vllm --no-cache-dir\n</code></pre></p> </li> <li> <p>For MLX errors:    <pre><code># Ensure on macOS with Apple Silicon\nuname -m  # Should show arm64\n\n# Reinstall MLX\npip uninstall mlx mlx-lm\npip install mlx mlx-lm\n</code></pre></p> </li> <li> <p>Fallback to transformers:    <pre><code>MEM_AGENT_BACKEND: transformers\n</code></pre></p> </li> </ol>"},{"location":"agents/mem-agent-setup/#memory-path-issues","title":"Memory Path Issues","text":"<p>Problem: Memory files not being created</p> <p>Solutions:</p> <ol> <li> <p>Check permissions:    <pre><code># Replace {user_kb} with actual KB name\nls -la knowledge_bases/{user_kb}/memory/\nchmod -R 755 knowledge_bases/{user_kb}/memory/\n</code></pre></p> </li> <li> <p>Verify path in configuration:    <pre><code>from config.settings import settings\nfrom pathlib import Path\n\nkb_path = Path(\"./knowledge_bases/user_kb\")\nprint(f\"Memory postfix: {settings.MEM_AGENT_MEMORY_POSTFIX}\")\nprint(f\"Full path: {settings.get_mem_agent_memory_path(kb_path)}\")\n</code></pre></p> </li> <li> <p>Create manually:    <pre><code># Replace {user_kb} with actual KB name\nmkdir -p knowledge_bases/{user_kb}/memory/entities\ntouch knowledge_bases/{user_kb}/memory/user.md\n</code></pre></p> </li> </ol>"},{"location":"agents/mem-agent-setup/#mcp-server-connection-issues","title":"MCP Server Connection Issues","text":"<p>Problem: Agent can't connect to mem-agent MCP server</p> <p>Solutions:</p> <ol> <li>Verify server configuration follows standard MCP format:    <pre><code>cat data/mcp_servers/mem-agent.json\n</code></pre></li> </ol> <p>Should contain:    <pre><code>{\n  \"mcpServers\": {\n    \"mem-agent\": {\n      \"url\": \"http://127.0.0.1:8765/sse\",\n      \"timeout\": 10000,\n      \"trust\": true,\n      \"description\": \"...\"\n    }\n  }\n}\n</code></pre></p> <p>See MCP Configuration Format for details.</p> <ol> <li> <p>Verify HTTP server is running:    <pre><code># Server should auto-start with bot\n# Check logs for: \"[MCPServerManager] \u2713 Server 'mem-agent' started successfully\"\n</code></pre></p> </li> <li> <p>Test server manually:    <pre><code>python -m src.agents.mcp.mem_agent_server_http --host 127.0.0.1 --port 8765\n</code></pre></p> </li> <li> <p>Test SSE endpoint:    <pre><code>curl http://127.0.0.1:8765/sse\n</code></pre></p> </li> </ol>"},{"location":"agents/mem-agent-setup/#best-practices","title":"Best Practices","text":""},{"location":"agents/mem-agent-setup/#memory-organization","title":"Memory Organization","text":"<ol> <li>Use descriptive entity names: <code>jane_doe.md</code>, not <code>person1.md</code></li> <li>Link entities: Use <code>[[entities/name.md]]</code> for relationships</li> <li>Keep files focused: One entity per file</li> <li>Update regularly: Memory agent will update files as it learns</li> </ol>"},{"location":"agents/mem-agent-setup/#model-selection_1","title":"Model Selection","text":"<ol> <li>Start with 4-bit: Good balance of size and performance</li> <li>Upgrade to 8-bit: If you have more RAM and want better quality</li> <li>Use fp16: Only on GPU with plenty of VRAM</li> </ol>"},{"location":"agents/mem-agent-setup/#security","title":"Security","text":"<ol> <li>Review memories: Periodically check <code>knowledge_bases/{user_kb}/memory/</code> for sensitive info</li> <li>Set size limits: Prevent memory from growing too large</li> <li>Backup regularly: Memory files are plain text, easy to backup</li> <li>Per-user isolation: Each user has isolated memory and MCP configs in their KB</li> <li>Knowledge base integration: Memory is stored within your knowledge base structure</li> </ol>"},{"location":"agents/mem-agent-setup/#see-also","title":"See Also","text":"<ul> <li>MCP Server Registry - Managing MCP servers</li> <li>MCP Tools - Using MCP tools in agents</li> <li>Configuration - Complete configuration reference</li> </ul>"},{"location":"agents/overview/","title":"Agent System Overview","text":"<p>Understanding the AI agent system in tg-note.</p>"},{"location":"agents/overview/#what-are-agents","title":"What are Agents?","text":"<p>Agents are AI-powered systems that process your messages and transform them into structured knowledge base entries. They analyze content, categorize it, extract key information, and generate well-formatted Markdown files.</p>"},{"location":"agents/overview/#available-agents","title":"Available Agents","text":"<p>tg-note supports three types of agents, each with different capabilities and use cases.</p>"},{"location":"agents/overview/#comparison-table","title":"Comparison Table","text":"Feature Qwen Code CLI Autonomous Stub AI Processing \u2705 Advanced \u2705 Advanced \u274c Basic Auto Planning \u2705 Yes \u2705 Yes \u274c No Web Search \u2705 Built-in \u2705 Built-in \u274c No Git Operations \u2705 Built-in \u2705 Built-in \u274c No Function Calling \u2705 Yes \u2705 Yes \u274c No External Dependencies Node.js OpenAI lib None Free Tier 2000/day Depends on API Free Best For Production Custom APIs Testing/MVP"},{"location":"agents/overview/#1-qwen-code-cli-recommended","title":"1. Qwen Code CLI \u2b50 Recommended","text":"<p>The most powerful agent using the official Qwen Code CLI tool.</p>"},{"location":"agents/overview/#features","title":"Features","text":"<ul> <li>\u2705 Advanced AI Processing - Qwen3-Coder models</li> <li>\u2705 Automatic Planning - Creates and executes TODO plans</li> <li>\u2705 Built-in Tools - Web search, Git, GitHub, Shell</li> <li>\u2705 Vision Support - Can analyze images</li> <li>\u2705 Free Tier - 2000 requests/day, 60 req/min</li> </ul>"},{"location":"agents/overview/#installation","title":"Installation","text":"<pre><code># Install Node.js 20+\nnpm install -g @qwen-code/qwen-code@latest\n\n# Authenticate\nqwen\n\n# Configure\nAGENT_TYPE: \"qwen_code_cli\"\n</code></pre>"},{"location":"agents/overview/#when-to-use","title":"When to Use","text":"<ul> <li>\u2705 Production deployments</li> <li>\u2705 Need best quality output</li> <li>\u2705 Want automatic planning</li> <li>\u2705 Can install Node.js</li> </ul> <p>Full Documentation \u2192</p>"},{"location":"agents/overview/#2-autonomous-agent","title":"2. Autonomous Agent","text":"<p>Python-based agent with OpenAI-compatible API support.</p>"},{"location":"agents/overview/#features_1","title":"Features","text":"<ul> <li>\u2705 OpenAI-Compatible - Works with OpenAI, Qwen, and other compatible APIs</li> <li>\u2705 Autonomous Planning - Self-planning and decision-making</li> <li>\u2705 Function Calling - Native function calling support</li> <li>\u2705 Built-in Tools - Web search, Git, GitHub, file management</li> <li>\u2705 Flexible - Custom LLM connectors</li> </ul>"},{"location":"agents/overview/#installation_1","title":"Installation","text":"<pre><code># OpenAI library included in requirements\npoetry install\n\n# Configure\nAGENT_TYPE: \"autonomous\"\nAGENT_MODEL: \"gpt-3.5-turbo\"  # or any compatible model\n</code></pre>"},{"location":"agents/overview/#configuration","title":"Configuration","text":"<p>Environment Variables: <pre><code>OPENAI_API_KEY=sk-...\nOPENAI_BASE_URL=https://api.openai.com/v1  # Optional\n</code></pre></p> <p>YAML Settings: <pre><code>AGENT_TYPE: \"autonomous\"\nAGENT_MODEL: \"gpt-3.5-turbo\"\nAGENT_ENABLE_WEB_SEARCH: true\nAGENT_ENABLE_GIT: true\nAGENT_ENABLE_FILE_MANAGEMENT: true\n</code></pre></p>"},{"location":"agents/overview/#when-to-use_1","title":"When to Use","text":"<ul> <li>\u2705 OpenAI or compatible API available</li> <li>\u2705 Need autonomous planning</li> <li>\u2705 Custom LLM provider (Qwen, Azure, etc.)</li> <li>\u2705 Python-only environment</li> <li>\u274c Don't want to use Node.js</li> </ul> <p>Full Documentation \u2192</p>"},{"location":"agents/overview/#3-stub-agent","title":"3. Stub Agent","text":"<p>Simple testing agent without AI.</p>"},{"location":"agents/overview/#features_2","title":"Features","text":"<ul> <li>\u2705 Fast - No API calls</li> <li>\u2705 Simple - Basic categorization</li> <li>\u2705 No Dependencies - Works out of the box</li> <li>\u274c Limited - No AI analysis</li> </ul>"},{"location":"agents/overview/#configuration_1","title":"Configuration","text":"<pre><code>AGENT_TYPE: \"stub\"\n</code></pre>"},{"location":"agents/overview/#when-to-use_2","title":"When to Use","text":"<ul> <li>\u2705 Testing and development</li> <li>\u2705 MVP/prototype</li> <li>\u2705 No API keys available</li> <li>\u274c Production use</li> </ul> <p>Full Documentation \u2192</p>"},{"location":"agents/overview/#how-agents-work","title":"How Agents Work","text":""},{"location":"agents/overview/#processing-pipeline","title":"Processing Pipeline","text":"<pre><code>graph LR\n    A[Message] --&gt; B[Agent]\n    B --&gt; C{Analyze}\n    C --&gt; D[Categorize]\n    D --&gt; E[Extract Info]\n    E --&gt; F[Generate Markdown]\n    F --&gt; G[Save to KB]\n\n    style B fill:#fff3e0\n    style F fill:#e8f5e9\n</code></pre>"},{"location":"agents/overview/#agent-workflow","title":"Agent Workflow","text":"<ol> <li>Receive Content</li> <li>Text messages</li> <li>URLs</li> <li>Forwarded posts</li> <li> <p>Media</p> </li> <li> <p>Analyze</p> </li> <li>Understand topic</li> <li>Extract key points</li> <li> <p>Identify category</p> </li> <li> <p>Process</p> </li> <li>Search for context (if enabled)</li> <li>Gather additional info</li> <li> <p>Structure content</p> </li> <li> <p>Generate</p> </li> <li>Create Markdown file</li> <li>Add metadata</li> <li> <p>Format properly</p> </li> <li> <p>Save</p> </li> <li>Write to KB</li> <li>Commit to Git</li> <li>Notify user</li> </ol>"},{"location":"agents/overview/#choosing-an-agent","title":"Choosing an Agent","text":""},{"location":"agents/overview/#decision-tree","title":"Decision Tree","text":"<pre><code>graph TD\n    A[Choose Agent] --&gt; B{Production or Testing?}\n    B --&gt;|Production| C{Can install Node.js?}\n    B --&gt;|Testing| G[Stub Agent]\n    C --&gt;|Yes| D[Qwen Code CLI \u2b50]\n    C --&gt;|No| E{Have OpenAI-compatible API?}\n    E --&gt;|Yes| F[Autonomous Agent]\n    E --&gt;|No| G\n\n    style D fill:#c8e6c9\n    style F fill:#b3e5fc\n    style G fill:#ffccbc\n</code></pre>"},{"location":"agents/overview/#recommendations","title":"Recommendations","text":""},{"location":"agents/overview/#for-production","title":"For Production","text":"<p>\u2192 Qwen Code CLI</p> <ul> <li>Best quality results</li> <li>Automatic planning</li> <li>Built-in tools</li> <li>Free tier available</li> </ul>"},{"location":"agents/overview/#for-testing","title":"For Testing","text":"<p>\u2192 Stub Agent</p> <ul> <li>Quick setup</li> <li>No dependencies</li> <li>Fast iteration</li> </ul>"},{"location":"agents/overview/#agent-configuration","title":"Agent Configuration","text":""},{"location":"agents/overview/#global-settings","title":"Global Settings","text":"<p>Set in <code>config.yaml</code>:</p> <pre><code># Agent Selection\nAGENT_TYPE: \"qwen_code_cli\"\n\n# Common Settings\nAGENT_MODEL: \"qwen-max\"\nAGENT_TIMEOUT: 300\n\n# Tool Permissions\nAGENT_ENABLE_WEB_SEARCH: true\nAGENT_ENABLE_GIT: true\nAGENT_ENABLE_GITHUB: true\nAGENT_ENABLE_SHELL: false\n</code></pre>"},{"location":"agents/overview/#per-user-settings","title":"Per-User Settings","text":"<p>Users can override via Telegram:</p> <pre><code>/agentsettings\n</code></pre>"},{"location":"agents/overview/#agent-capabilities","title":"Agent Capabilities","text":""},{"location":"agents/overview/#content-analysis","title":"Content Analysis","text":"<p>All agents can: - Extract text content - Identify topics - Generate titles - Create metadata</p> <p>Advanced agents (Qwen) add: - Deep semantic understanding - Context enrichment - Smart categorization - Quality summaries</p>"},{"location":"agents/overview/#tool-usage","title":"Tool Usage","text":"Tool Qwen CLI Autonomous Stub Web Search \u2705 \u2705 \u274c Git Ops \u2705 \u2705 \u274c GitHub API \u2705 \u2705 \u274c Shell \u2705 \u2705 \u274c File Management \u2705 \u2705 \u274c Vision \u2705 \u2705* \u274c <p>*Vision support depends on the LLM model used</p>"},{"location":"agents/overview/#performance","title":"Performance","text":""},{"location":"agents/overview/#typical-processing-time","title":"Typical Processing Time","text":"Agent Short Text Medium Text Long Text Qwen CLI 5-15s 15-45s 45-120s Autonomous 5-20s 15-60s 60-180s Stub &lt;1s &lt;1s &lt;1s"},{"location":"agents/overview/#factors-affecting-speed","title":"Factors Affecting Speed","text":"<ul> <li>Content length</li> <li>URL complexity</li> <li>Web search usage</li> <li>API response time</li> <li>Network latency</li> </ul>"},{"location":"agents/overview/#see-also","title":"See Also","text":"<ul> <li>Qwen Code CLI Guide</li> <li>Autonomous Agent Guide</li> <li>Stub Agent Reference</li> </ul>"},{"location":"agents/qwen-cli-debug-trace/","title":"Qwen CLI Agent - DEBUG \u0422\u0440\u0435\u0439\u0441\u0438\u043d\u0433","text":""},{"location":"agents/qwen-cli-debug-trace/#_1","title":"\u041e\u0431\u0437\u043e\u0440","text":"<p>QwenCodeCLIAgent \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u043e\u0435 DEBUG \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u043e\u0442\u043b\u0430\u0434\u043a\u0438 \u0438 \u043c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f qwen-code CLI \u043a\u043e\u043c\u0430\u043d\u0434\u044b. \u042d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u043e\u043b\u043d\u044b\u0439 \u0442\u0440\u0435\u0439\u0441 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f, \u0432\u043a\u043b\u044e\u0447\u0430\u044f:</p> <ul> <li>\u041a\u043e\u043c\u0430\u043d\u0434\u044b \u0438 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b CLI</li> <li>\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 (\u043f\u0440\u043e\u043c\u043f\u0442)</li> <li>\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 (\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442)</li> <li>\u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f</li> <li>\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f</li> <li>\u041e\u0448\u0438\u0431\u043a\u0438 \u0438 \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u044f</li> </ul>"},{"location":"agents/qwen-cli-debug-trace/#_2","title":"\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0441\u0442\u0430\u0440\u0442","text":""},{"location":"agents/qwen-cli-debug-trace/#1","title":"1. \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f","text":"<pre><code>from pathlib import Path\nfrom config.logging_config import setup_logging\n\n# \u0412\u043a\u043b\u044e\u0447\u0438\u0442\u044c DEBUG \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\nsetup_logging(\n    log_level=\"DEBUG\",\n    log_file=Path(\"logs/qwen_debug.log\"),\n    enable_debug_trace=True\n)\n</code></pre>"},{"location":"agents/qwen-cli-debug-trace/#2","title":"2. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0430\u0433\u0435\u043d\u0442\u0430","text":"<pre><code>from src.agents.qwen_code_cli_agent import QwenCodeCLIAgent\n\n# \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0430\u0433\u0435\u043d\u0442\u0430\nagent = QwenCodeCLIAgent(\n    enable_web_search=True,\n    enable_git=True,\n    timeout=300\n)\n\n# \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043a\u043e\u043d\u0442\u0435\u043d\u0442\ncontent = {\n    \"text\": \"\u0412\u0430\u0448 \u0442\u0435\u043a\u0441\u0442 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438\",\n    \"urls\": [\"https://example.com\"]\n}\n\nresult = await agent.process(content)\n</code></pre>"},{"location":"agents/qwen-cli-debug-trace/#3","title":"3. \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u043b\u043e\u0433\u0438","text":"<p>\u041b\u043e\u0433\u0438 \u0431\u0443\u0434\u0443\u0442 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u044b \u0432: - <code>logs/qwen_debug.log</code> - \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043b\u043e\u0433 (\u0432\u0441\u0435 \u0443\u0440\u043e\u0432\u043d\u0438) - <code>logs/qwen_debug_debug.log</code> - \u0442\u043e\u043b\u044c\u043a\u043e DEBUG \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f</p>"},{"location":"agents/qwen-cli-debug-trace/#_3","title":"\u0427\u0442\u043e \u043b\u043e\u0433\u0438\u0440\u0443\u0435\u0442\u0441\u044f","text":""},{"location":"agents/qwen-cli-debug-trace/#_4","title":"\u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0430\u0433\u0435\u043d\u0442\u0430","text":"<pre><code>[DEBUG] [QwenCodeCLIAgent._check_cli_available] Checking qwen CLI availability...\n[DEBUG] [QwenCodeCLIAgent._check_cli_available] CLI path: qwen\n[DEBUG] [QwenCodeCLIAgent._check_cli_available] Running command: qwen --version\n[DEBUG] [QwenCodeCLIAgent._check_cli_available] Return code: 0\n[DEBUG] [QwenCodeCLIAgent._check_cli_available] STDOUT: qwen version 1.0.0\n[DEBUG] [QwenCodeCLIAgent._check_cli_available] STDERR: \n</code></pre>"},{"location":"agents/qwen-cli-debug-trace/#cli","title":"\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 CLI \u043a\u043e\u043c\u0430\u043d\u0434\u044b","text":"<pre><code>[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli] === CLI EXECUTION TRACE START ===\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli] Command: qwen\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli] Working dir: /workspace\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli] Environment variables:\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli]   OPENAI_API_KEY=sk-xxxxx...\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli]   OPENAI_BASE_URL=https://api.openai.com\n\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli] === STDIN (PROMPT) ===\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli] Prompt length: 1234 characters\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli] Prompt preview (first 500 chars):\nYou are an autonomous content processing agent...\n\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli] === FULL PROMPT ===\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli]\n&lt;\u043f\u043e\u043b\u043d\u044b\u0439 \u0442\u0435\u043a\u0441\u0442 \u043f\u0440\u043e\u043c\u043f\u0442\u0430&gt;\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli] === END FULL PROMPT ===\n\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli] Starting subprocess at 1234567890.123\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli] Process created with PID: 12345\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli] Sending prompt to stdin...\n\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli] Process completed in 15.42s\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli] Process return code: 0\n\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli] === STDERR OUTPUT ===\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli] STDERR length: 0 characters\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli] STDERR is empty\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli] === END STDERR OUTPUT ===\n\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli] === STDOUT OUTPUT ===\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli] STDOUT length: 5678 characters\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli] STDOUT preview (first 500 chars):\n# Machine Learning Article\n...\n\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli] === FULL STDOUT ===\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli]\n&lt;\u043f\u043e\u043b\u043d\u044b\u0439 \u0442\u0435\u043a\u0441\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430&gt;\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli] === END FULL STDOUT ===\n\n[DEBUG] [QwenCodeCLIAgent._execute_qwen_cli] === CLI EXECUTION TRACE END ===\n</code></pre>"},{"location":"agents/qwen-cli-debug-trace/#_5","title":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430","text":"<pre><code>[DEBUG] [QwenCodeCLIAgent] STEP 1: Preparing prompt for qwen-code\n[DEBUG] [QwenCodeCLIAgent] Prepared prompt length: 1234 characters\n\n[DEBUG] [QwenCodeCLIAgent] STEP 2: Executing qwen-code CLI\n[DEBUG] [QwenCodeCLIAgent] Received result length: 5678 characters\n\n[DEBUG] [QwenCodeCLIAgent] STEP 3: Parsing agent response with standard parser\n[DEBUG] [QwenCodeCLIAgent] Result text preview (first 500 chars): ...\n[DEBUG] [QwenCodeCLIAgent] Files created: ['path/to/file.md']\n[DEBUG] [QwenCodeCLIAgent] Folders created: ['path/to/folder']\n\n[DEBUG] [QwenCodeCLIAgent] STEP 4: Extracting KB structure from response\n[DEBUG] [QwenCodeCLIAgent] STEP 5: Extracting title from markdown\n\n[INFO] [QwenCodeCLIAgent] Successfully processed content: title='Machine Learning'\n</code></pre>"},{"location":"agents/qwen-cli-debug-trace/#_6","title":"\u0423\u0440\u043e\u0432\u043d\u0438 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f","text":""},{"location":"agents/qwen-cli-debug-trace/#debug","title":"DEBUG","text":"<p>\u041a\u043e\u0433\u0434\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c: \u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430, \u043e\u0442\u043b\u0430\u0434\u043a\u0430, \u043f\u043e\u0438\u0441\u043a \u043f\u0440\u043e\u0431\u043b\u0435\u043c</p> <p>\u0427\u0442\u043e \u043b\u043e\u0433\u0438\u0440\u0443\u0435\u0442\u0441\u044f: - \u0412\u0441\u0435 \u0434\u0435\u0442\u0430\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f CLI - \u041f\u043e\u043b\u043d\u044b\u0435 \u0442\u0435\u043a\u0441\u0442\u044b \u043f\u0440\u043e\u043c\u043f\u0442\u043e\u0432 \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 - \u0412\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 - \u0428\u0430\u0433\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440: <pre><code>setup_logging(log_level=\"DEBUG\", enable_debug_trace=True)\n</code></pre></p>"},{"location":"agents/qwen-cli-debug-trace/#info","title":"INFO","text":"<p>\u041a\u043e\u0433\u0434\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c: Production, \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430</p> <p>\u0427\u0442\u043e \u043b\u043e\u0433\u0438\u0440\u0443\u0435\u0442\u0441\u044f: - \u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u044f (\u043d\u0430\u0447\u0430\u043b\u043e/\u043a\u043e\u043d\u0435\u0446 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438) - \u0412\u0430\u0436\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f (\u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438, \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438) - \u0423\u0441\u043f\u0435\u0448\u043d\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440: <pre><code>setup_logging(log_level=\"INFO\")\n</code></pre></p>"},{"location":"agents/qwen-cli-debug-trace/#warning","title":"WARNING","text":"<p>\u041a\u043e\u0433\u0434\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c: Production \u0441 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u043c</p> <p>\u0427\u0442\u043e \u043b\u043e\u0433\u0438\u0440\u0443\u0435\u0442\u0441\u044f: - \u041f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u044f (\u043f\u0443\u0441\u0442\u044b\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b, fallback) - \u041f\u043e\u0442\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440: <pre><code>setup_logging(log_level=\"WARNING\")\n</code></pre></p>"},{"location":"agents/qwen-cli-debug-trace/#error","title":"ERROR","text":"<p>\u041a\u043e\u0433\u0434\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c: \u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435</p> <p>\u0427\u0442\u043e \u043b\u043e\u0433\u0438\u0440\u0443\u0435\u0442\u0441\u044f: - \u0422\u043e\u043b\u044c\u043a\u043e \u043a\u0440\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043e\u0448\u0438\u0431\u043a\u0438</p> <p>\u041f\u0440\u0438\u043c\u0435\u0440: <pre><code>setup_logging(log_level=\"ERROR\")\n</code></pre></p>"},{"location":"agents/qwen-cli-debug-trace/#_7","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f","text":""},{"location":"agents/qwen-cli-debug-trace/#1-cli","title":"\u041f\u0440\u0438\u043c\u0435\u0440 1: \u041e\u0442\u043b\u0430\u0434\u043a\u0430 \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0441 CLI","text":"<pre><code>import asyncio\nfrom pathlib import Path\nfrom config.logging_config import setup_logging\nfrom src.agents.qwen_code_cli_agent import QwenCodeCLIAgent\n\nasync def debug_cli_issue():\n    # \u0412\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\n    setup_logging(\n        log_level=\"DEBUG\",\n        log_file=Path(\"logs/debug.log\"),\n        enable_debug_trace=True\n    )\n\n    agent = QwenCodeCLIAgent(timeout=60)\n\n    try:\n        result = await agent.process({\n            \"text\": \"Test content\",\n            \"urls\": []\n        })\n        print(f\"Success: {result['title']}\")\n    except Exception as e:\n        print(f\"Error: {e}\")\n        print(\"Check logs/debug.log and logs/debug_debug.log for details\")\n\nasyncio.run(debug_cli_issue())\n</code></pre>"},{"location":"agents/qwen-cli-debug-trace/#2-production","title":"\u041f\u0440\u0438\u043c\u0435\u0440 2: \u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 \u0432 Production","text":"<pre><code>import asyncio\nfrom pathlib import Path\nfrom config.logging_config import setup_logging\nfrom src.agents.qwen_code_cli_agent import QwenCodeCLIAgent\n\nasync def production_monitoring():\n    # \u0423\u043c\u0435\u0440\u0435\u043d\u043d\u043e\u0435 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f production\n    setup_logging(\n        log_level=\"INFO\",\n        log_file=Path(\"logs/production.log\"),\n        enable_debug_trace=False\n    )\n\n    agent = QwenCodeCLIAgent()\n    result = await agent.process(content)\n\n    # \u0412 \u043b\u043e\u0433\u0430\u0445 \u0431\u0443\u0434\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0432\u0430\u0436\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f:\n    # - \u041d\u0430\u0447\u0430\u043b\u043e/\u043a\u043e\u043d\u0435\u0446 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438\n    # - \u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\n    # - \u041e\u0448\u0438\u0431\u043a\u0438 (\u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c)\n\nasyncio.run(production_monitoring())\n</code></pre>"},{"location":"agents/qwen-cli-debug-trace/#3_1","title":"\u041f\u0440\u0438\u043c\u0435\u0440 3: \u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438","text":"<pre><code>import asyncio\nimport time\nfrom pathlib import Path\nfrom config.logging_config import setup_logging\nfrom src.agents.qwen_code_cli_agent import QwenCodeCLIAgent\n\nasync def performance_analysis():\n    # DEBUG \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f\n    setup_logging(\n        log_level=\"DEBUG\",\n        log_file=Path(\"logs/performance.log\"),\n        enable_debug_trace=True\n    )\n\n    agent = QwenCodeCLIAgent()\n\n    start = time.time()\n    result = await agent.process(content)\n    end = time.time()\n\n    print(f\"Total time: {end - start:.2f}s\")\n    # \u0412 \u043b\u043e\u0433\u0430\u0445 \u0431\u0443\u0434\u0435\u0442 \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0448\u0430\u0433\u0430\n\nasyncio.run(performance_analysis())\n</code></pre>"},{"location":"agents/qwen-cli-debug-trace/#_8","title":"\u0427\u0442\u0435\u043d\u0438\u0435 \u043b\u043e\u0433\u043e\u0432","text":""},{"location":"agents/qwen-cli-debug-trace/#-","title":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043b\u043e\u0433-\u0444\u0430\u0439\u043b\u043e\u0432","text":"<p>\u041f\u0440\u0438 <code>enable_debug_trace=True</code> \u0441\u043e\u0437\u0434\u0430\u044e\u0442\u0441\u044f \u0434\u0432\u0430 \u0444\u0430\u0439\u043b\u0430:</p> <ol> <li>\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043b\u043e\u0433 (<code>logs/qwen_debug.log</code>):</li> <li>\u0412\u0441\u0435 \u0443\u0440\u043e\u0432\u043d\u0438 (DEBUG, INFO, WARNING, ERROR)</li> <li>\u0420\u043e\u0442\u0430\u0446\u0438\u044f: 10 MB</li> <li>\u0425\u0440\u0430\u043d\u0435\u043d\u0438\u0435: 7 \u0434\u043d\u0435\u0439</li> <li> <p>\u0421\u0436\u0430\u0442\u0438\u0435: ZIP</p> </li> <li> <p>Debug-only \u043b\u043e\u0433 (<code>logs/qwen_debug_debug.log</code>):</p> </li> <li>\u0422\u043e\u043b\u044c\u043a\u043e DEBUG \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f</li> <li>\u0420\u043e\u0442\u0430\u0446\u0438\u044f: 50 MB</li> <li>\u0425\u0440\u0430\u043d\u0435\u043d\u0438\u0435: 3 \u0434\u043d\u044f</li> <li>\u0421\u0436\u0430\u0442\u0438\u0435: ZIP</li> </ol>"},{"location":"agents/qwen-cli-debug-trace/#_9","title":"\u0424\u043e\u0440\u043c\u0430\u0442 \u0437\u0430\u043f\u0438\u0441\u0435\u0439","text":"<pre><code>2024-10-03 15:30:45.123 | DEBUG    | qwen_code_cli_agent:_execute_qwen_cli:270 | [QwenCodeCLIAgent._execute_qwen_cli] Executing qwen-code CLI...\n\u2502                         \u2502           \u2502                      \u2502                    \u2502\n\u2502                         \u2502           \u2502                      \u2502                    \u2514\u2500 \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\n\u2502                         \u2502           \u2502                      \u2514\u2500 \u041d\u043e\u043c\u0435\u0440 \u0441\u0442\u0440\u043e\u043a\u0438\n\u2502                         \u2502           \u2514\u2500 \u0424\u0443\u043d\u043a\u0446\u0438\u044f\n\u2502                         \u2514\u2500 \u0423\u0440\u043e\u0432\u0435\u043d\u044c\n\u2514\u2500 \u0412\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u043c\u0435\u0442\u043a\u0430\n</code></pre>"},{"location":"agents/qwen-cli-debug-trace/#_10","title":"\u041f\u043e\u0438\u0441\u043a \u0432 \u043b\u043e\u0433\u0430\u0445","text":"<pre><code># \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435 CLI \u0432\u044b\u0437\u043e\u0432\u044b\ngrep \"CLI EXECUTION TRACE\" logs/qwen_debug.log\n\n# \u041d\u0430\u0439\u0442\u0438 \u043e\u0448\u0438\u0431\u043a\u0438\ngrep \"ERROR\" logs/qwen_debug.log\n\n# \u041d\u0430\u0439\u0442\u0438 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f\ngrep \"Process completed in\" logs/qwen_debug.log\n\n# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u043c\u043f\u0442\u044b\ngrep -A 20 \"FULL PROMPT\" logs/qwen_debug_debug.log\n\n# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b\ngrep -A 50 \"FULL STDOUT\" logs/qwen_debug_debug.log\n</code></pre>"},{"location":"agents/qwen-cli-debug-trace/#_11","title":"\u0411\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u044c","text":""},{"location":"agents/qwen-cli-debug-trace/#_12","title":"\u041c\u0430\u0441\u043a\u0438\u0440\u043e\u0432\u043a\u0430 \u0447\u0443\u0432\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445","text":"<p>API \u043a\u043b\u044e\u0447\u0438 \u0438 \u0442\u043e\u043a\u0435\u043d\u044b \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043c\u0430\u0441\u043a\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0432 \u043b\u043e\u0433\u0430\u0445:</p> <pre><code># \u0412 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f:\nOPENAI_API_KEY=sk-1234567890abcdef1234567890abcdef\n\n# \u0412 \u043b\u043e\u0433\u0430\u0445 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u043a\u0430\u043a:\nOPENAI_API_KEY=sk-12345...\n</code></pre>"},{"location":"agents/qwen-cli-debug-trace/#_13","title":"\u0417\u0430\u0449\u0438\u0449\u0435\u043d\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435","text":"<p>\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043c\u0430\u0441\u043a\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435: - <code>KEY</code> - <code>TOKEN</code> - <code>SECRET</code> - <code>PASSWORD</code></p>"},{"location":"agents/qwen-cli-debug-trace/#_14","title":"\u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c","text":""},{"location":"agents/qwen-cli-debug-trace/#_15","title":"\u0412\u043b\u0438\u044f\u043d\u0438\u0435 \u043d\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c","text":"\u0423\u0440\u043e\u0432\u0435\u043d\u044c Overhead \u0420\u0430\u0437\u043c\u0435\u0440 \u043b\u043e\u0433\u043e\u0432 \u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u044f DEBUG ~5-10% \u0411\u043e\u043b\u044c\u0448\u043e\u0439 Development INFO ~1-2% \u0421\u0440\u0435\u0434\u043d\u0438\u0439 Production WARNING &lt;1% \u041c\u0430\u043b\u044b\u0439 Production ERROR &lt;0.5% \u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 Production"},{"location":"agents/qwen-cli-debug-trace/#_16","title":"\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438","text":"<ol> <li>Development/Testing:</li> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 <code>DEBUG</code> \u0434\u043b\u044f \u043e\u0442\u043b\u0430\u0434\u043a\u0438</li> <li> <p><code>enable_debug_trace=True</code></p> </li> <li> <p>Staging:</p> </li> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 <code>INFO</code> \u0438\u043b\u0438 <code>DEBUG</code> \u043f\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438</li> <li> <p><code>enable_debug_trace=False</code> (\u0435\u0441\u043b\u0438 \u043d\u0435 \u043d\u0443\u0436\u0435\u043d \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u0442\u0440\u0435\u0439\u0441)</p> </li> <li> <p>Production:</p> </li> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 <code>INFO</code> \u0438\u043b\u0438 <code>WARNING</code></li> <li><code>enable_debug_trace=False</code></li> <li>\u0412\u043a\u043b\u044e\u0447\u0430\u0439\u0442\u0435 <code>DEBUG</code> \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438 \u0440\u0430\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0438 \u043f\u0440\u043e\u0431\u043b\u0435\u043c</li> </ol>"},{"location":"agents/qwen-cli-debug-trace/#troubleshooting","title":"Troubleshooting","text":""},{"location":"agents/qwen-cli-debug-trace/#_17","title":"\u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430: \u041b\u043e\u0433\u0438 \u043d\u0435 \u0441\u043e\u0437\u0434\u0430\u044e\u0442\u0441\u044f","text":"<p>\u0420\u0435\u0448\u0435\u043d\u0438\u0435: <pre><code># \u041f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435, \u0447\u0442\u043e \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442\nfrom pathlib import Path\nlog_dir = Path(\"logs\")\nlog_dir.mkdir(parents=True, exist_ok=True)\n\n# \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u0442\u0435 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\nsetup_logging(log_level=\"DEBUG\", log_file=log_dir / \"debug.log\")\n</code></pre></p>"},{"location":"agents/qwen-cli-debug-trace/#_18","title":"\u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430: \u0421\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u043b\u043e\u0433\u043e\u0432","text":"<p>\u0420\u0435\u0448\u0435\u043d\u0438\u0435: <pre><code># \u0423\u043c\u0435\u043d\u044c\u0448\u0438\u0442\u0435 \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\nsetup_logging(log_level=\"INFO\")  # \u0412\u043c\u0435\u0441\u0442\u043e DEBUG\n\n# \u0418\u043b\u0438 \u043e\u0442\u043a\u043b\u044e\u0447\u0438\u0442\u0435 debug \u0442\u0440\u0435\u0439\u0441\u0438\u043d\u0433\nsetup_logging(log_level=\"DEBUG\", enable_debug_trace=False)\n</code></pre></p>"},{"location":"agents/qwen-cli-debug-trace/#cli_1","title":"\u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430: \u041d\u0435 \u0432\u0438\u0436\u0443 \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u0442\u0440\u0435\u0439\u0441 CLI","text":"<p>\u0420\u0435\u0448\u0435\u043d\u0438\u0435: <pre><code># \u0423\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044c, \u0447\u0442\u043e DEBUG \u0432\u043a\u043b\u044e\u0447\u0435\u043d\nsetup_logging(\n    log_level=\"DEBUG\",  # \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e DEBUG\n    enable_debug_trace=True  # \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e True\n)\n</code></pre></p>"},{"location":"agents/qwen-cli-debug-trace/#_19","title":"\u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430: \u041b\u043e\u0433\u0438 \u0437\u0430\u043d\u0438\u043c\u0430\u044e\u0442 \u043c\u043d\u043e\u0433\u043e \u043c\u0435\u0441\u0442\u0430","text":"<p>\u0420\u0435\u0448\u0435\u043d\u0438\u0435: <pre><code># \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u0442\u0435 \u0440\u043e\u0442\u0430\u0446\u0438\u044e \u0438 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\nfrom loguru import logger\n\nlogger.add(\n    \"logs/app.log\",\n    rotation=\"5 MB\",    # \u0420\u043e\u0442\u0430\u0446\u0438\u044f \u043f\u0440\u0438 5 MB (\u0432\u043c\u0435\u0441\u0442\u043e 50 MB)\n    retention=\"2 days\", # \u0425\u0440\u0430\u043d\u0438\u0442\u044c 2 \u0434\u043d\u044f (\u0432\u043c\u0435\u0441\u0442\u043e 7)\n    compression=\"zip\"   # \u0421\u0436\u0430\u0442\u0438\u0435\n)\n</code></pre></p>"},{"location":"agents/qwen-cli-debug-trace/#_20","title":"\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u044b","text":"<ul> <li>\u041f\u0440\u0438\u043c\u0435\u0440 \u043a\u043e\u0434\u0430</li> <li>\u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f</li> <li>QwenCodeCLIAgent \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434</li> <li>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f Loguru</li> </ul>"},{"location":"agents/qwen-code-cli/","title":"Qwen Code CLI Agent","text":"<p>Complete guide to using the Qwen Code CLI agent.</p>"},{"location":"agents/qwen-code-cli/#overview","title":"Overview","text":"<p>The Qwen Code CLI agent is the most powerful option, using the official qwen-code CLI tool for advanced AI processing.</p>"},{"location":"agents/qwen-code-cli/#features","title":"Features","text":"<ul> <li>\u2705 Full integration with Qwen3-Coder models</li> <li>\u2705 Automatic TODO planning</li> <li>\u2705 Built-in tools: web search, git, github, shell</li> <li>\u2705 Free tier: 2000 requests/day</li> <li>\u2705 Vision model support</li> <li>\u2705 DEBUG \u0442\u0440\u0435\u0439\u0441\u0438\u043d\u0433 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f CLI - \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u2192</li> </ul>"},{"location":"agents/qwen-code-cli/#installation","title":"Installation","text":""},{"location":"agents/qwen-code-cli/#1-install-nodejs-20","title":"1. Install Node.js 20+","text":"<pre><code># Ubuntu/Debian\ncurl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -\nsudo apt-get install -y nodejs\n\n# macOS\nbrew install node@20\n\n# Windows\n# Download from nodejs.org\n</code></pre>"},{"location":"agents/qwen-code-cli/#2-install-qwen-code-cli","title":"2. Install Qwen Code CLI","text":"<pre><code>npm install -g @qwen-code/qwen-code@latest\n</code></pre>"},{"location":"agents/qwen-code-cli/#3-verify-installation","title":"3. Verify Installation","text":"<pre><code>qwen --version\n</code></pre>"},{"location":"agents/qwen-code-cli/#4-authenticate","title":"4. Authenticate","text":"<pre><code>qwen\n</code></pre> <p>Follow the prompts to authenticate via qwen.ai.</p>"},{"location":"agents/qwen-code-cli/#5-configure-approval-mode-important","title":"5. Configure Approval Mode (IMPORTANT!)","text":"<p>\u26a0\ufe0f \u041a\u0420\u0418\u0422\u0418\u0427\u0415\u0421\u041a\u0418 \u0412\u0410\u0416\u041d\u041e: \u0414\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b CLI \u0441 \u0431\u043e\u0442\u043e\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0440\u0435\u0436\u0438\u043c \u043e\u0434\u043e\u0431\u0440\u0435\u043d\u0438\u044f \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432:</p> <pre><code>qwen\n/approval-mode yolo --project\n</code></pre> <p>\u0417\u0430\u0447\u0435\u043c \u044d\u0442\u043e \u043d\u0443\u0436\u043d\u043e? - CLI \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u0440\u0443\u0447\u043d\u043e\u0433\u043e \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f - \u0411\u043e\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0432 \u0430\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0438 \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0441 CLI \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e - \u0420\u0435\u0436\u0438\u043c <code>yolo</code> \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043e\u0434\u043e\u0431\u0440\u044f\u0435\u0442 \u0432\u0441\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0430\u0433\u0435\u043d\u0442\u0430</p> <p>\u26a0\ufe0f \u0412\u043d\u0438\u043c\u0430\u043d\u0438\u0435! \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0435\u0436\u0438\u043c\u0430 <code>yolo</code> - \u043d\u0430 \u0432\u0430\u0448 \u0441\u0442\u0440\u0430\u0445 \u0438 \u0440\u0438\u0441\u043a. \u0410\u0433\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442 \u043f\u043e\u043b\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0444\u0430\u0439\u043b\u043e\u0432\u044b\u043c \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u043c \u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u0430\u043c.</p> <p>\u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0440\u0435\u0436\u0438\u043c\u044b \u043e\u0434\u043e\u0431\u0440\u0435\u043d\u0438\u044f: - <code>plan</code> - \u0442\u043e\u043b\u044c\u043a\u043e \u0430\u043d\u0430\u043b\u0438\u0437, \u0431\u0435\u0437 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0444\u0430\u0439\u043b\u043e\u0432 - <code>default</code> - \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0444\u0430\u0439\u043b\u043e\u0432 \u0438 \u043a\u043e\u043c\u0430\u043d\u0434 - <code>auto-edit</code> - \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043e\u0434\u043e\u0431\u0440\u044f\u0435\u0442 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u043e\u0432 - <code>yolo</code> - \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043e\u0434\u043e\u0431\u0440\u044f\u0435\u0442 \u0432\u0441\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 (\u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0431\u043e\u0442\u0430)</p> <p>\u041e\u0431\u043b\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f: - <code>--session</code> - \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0441\u0435\u0441\u0441\u0438\u0438 - <code>--project</code> - \u0434\u043b\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 (\u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f) - <code>--user</code> - \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f</p> <p>\u0420\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f \u043e\u0437\u043d\u0430\u043a\u043e\u043c\u0438\u0442\u044c\u0441\u044f \u0441 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0435\u0439 qwen-code-cli \u0434\u043b\u044f \u043f\u043e\u043b\u043d\u043e\u0433\u043e \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0438 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0439.</p>"},{"location":"agents/qwen-code-cli/#configuration","title":"Configuration","text":"<p>Update <code>config.yaml</code>:</p> <pre><code>AGENT_TYPE: \"qwen_code_cli\"\nAGENT_QWEN_CLI_PATH: \"qwen\"\nAGENT_TIMEOUT: 300\nAGENT_ENABLE_WEB_SEARCH: true\nAGENT_ENABLE_GIT: true\nAGENT_ENABLE_GITHUB: true\nAGENT_ENABLE_SHELL: false\n</code></pre> <p>Tip: The CLI path is configurable via <code>AGENT_QWEN_CLI_PATH</code> and defaults to <code>qwen</code>. Ensure <code>qwen --version</code> succeeds on your system before enabling this agent.</p>"},{"location":"agents/qwen-code-cli/#how-it-works","title":"How It Works","text":"<ol> <li>Message received</li> <li>Agent prepares prompt</li> <li>CLI working directory set to user's knowledge base path</li> <li>Calls <code>qwen</code> CLI in KB directory</li> <li>Qwen creates TODO plan</li> <li>Executes plan with tools (files created in correct KB location)</li> <li>Returns structured markdown</li> <li>Saved to KB</li> </ol> <p>Important: The CLI automatically runs inside your knowledge base directory (<code>knowledge_bases/your-kb-name/</code>). This ensures that any files created by the agent are saved to the correct location in your knowledge base structure.</p>"},{"location":"agents/qwen-code-cli/#troubleshooting","title":"Troubleshooting","text":""},{"location":"agents/qwen-code-cli/#files-created-in-wrong-location","title":"Files Created in Wrong Location","text":"<p>\u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430: CLI \u0441\u043e\u0437\u0434\u0430\u0451\u0442 \u0444\u0430\u0439\u043b\u044b \u0432 \u043a\u043e\u0440\u043d\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430, \u0430 \u043d\u0435 \u0432 <code>knowledge_bases/your-kb-name/</code></p> <p>\u0420\u0435\u0448\u0435\u043d\u0438\u0435: \u042d\u0442\u043e \u0431\u044b\u043b\u043e \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0432\u0435\u0440\u0441\u0438\u0438. \u0411\u043e\u0442 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0440\u0430\u0431\u043e\u0447\u0443\u044e \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044e CLI \u0432 \u043f\u0443\u0442\u044c \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u044b \u0437\u043d\u0430\u043d\u0438\u0439 \u043f\u0435\u0440\u0435\u0434 \u043a\u0430\u0436\u0434\u044b\u043c \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u043c. \u0423\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044c, \u0447\u0442\u043e \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u0443\u044e \u0432\u0435\u0440\u0441\u0438\u044e \u0431\u043e\u0442\u0430.</p> <p>\u041a\u0430\u043a \u044d\u0442\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442: - \u041f\u0440\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0431\u043e\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043f\u0443\u0442\u044c \u043a \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435 \u0437\u043d\u0430\u043d\u0438\u0439 - \u041f\u0435\u0440\u0435\u0434 \u0432\u044b\u0437\u043e\u0432\u043e\u043c <code>qwen</code> CLI \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442\u0441\u044f <code>working_directory</code> \u0432 \u044d\u0442\u043e\u0442 \u043f\u0443\u0442\u044c - \u0412\u0441\u0435 \u0444\u0430\u0439\u043b\u044b, \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0435 \u0430\u0433\u0435\u043d\u0442\u043e\u043c, \u043f\u043e\u043f\u0430\u0434\u0430\u044e\u0442 \u0432 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 KB</p>"},{"location":"agents/qwen-code-cli/#cli-requires-manual-approval","title":"CLI Requires Manual Approval","text":"<p>\u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430: CLI \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f, \u0431\u043e\u0442 \u0437\u0430\u0432\u0438\u0441\u0430\u0435\u0442</p> <p>\u0420\u0435\u0448\u0435\u043d\u0438\u0435: \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u0442\u0435 \u0440\u0435\u0436\u0438\u043c <code>yolo</code> \u043a\u0430\u043a \u043e\u043f\u0438\u0441\u0430\u043d\u043e \u0432 \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438: <pre><code>qwen\n/approval-mode yolo --project\n</code></pre></p> <p>\u041f\u043e\u0447\u0435\u043c\u0443 \u044d\u0442\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e: - CLI \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 - \u0411\u043e\u0442 \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u043e\u0432\u0430\u0442\u044c \u0441 CLI \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 - \u0420\u0435\u0436\u0438\u043c <code>yolo</code> \u043e\u0442\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432\u0441\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f</p>"},{"location":"agents/qwen-code-cli/#authentication-issues","title":"Authentication Issues","text":"<p>\u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430: CLI \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f</p> <p>\u0420\u0435\u0448\u0435\u043d\u0438\u0435: 1. \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 <code>qwen</code> \u0432 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435 2. \u0421\u043b\u0435\u0434\u0443\u0439\u0442\u0435 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u044f\u043c \u0434\u043b\u044f OAuth \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0447\u0435\u0440\u0435\u0437 qwen.ai 3. \u041b\u0438\u0431\u043e \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u0442\u0435 OpenAI-\u0441\u043e\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u044b\u0439 API:    <pre><code>export OPENAI_API_KEY=\"your-key\"\nexport OPENAI_BASE_URL=\"your-url\"\n</code></pre></p>"},{"location":"agents/qwen-code-cli/#cli-not-found","title":"CLI Not Found","text":"<p>\u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430: <code>qwen: command not found</code></p> <p>\u0420\u0435\u0448\u0435\u043d\u0438\u0435: 1. \u041f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0443: <code>npm list -g @qwen-code/qwen-code</code> 2. \u041f\u0435\u0440\u0435\u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435: <code>npm install -g @qwen-code/qwen-code@latest</code> 3. \u041f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435 PATH: <code>echo $PATH</code> 4. \u0415\u0441\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 nvm: \u0443\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044c, \u0447\u0442\u043e Node.js \u0430\u043a\u0442\u0438\u0432\u0438\u0440\u043e\u0432\u0430\u043d</p>"},{"location":"agents/qwen-code-cli/#see-also","title":"See Also","text":"<ul> <li>Agent Overview</li> <li>Autonomous Agent</li> <li>Stub Agent</li> </ul>"},{"location":"agents/stub-agent/","title":"Stub Agent","text":"<p>Simple testing agent for development.</p>"},{"location":"agents/stub-agent/#overview","title":"Overview","text":"<p>Basic agent for testing without AI processing.</p>"},{"location":"agents/stub-agent/#features","title":"Features","text":"<ul> <li>\u2705 Fast - No API calls</li> <li>\u2705 Simple - Basic categorization</li> <li>\u2705 No dependencies</li> </ul>"},{"location":"agents/stub-agent/#configuration","title":"Configuration","text":"<pre><code>AGENT_TYPE: \"stub\"\n</code></pre>"},{"location":"agents/stub-agent/#see-also","title":"See Also","text":"<ul> <li>Agent Overview</li> </ul>"},{"location":"architecture/agent-architecture/","title":"Coming Soon","text":"<p>This documentation page is under construction.</p> <p>For now, please refer to the README or check back later.</p>"},{"location":"architecture/data-flow/","title":"Coming Soon","text":"<p>This documentation page is under construction.</p> <p>For now, please refer to the README or check back later.</p>"},{"location":"architecture/overview/","title":"Coming Soon","text":"<p>This documentation page is under construction.</p> <p>For now, please refer to the README or check back later.</p>"},{"location":"architecture/per-user-storage/","title":"Per-User Storage Architecture","text":""},{"location":"architecture/per-user-storage/#overview","title":"Overview","text":"<p>The system uses a postfix-based approach for per-user storage within knowledge bases. This ensures isolation between users while maintaining a clean configuration.</p>"},{"location":"architecture/per-user-storage/#key-concepts","title":"Key Concepts","text":""},{"location":"architecture/per-user-storage/#postfix-pattern","title":"Postfix Pattern","text":"<p>Instead of hardcoding full paths, settings define postfixes that are appended to each user's knowledge base path:</p> <pre><code># Settings in config/settings.py\nMEM_AGENT_MEMORY_POSTFIX = \"memory\"          # Default postfix for memory\nMCP_SERVERS_POSTFIX = \".mcp_servers\"         # Default postfix for MCP servers\n\n# Constructed paths for user with KB at \"knowledge_bases/user_kb\"\nmemory_path = kb_path / MEM_AGENT_MEMORY_POSTFIX\n# Result: knowledge_bases/user_kb/memory\n\nmcp_servers_dir = kb_path / MCP_SERVERS_POSTFIX\n# Result: knowledge_bases/user_kb/.mcp_servers\n</code></pre>"},{"location":"architecture/per-user-storage/#directory-structure","title":"Directory Structure","text":"<p>Each user's knowledge base contains:</p> <pre><code>knowledge_bases/\n\u2514\u2500\u2500 {user_kb_name}/           # User's KB (from setkb command)\n    \u251c\u2500\u2500 .mcp_servers/          # Per-user MCP server configs\n    \u2502   \u2514\u2500\u2500 mem-agent.json     # Standard MCP format (see mcp-config-format.md)\n    \u251c\u2500\u2500 memory/                # Per-user memory\n    \u2502   \u251c\u2500\u2500 user.md\n    \u2502   \u2514\u2500\u2500 entities/\n    \u2514\u2500\u2500 topics/                # User's notes\n</code></pre> <p>Note: The <code>mem-agent.json</code> file follows the standard MCP server configuration format. See MCP Configuration Format for details.</p>"},{"location":"architecture/per-user-storage/#usage-in-code","title":"Usage in Code","text":""},{"location":"architecture/per-user-storage/#getting-user-specific-paths","title":"Getting User-Specific Paths","text":"<pre><code>from config.settings import settings\nfrom pathlib import Path\n\n# Get user's KB path (from settings manager or user config)\nuser_id = 12345\nkb_path = settings_manager.get_setting(user_id, \"KB_PATH\")\n\n# Construct full paths\nmemory_path = settings.get_mem_agent_memory_path(kb_path)\nmcp_servers_dir = settings.get_mcp_servers_dir(kb_path)\n\nprint(f\"Memory: {memory_path}\")\n# Output: knowledge_bases/user_kb/memory\n\nprint(f\"MCP servers: {mcp_servers_dir}\")\n# Output: knowledge_bases/user_kb/.mcp_servers\n</code></pre>"},{"location":"architecture/per-user-storage/#creating-mcp-manager-for-user","title":"Creating MCP Manager for User","text":"<pre><code>from src.mcp_registry import MCPServersManager\nfrom config.settings import settings\n\n# Get user's KB path\nkb_path = get_user_kb_path(user_id)  # Your function to get user's KB\n\n# Create per-user MCP manager\nmcp_servers_dir = settings.get_mcp_servers_dir(kb_path)\nmanager = MCPServersManager(servers_dir=mcp_servers_dir)\n\n# Now manager works with user's MCP servers\nmanager.initialize()\nenabled_servers = manager.get_enabled_servers()\n</code></pre>"},{"location":"architecture/per-user-storage/#ensuring-directories-exist","title":"Ensuring Directories Exist","text":"<pre><code>from config.settings import settings\n\n# Ensure user's memory directory exists\nsettings.ensure_mem_agent_memory_path_exists(kb_path)\n\n# Ensure user's MCP servers directory exists\nsettings.ensure_mcp_servers_dir_exists(kb_path)\n</code></pre>"},{"location":"architecture/per-user-storage/#helper-methods-in-settings","title":"Helper Methods in Settings","text":"<p>The <code>Settings</code> class provides helper methods for working with per-user paths:</p>"},{"location":"architecture/per-user-storage/#get_mcp_servers_dirkb_path-path-path","title":"<code>get_mcp_servers_dir(kb_path: Path) -&gt; Path</code>","text":"<p>Constructs full MCP servers directory path for a KB.</p> <pre><code>kb_path = Path(\"./knowledge_bases/user_kb\")\nmcp_dir = settings.get_mcp_servers_dir(kb_path)\n# Returns: Path(\"./knowledge_bases/user_kb/.mcp_servers\")\n</code></pre>"},{"location":"architecture/per-user-storage/#get_mem_agent_memory_pathkb_path-path-path","title":"<code>get_mem_agent_memory_path(kb_path: Path) -&gt; Path</code>","text":"<p>Constructs full memory path for a KB.</p> <pre><code>kb_path = Path(\"./knowledge_bases/user_kb\")\nmemory_path = settings.get_mem_agent_memory_path(kb_path)\n# Returns: Path(\"./knowledge_bases/user_kb/memory\")\n</code></pre>"},{"location":"architecture/per-user-storage/#ensure_mem_agent_memory_path_existskb_path-path-none","title":"<code>ensure_mem_agent_memory_path_exists(kb_path: Path) -&gt; None</code>","text":"<p>Creates memory directory if it doesn't exist.</p> <pre><code>kb_path = Path(\"./knowledge_bases/user_kb\")\nsettings.ensure_mem_agent_memory_path_exists(kb_path)\n# Creates: knowledge_bases/user_kb/memory/\n</code></pre>"},{"location":"architecture/per-user-storage/#ensure_mcp_servers_dir_existskb_path-path-none","title":"<code>ensure_mcp_servers_dir_exists(kb_path: Path) -&gt; None</code>","text":"<p>Creates MCP servers directory if it doesn't exist.</p> <pre><code>kb_path = Path(\"./knowledge_bases/user_kb\")\nsettings.ensure_mcp_servers_dir_exists(kb_path)\n# Creates: knowledge_bases/user_kb/.mcp_servers/\n</code></pre>"},{"location":"architecture/per-user-storage/#integration-with-user-settings","title":"Integration with User Settings","text":"<p>When working with user-specific settings, get the KB path first:</p> <pre><code>from src.bot.settings_manager import SettingsManager\nfrom config.settings import settings\n\n# Initialize settings manager\nsettings_manager = SettingsManager(settings)\n\n# Get user's KB path\nuser_id = 12345\nkb_path_str = settings_manager.get_setting(user_id, \"KB_PATH\")\nkb_path = Path(kb_path_str)\n\n# Now construct per-user paths\nmemory_path = settings.get_mem_agent_memory_path(kb_path)\nmcp_servers_dir = settings.get_mcp_servers_dir(kb_path)\n</code></pre>"},{"location":"architecture/per-user-storage/#configuration","title":"Configuration","text":""},{"location":"architecture/per-user-storage/#global-settings-configyaml","title":"Global Settings (config.yaml)","text":"<pre><code># Postfixes for per-user directories\nMEM_AGENT_MEMORY_POSTFIX: memory\nMCP_SERVERS_POSTFIX: .mcp_servers\n\n# Global KB path (can be overridden per-user)\nKB_PATH: ./knowledge_bases/default\n</code></pre>"},{"location":"architecture/per-user-storage/#per-user-overrides","title":"Per-User Overrides","text":"<p>Users can override their KB path via <code>/setkb</code> command:</p> <pre><code>/setkb my-notes\n# Sets KB_PATH to knowledge_bases/my-notes for this user\n# Memory will be at: knowledge_bases/my-notes/memory\n# MCP servers will be at: knowledge_bases/my-notes/.mcp_servers\n</code></pre>"},{"location":"architecture/per-user-storage/#benefits","title":"Benefits","text":"<ol> <li>User Isolation: Each user has separate memory and MCP configurations</li> <li>Clean Configuration: Postfixes are simple and don't require full paths</li> <li>Flexibility: Easy to change structure by modifying postfixes</li> <li>Consistency: All per-user data follows same pattern</li> <li>KB Integration: Everything within knowledge base structure</li> </ol>"},{"location":"architecture/per-user-storage/#migration-from-old-structure","title":"Migration from Old Structure","text":"<p>Old approach (hardcoded paths): <pre><code>MCP_SERVERS_DIR = Path(\"./data/mcp_servers\")  # Global\nMEM_AGENT_MEMORY_PATH = Path(\"./data/memory\")  # Global\n</code></pre></p> <p>New approach (postfixes): <pre><code>MCP_SERVERS_POSTFIX = \".mcp_servers\"  # Per-user: kb_path/.mcp_servers\nMEM_AGENT_MEMORY_POSTFIX = \"memory\"   # Per-user: kb_path/memory\n</code></pre></p>"},{"location":"architecture/per-user-storage/#see-also","title":"See Also","text":"<ul> <li>Settings Architecture - Overall settings design</li> <li>Memory Agent Setup - Using memory agent</li> <li>MCP Configuration Format - Standard MCP config format</li> <li>MCP Server Registry - Managing MCP servers</li> </ul>"},{"location":"architecture/settings-architecture/","title":"Coming Soon","text":"<p>This documentation page is under construction.</p> <p>For now, please refer to the README or check back later.</p>"},{"location":"deployment/cicd/","title":"CI/CD Pipeline","text":"<p>This document describes the continuous integration and deployment pipelines for the tg-note project.</p>"},{"location":"deployment/cicd/#github-actions-workflows","title":"GitHub Actions Workflows","text":""},{"location":"deployment/cicd/#publish-to-pypi","title":"Publish to PyPI","text":"<p>The project uses GitHub Actions to automatically publish releases to PyPI using Trusted Publishing (OIDC authentication).</p> <p>Workflow file: <code>.github/workflows/publish-to-pypi.yml</code></p> <p>Triggers: - When a new release is published on GitHub - Manual workflow dispatch</p> <p>What it does: 1. Checks out the repository 2. Sets up Python 3.11 3. Installs Poetry and project dependencies 4. Builds the distribution packages 5. Publishes to PyPI using trusted publishing (no API tokens required)</p> <p>Environment: <code>pypi</code></p> <p>For detailed setup instructions, see PyPI Trusted Publisher Setup.</p>"},{"location":"deployment/cicd/#setting-up-cicd","title":"Setting Up CI/CD","text":""},{"location":"deployment/cicd/#pypi-publishing","title":"PyPI Publishing","text":"<p>To enable automatic publishing to PyPI:</p> <ol> <li>Configure a trusted publisher on PyPI (see setup guide)</li> <li>Create a <code>pypi</code> environment in GitHub repository settings</li> <li>(Optional) Add protection rules to the environment</li> </ol>"},{"location":"deployment/cicd/#creating-a-release","title":"Creating a Release","text":"<p>To trigger a new PyPI release:</p> <ol> <li>Via GitHub UI:</li> <li>Go to Releases \u2192 Draft a new release</li> <li>Create a new tag (e.g., <code>v0.1.0</code>)</li> <li> <p>Publish the release</p> </li> <li> <p>Via Git CLI:    <pre><code>git tag v0.1.0\ngit push origin v0.1.0\n</code></pre></p> </li> <li> <p>Via GitHub CLI:    <pre><code>gh release create v0.1.0 --title \"Release v0.1.0\" --notes \"Release notes here\"\n</code></pre></p> </li> </ol> <p>The workflow will automatically build and publish the package to PyPI.</p>"},{"location":"deployment/cicd/#future-improvements","title":"Future Improvements","text":"<p>Potential additions to the CI/CD pipeline:</p> <ul> <li>Automated testing on pull requests</li> <li>Code quality checks (linting, type checking)</li> <li>Documentation deployment</li> <li>Docker image building and publishing</li> <li>Automated changelog generation</li> </ul>"},{"location":"deployment/docker/","title":"Coming Soon","text":"<p>This documentation page is under construction.</p> <p>For now, please refer to the README or check back later.</p>"},{"location":"deployment/overview/","title":"Coming Soon","text":"<p>This documentation page is under construction.</p> <p>For now, please refer to the README or check back later.</p>"},{"location":"deployment/production/","title":"Coming Soon","text":"<p>This documentation page is under construction.</p> <p>For now, please refer to the README or check back later.</p>"},{"location":"deployment/pypi-trusted-publisher-setup/","title":"PyPI Trusted Publisher Setup","text":"<p>This guide explains how to configure PyPI Trusted Publishing for the <code>tg-note</code> package.</p>"},{"location":"deployment/pypi-trusted-publisher-setup/#what-is-trusted-publishing","title":"What is Trusted Publishing?","text":"<p>Trusted Publishing is a secure authentication method that allows GitHub Actions to publish packages to PyPI without using API tokens. It uses OpenID Connect (OIDC) to verify the identity of the publisher.</p>"},{"location":"deployment/pypi-trusted-publisher-setup/#prerequisites","title":"Prerequisites","text":"<ol> <li>A PyPI account with permissions to manage the <code>tg-note</code> package</li> <li>The package must either already exist on PyPI or you need permission to register it</li> </ol>"},{"location":"deployment/pypi-trusted-publisher-setup/#configuration-steps","title":"Configuration Steps","text":""},{"location":"deployment/pypi-trusted-publisher-setup/#step-1-access-pypi-trusted-publisher-settings","title":"Step 1: Access PyPI Trusted Publisher Settings","text":"<ol> <li>Go to PyPI and log in</li> <li>Navigate to your account settings</li> <li>Go to \"Publishing\" section</li> </ol>"},{"location":"deployment/pypi-trusted-publisher-setup/#step-2-add-a-new-trusted-publisher","title":"Step 2: Add a New Trusted Publisher","text":"<p>Choose one of these options:</p>"},{"location":"deployment/pypi-trusted-publisher-setup/#option-a-for-an-existing-package","title":"Option A: For an Existing Package","text":"<ol> <li>Go to your package page: https://pypi.org/manage/project/tg-note/settings/</li> <li>Scroll to \"Publishing\" section</li> <li>Click \"Add a new publisher\"</li> </ol>"},{"location":"deployment/pypi-trusted-publisher-setup/#option-b-for-a-new-package-pending-publisher","title":"Option B: For a New Package (Pending Publisher)","text":"<ol> <li>Go to: https://pypi.org/manage/account/publishing/</li> <li>Click \"Add a pending publisher\"</li> <li>This allows you to configure the trusted publisher before the first release</li> </ol>"},{"location":"deployment/pypi-trusted-publisher-setup/#step-3-configure-the-publisher","title":"Step 3: Configure the Publisher","text":"<p>Fill in the following details exactly as shown:</p> Field Value PyPI Project Name <code>tg-note</code> Owner <code>ArtyomZemlyak</code> Repository name <code>tg-note</code> Workflow name <code>publish-to-pypi.yml</code> Environment name <code>pypi</code>"},{"location":"deployment/pypi-trusted-publisher-setup/#step-4-verify-configuration","title":"Step 4: Verify Configuration","text":"<p>After adding the publisher, verify the configuration matches these claims:</p> <pre><code>repository: ArtyomZemlyak/tg-note\nworkflow_ref: ArtyomZemlyak/tg-note/.github/workflows/publish-to-pypi.yml@refs/tags/v*\nenvironment: pypi\n</code></pre>"},{"location":"deployment/pypi-trusted-publisher-setup/#step-5-create-github-environment","title":"Step 5: Create GitHub Environment","text":"<ol> <li>Go to your GitHub repository: https://github.com/ArtyomZemlyak/tg-note</li> <li>Navigate to Settings \u2192 Environments</li> <li>Click \"New environment\"</li> <li>Name it <code>pypi</code></li> <li>(Optional) Add protection rules:</li> <li>Require reviewers before deployment</li> <li>Restrict to specific branches (e.g., only tags matching <code>v*</code>)</li> </ol>"},{"location":"deployment/pypi-trusted-publisher-setup/#testing-the-configuration","title":"Testing the Configuration","text":""},{"location":"deployment/pypi-trusted-publisher-setup/#create-a-test-release","title":"Create a Test Release","text":"<pre><code># Create and push a new tag\ngit tag v0.0.2\ngit push origin v0.0.2\n</code></pre> <p>Or create a release through the GitHub UI: 1. Go to Releases 2. Click \"Draft a new release\" 3. Create a new tag (e.g., <code>v0.0.2</code>) 4. Publish the release</p> <p>The workflow will automatically trigger and publish to PyPI using trusted publishing.</p>"},{"location":"deployment/pypi-trusted-publisher-setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment/pypi-trusted-publisher-setup/#error-invalid-publisher-valid-token-but-no-corresponding-publisher","title":"Error: \"invalid-publisher: valid token, but no corresponding publisher\"","text":"<p>This means the configuration on PyPI doesn't match the claims being sent. Verify:</p> <ol> <li>Package name matches exactly: <code>tg-note</code></li> <li>Repository is correct: <code>ArtyomZemlyak/tg-note</code></li> <li>Workflow file path is exact: <code>publish-to-pypi.yml</code> (not <code>.github/workflows/publish-to-pypi.yml</code>)</li> <li>Environment name matches: <code>pypi</code></li> <li>The trusted publisher is active (not expired or disabled)</li> </ol>"},{"location":"deployment/pypi-trusted-publisher-setup/#error-environment-not-found","title":"Error: \"environment-not-found\"","text":"<p>Create the <code>pypi</code> environment in your GitHub repository settings.</p>"},{"location":"deployment/pypi-trusted-publisher-setup/#error-workflow-not-found","title":"Error: \"workflow-not-found\"","text":"<p>Ensure the workflow file exists at <code>.github/workflows/publish-to-pypi.yml</code> in your repository.</p>"},{"location":"deployment/pypi-trusted-publisher-setup/#security-best-practices","title":"Security Best Practices","text":"<ol> <li>Use environments: Always specify an environment for publishing workflows</li> <li>Add protection rules: Require reviews for deployments to the <code>pypi</code> environment</li> <li>Limit workflow permissions: The workflow only requests <code>id-token: write</code> permission</li> <li>Monitor releases: Regularly check your PyPI package for unexpected uploads</li> </ol>"},{"location":"deployment/pypi-trusted-publisher-setup/#manual-workflow-trigger","title":"Manual Workflow Trigger","text":"<p>You can also manually trigger the workflow:</p> <pre><code># Through GitHub CLI\ngh workflow run publish-to-pypi.yml\n\n# Or through the GitHub UI\n# Go to Actions \u2192 Publish to PyPI \u2192 Run workflow\n</code></pre>"},{"location":"deployment/pypi-trusted-publisher-setup/#references","title":"References","text":"<ul> <li>PyPI Trusted Publishers Documentation</li> <li>PyPI Trusted Publishers Troubleshooting</li> <li>GitHub Actions OIDC Documentation</li> </ul>"},{"location":"development/code-quality/","title":"Coming Soon","text":"<p>This documentation page is under construction.</p> <p>For now, please refer to the README or check back later.</p>"},{"location":"development/contributing/","title":"Coming Soon","text":"<p>This documentation page is under construction.</p> <p>For now, please refer to the README or check back later.</p>"},{"location":"development/overview/","title":"Coming Soon","text":"<p>This documentation page is under construction.</p> <p>For now, please refer to the README or check back later.</p>"},{"location":"development/project-structure/","title":"Coming Soon","text":"<p>This documentation page is under construction.</p> <p>For now, please refer to the README or check back later.</p>"},{"location":"development/testing/","title":"Coming Soon","text":"<p>This documentation page is under construction.</p> <p>For now, please refer to the README or check back later.</p>"},{"location":"getting-started/configuration/","title":"Configuration Guide","text":"<p>Complete guide to configuring tg-note.</p>"},{"location":"getting-started/configuration/#configuration-sources","title":"Configuration Sources","text":"<p>tg-note supports multiple configuration sources with the following priority (highest to lowest):</p> <ol> <li>Environment Variables - Highest priority</li> <li><code>.env</code> file - For credentials and overrides</li> <li><code>config.yaml</code> - Base configuration</li> <li>Default values - Built-in defaults</li> </ol> <p>Best Practice</p> <ul> <li>Store sensitive data (tokens, API keys) in <code>.env</code></li> <li>Store general settings in <code>config.yaml</code></li> <li>Use environment variables for deployment overrides</li> </ul>"},{"location":"getting-started/configuration/#configuration-files","title":"Configuration Files","text":""},{"location":"getting-started/configuration/#configyaml","title":"config.yaml","text":"<p>Main configuration file for non-sensitive settings.</p> <pre><code># Knowledge Base Settings\nKB_PATH: ./knowledge_base\nKB_GIT_ENABLED: true\nKB_GIT_AUTO_PUSH: true\nKB_GIT_REMOTE: origin\nKB_GIT_BRANCH: main\n\n# Agent Configuration\nAGENT_TYPE: \"qwen_code_cli\"  # stub, autonomous, qwen_code_cli\nAGENT_MODEL: \"qwen-max\"\nAGENT_TIMEOUT: 300\nAGENT_ENABLE_WEB_SEARCH: true\nAGENT_ENABLE_GIT: true\nAGENT_ENABLE_GITHUB: true\nAGENT_ENABLE_SHELL: false\n\n# Processing Settings\nMESSAGE_GROUP_TIMEOUT: 30\nPROCESSED_LOG_PATH: ./data/processed.json\n\n# Logging Settings\nLOG_LEVEL: INFO  # DEBUG, INFO, WARNING, ERROR, CRITICAL\nLOG_FILE: ./logs/bot.log\n\n# Security\nALLOWED_USER_IDS: \"\"  # Comma-separated, empty = all allowed\n</code></pre>"},{"location":"getting-started/configuration/#env-file","title":".env File","text":"<p>Credentials and sensitive data (never commit to git!).</p> <pre><code># Required\nTELEGRAM_BOT_TOKEN=your_bot_token_here\n\n# Optional API Keys\nOPENAI_API_KEY=sk-...\nOPENAI_BASE_URL=https://api.openai.com/v1  # Optional, for custom endpoints\nANTHROPIC_API_KEY=sk-ant-...\nQWEN_API_KEY=your_qwen_key\n\n# GitHub Integration\nGITHUB_TOKEN=ghp_...\n</code></pre>"},{"location":"getting-started/configuration/#configuration-options","title":"Configuration Options","text":""},{"location":"getting-started/configuration/#knowledge-base-settings","title":"Knowledge Base Settings","text":""},{"location":"getting-started/configuration/#kb_path","title":"KB_PATH","text":"<ul> <li>Type: Path</li> <li>Default: <code>./knowledge_base</code></li> <li>Description: Path to your knowledge base directory</li> <li>Example: <code>/path/to/my-kb</code></li> </ul>"},{"location":"getting-started/configuration/#kb_git_enabled","title":"KB_GIT_ENABLED","text":"<ul> <li>Type: Boolean</li> <li>Default: <code>true</code></li> <li>Description: Enable Git operations</li> <li>Example: <code>true</code> or <code>false</code></li> </ul>"},{"location":"getting-started/configuration/#kb_git_auto_push","title":"KB_GIT_AUTO_PUSH","text":"<ul> <li>Type: Boolean</li> <li>Default: <code>true</code></li> <li>Description: Automatically push changes to remote</li> <li>Example: <code>true</code> or <code>false</code></li> </ul>"},{"location":"getting-started/configuration/#kb_git_remote","title":"KB_GIT_REMOTE","text":"<ul> <li>Type: String</li> <li>Default: <code>origin</code></li> <li>Description: Git remote name</li> <li>Example: <code>origin</code></li> </ul>"},{"location":"getting-started/configuration/#kb_git_branch","title":"KB_GIT_BRANCH","text":"<ul> <li>Type: String</li> <li>Default: <code>main</code></li> <li>Description: Git branch to use</li> <li>Example: <code>main</code> or <code>master</code></li> </ul>"},{"location":"getting-started/configuration/#agent-settings","title":"Agent Settings","text":""},{"location":"getting-started/configuration/#agent_type","title":"AGENT_TYPE","text":"<ul> <li>Type: String</li> <li>Default: <code>stub</code></li> <li>Options: <code>stub</code>, <code>autonomous</code>, <code>qwen_code_cli</code></li> <li>Description: Agent implementation to use</li> <li>Recommendation: Use <code>qwen_code_cli</code> for production, or <code>autonomous</code> for OpenAI-compatible APIs</li> </ul>"},{"location":"getting-started/configuration/#agent_model","title":"AGENT_MODEL","text":"<ul> <li>Type: String</li> <li>Default: <code>qwen-max</code></li> <li>Description: AI model to use</li> <li>Examples: <code>qwen-max</code>, <code>qwen-turbo</code>, <code>gpt-4</code></li> </ul>"},{"location":"getting-started/configuration/#agent_qwen_cli_path","title":"AGENT_QWEN_CLI_PATH","text":"<ul> <li>Type: String</li> <li>Default: <code>qwen</code></li> <li>Description: Path to qwen CLI executable</li> <li>Examples: <code>qwen</code>, <code>/usr/local/bin/qwen</code>, <code>./bin/qwen</code></li> </ul>"},{"location":"getting-started/configuration/#agent_instruction","title":"AGENT_INSTRUCTION","text":"<ul> <li>Type: String (Optional)</li> <li>Default: <code>None</code></li> <li>Description: Custom instruction for the agent</li> <li>Example: <code>\"Always be concise and use bullet points\"</code></li> </ul>"},{"location":"getting-started/configuration/#agent_timeout","title":"AGENT_TIMEOUT","text":"<ul> <li>Type: Integer (seconds)</li> <li>Default: <code>300</code></li> <li>Description: Maximum time for agent processing</li> <li>Example: <code>600</code> (10 minutes)</li> </ul>"},{"location":"getting-started/configuration/#agent_enable_web_search","title":"AGENT_ENABLE_WEB_SEARCH","text":"<ul> <li>Type: Boolean</li> <li>Default: <code>true</code></li> <li>Description: Allow web search capability</li> <li>Example: <code>true</code> or <code>false</code></li> </ul>"},{"location":"getting-started/configuration/#agent_enable_git","title":"AGENT_ENABLE_GIT","text":"<ul> <li>Type: Boolean</li> <li>Default: <code>true</code></li> <li>Description: Allow Git operations</li> <li>Example: <code>true</code> or <code>false</code></li> </ul>"},{"location":"getting-started/configuration/#agent_enable_github","title":"AGENT_ENABLE_GITHUB","text":"<ul> <li>Type: Boolean</li> <li>Default: <code>true</code></li> <li>Description: Allow GitHub API access</li> <li>Example: <code>true</code> or <code>false</code></li> </ul>"},{"location":"getting-started/configuration/#agent_enable_shell","title":"AGENT_ENABLE_SHELL","text":"<ul> <li>Type: Boolean</li> <li>Default: <code>false</code></li> <li>Description: Allow shell command execution</li> <li>Warning: \u26a0\ufe0f Security risk, use with caution</li> <li>Example: <code>false</code></li> </ul>"},{"location":"getting-started/configuration/#agent_enable_file_management","title":"AGENT_ENABLE_FILE_MANAGEMENT","text":"<ul> <li>Type: Boolean</li> <li>Default: <code>true</code></li> <li>Description: Enable file operations (create, edit, delete, move files)</li> <li>Example: <code>true</code> or <code>false</code></li> </ul>"},{"location":"getting-started/configuration/#agent_enable_folder_management","title":"AGENT_ENABLE_FOLDER_MANAGEMENT","text":"<ul> <li>Type: Boolean</li> <li>Default: <code>true</code></li> <li>Description: Enable folder operations (create, delete, move folders)</li> <li>Example: <code>true</code> or <code>false</code></li> </ul>"},{"location":"getting-started/configuration/#processing-settings","title":"Processing Settings","text":""},{"location":"getting-started/configuration/#message_group_timeout","title":"MESSAGE_GROUP_TIMEOUT","text":"<ul> <li>Type: Integer (seconds)</li> <li>Default: <code>30</code></li> <li>Description: Wait time before processing grouped messages</li> <li>Example: <code>60</code> (1 minute)</li> </ul>"},{"location":"getting-started/configuration/#processed_log_path","title":"PROCESSED_LOG_PATH","text":"<ul> <li>Type: Path</li> <li>Default: <code>./data/processed.json</code></li> <li>Description: Path to processing tracker database</li> <li>Example: <code>./data/tracker.json</code></li> </ul>"},{"location":"getting-started/configuration/#logging-settings","title":"Logging Settings","text":""},{"location":"getting-started/configuration/#log_level","title":"LOG_LEVEL","text":"<ul> <li>Type: String</li> <li>Default: <code>INFO</code></li> <li>Options: <code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code>, <code>CRITICAL</code></li> <li>Description: Logging verbosity level</li> <li>Example: <code>DEBUG</code> for development</li> </ul>"},{"location":"getting-started/configuration/#log_file","title":"LOG_FILE","text":"<ul> <li>Type: Path</li> <li>Default: <code>./logs/bot.log</code></li> <li>Description: Path to log file</li> <li>Example: <code>./logs/tg-note.log</code></li> </ul>"},{"location":"getting-started/configuration/#security-settings","title":"Security Settings","text":""},{"location":"getting-started/configuration/#telegram_bot_token","title":"TELEGRAM_BOT_TOKEN","text":"<ul> <li>Type: String (Secret)</li> <li>Required: Yes</li> <li>Source: <code>.env</code> or environment variable only</li> <li>Description: Telegram bot authentication token</li> <li>Example: <code>1234567890:ABCdefGHIjklMNOpqrsTUVwxyz</code></li> </ul>"},{"location":"getting-started/configuration/#allowed_user_ids","title":"ALLOWED_USER_IDS","text":"<ul> <li>Type: String (comma-separated)</li> <li>Default: <code>\"\"</code> (all users allowed)</li> <li>Description: Whitelist of allowed Telegram user IDs</li> <li>Example: <code>12345678,87654321</code></li> </ul>"},{"location":"getting-started/configuration/#openai_api_key","title":"OPENAI_API_KEY","text":"<ul> <li>Type: String (Secret)</li> <li>Required: No</li> <li>Source: <code>.env</code> or environment variable only</li> <li>Description: OpenAI API key for autonomous agent</li> <li>Example: <code>sk-...</code></li> </ul>"},{"location":"getting-started/configuration/#openai_base_url","title":"OPENAI_BASE_URL","text":"<ul> <li>Type: String (Secret)</li> <li>Required: No</li> <li>Source: <code>.env</code> or environment variable only</li> <li>Description: OpenAI API base URL for custom endpoints</li> <li>Example: <code>https://api.openai.com/v1</code></li> </ul>"},{"location":"getting-started/configuration/#qwen_api_key","title":"QWEN_API_KEY","text":"<ul> <li>Type: String (Secret)</li> <li>Required: No</li> <li>Source: <code>.env</code> or environment variable only</li> <li>Description: Qwen API key (for custom integrations)</li> <li>Example: <code>your_qwen_key</code></li> </ul>"},{"location":"getting-started/configuration/#anthropic_api_key","title":"ANTHROPIC_API_KEY","text":"<ul> <li>Type: String (Secret)</li> <li>Required: No</li> <li>Source: <code>.env</code> or environment variable only</li> <li>Description: Anthropic API key (future use)</li> <li>Example: <code>sk-ant-...</code></li> </ul>"},{"location":"getting-started/configuration/#github_token","title":"GITHUB_TOKEN","text":"<ul> <li>Type: String (Secret)</li> <li>Required: No</li> <li>Source: <code>.env</code> or environment variable only</li> <li>Description: GitHub personal access token for API operations</li> <li>Example: <code>ghp_...</code></li> </ul>"},{"location":"getting-started/configuration/#configuration-examples","title":"Configuration Examples","text":""},{"location":"getting-started/configuration/#development-setup","title":"Development Setup","text":"config.yaml<pre><code># Development configuration\nKB_PATH: ./dev-kb\nKB_GIT_ENABLED: true\nKB_GIT_AUTO_PUSH: false  # Manual push for dev\n\nAGENT_TYPE: \"stub\"  # Fast testing\nAGENT_TIMEOUT: 60\n\nMESSAGE_GROUP_TIMEOUT: 10  # Quick testing\n\nLOG_LEVEL: DEBUG\nLOG_FILE: ./logs/dev.log\n\nALLOWED_USER_IDS: \"your_user_id\"  # Only you\n</code></pre>"},{"location":"getting-started/configuration/#production-setup","title":"Production Setup","text":"config.yaml<pre><code># Production configuration\nKB_PATH: /var/kb/production\nKB_GIT_ENABLED: true\nKB_GIT_AUTO_PUSH: true\nKB_GIT_REMOTE: origin\nKB_GIT_BRANCH: main\n\nAGENT_TYPE: \"qwen_code_cli\"\nAGENT_MODEL: \"qwen-max\"\nAGENT_TIMEOUT: 300\nAGENT_ENABLE_WEB_SEARCH: true\nAGENT_ENABLE_GIT: true\nAGENT_ENABLE_GITHUB: true\nAGENT_ENABLE_SHELL: false\nAGENT_ENABLE_FILE_MANAGEMENT: true\nAGENT_ENABLE_FOLDER_MANAGEMENT: true\n\nMESSAGE_GROUP_TIMEOUT: 30\nPROCESSED_LOG_PATH: /var/data/processed.json\n\nLOG_LEVEL: INFO\nLOG_FILE: /var/log/tg-note/bot.log\n\nALLOWED_USER_IDS: \"\"  # Allow all authenticated users\n</code></pre>"},{"location":"getting-started/configuration/#testing-setup","title":"Testing Setup","text":"config.yaml<pre><code># Testing configuration\nKB_PATH: ./test-kb\nKB_GIT_ENABLED: false  # No git for tests\n\nAGENT_TYPE: \"stub\"\nAGENT_TIMEOUT: 30\n\nMESSAGE_GROUP_TIMEOUT: 5\n\nLOG_LEVEL: WARNING  # Reduce noise\nLOG_FILE: ./logs/test.log\n\nALLOWED_USER_IDS: \"123\"  # Test user only\n</code></pre>"},{"location":"getting-started/configuration/#environment-specific-configuration","title":"Environment-Specific Configuration","text":""},{"location":"getting-started/configuration/#using-environment-variables","title":"Using Environment Variables","text":"<p>Override any setting using environment variables:</p> <pre><code>export MESSAGE_GROUP_TIMEOUT=120\nexport LOG_LEVEL=DEBUG\nexport AGENT_TYPE=qwen_code_cli\n\npython main.py\n</code></pre>"},{"location":"getting-started/configuration/#docker-environment","title":"Docker Environment","text":"<pre><code>ENV TELEGRAM_BOT_TOKEN=your_token\nENV KB_PATH=/app/kb\nENV LOG_LEVEL=INFO\nENV AGENT_TYPE=qwen_code_cli\n</code></pre>"},{"location":"getting-started/configuration/#configuration-validation","title":"Configuration Validation","text":""},{"location":"getting-started/configuration/#check-current-configuration","title":"Check Current Configuration","text":"<pre><code>poetry run python -c \"from config import settings; print(settings)\"\n</code></pre>"},{"location":"getting-started/configuration/#validate-configuration","title":"Validate Configuration","text":"<pre><code>from config import settings\n\nerrors = settings.validate()\nif errors:\n    print(f\"Configuration errors: {errors}\")\nelse:\n    print(\"Configuration is valid!\")\n</code></pre>"},{"location":"getting-started/configuration/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/configuration/#setting-not-applied","title":"Setting Not Applied","text":"<p>Check the priority order:</p> <ol> <li>Environment variable set? \u2192 Takes precedence</li> <li>Value in <code>.env</code>? \u2192 Overrides <code>config.yaml</code></li> <li>Value in <code>config.yaml</code>? \u2192 Uses this</li> <li>Falls back to default</li> </ol> <pre><code># Check environment variable\necho $MESSAGE_GROUP_TIMEOUT\n\n# Check .env file\ncat .env | grep MESSAGE_GROUP_TIMEOUT\n\n# Check config.yaml\ncat config.yaml | grep MESSAGE_GROUP_TIMEOUT\n</code></pre>"},{"location":"getting-started/configuration/#yaml-syntax-error","title":"YAML Syntax Error","text":"<p>Validate YAML syntax:</p> <pre><code>python -c \"import yaml; yaml.safe_load(open('config.yaml'))\"\n</code></pre>"},{"location":"getting-started/configuration/#permission-issues","title":"Permission Issues","text":"<p>Check file permissions:</p> <pre><code>ls -la config.yaml .env\nchmod 600 .env  # Secure credentials\nchmod 644 config.yaml\n</code></pre>"},{"location":"getting-started/configuration/#see-also","title":"See Also","text":"<ul> <li>Installation Guide</li> <li>Settings Management</li> <li>Agent Configuration</li> </ul>"},{"location":"getting-started/first-steps/","title":"First Steps","text":"<p>Your first steps with tg-note after installation.</p>"},{"location":"getting-started/first-steps/#1-get-your-telegram-bot-token","title":"1. Get Your Telegram Bot Token","text":""},{"location":"getting-started/first-steps/#create-a-bot-with-botfather","title":"Create a Bot with BotFather","text":"<ol> <li>Open Telegram and search for @BotFather</li> <li>Start a chat and send <code>/newbot</code></li> <li>Follow the prompts:</li> <li>Choose a name for your bot (e.g., \"My Knowledge Bot\")</li> <li>Choose a username (must end in \"bot\", e.g., \"my_knowledge_bot\")</li> <li>BotFather will give you a token - save it securely!</li> </ol> <p>Example token format: <pre><code>1234567890:ABCdefGHIjklMNOpqrsTUVwxyz12345678\n</code></pre></p>"},{"location":"getting-started/first-steps/#add-token-to-configuration","title":"Add Token to Configuration","text":"<p>Add your token to <code>.env</code>:</p> <pre><code>TELEGRAM_BOT_TOKEN=1234567890:ABCdefGHIjklMNOpqrsTUVwxyz12345678\n</code></pre>"},{"location":"getting-started/first-steps/#2-get-your-user-id-optional","title":"2. Get Your User ID (Optional)","text":"<p>If you want to restrict bot access to only yourself:</p> <ol> <li>Open Telegram and search for @userinfobot</li> <li>Start a chat and send any message</li> <li>Bot will reply with your user info</li> <li>Copy your User ID</li> </ol> <p>Add to <code>config.yaml</code>:</p> <pre><code>ALLOWED_USER_IDS: \"123456789\"  # Your user ID\n</code></pre>"},{"location":"getting-started/first-steps/#3-setup-knowledge-base","title":"3. Setup Knowledge Base","text":""},{"location":"getting-started/first-steps/#option-a-local-knowledge-base","title":"Option A: Local Knowledge Base","text":"<p>Create a new local Git repository:</p> <pre><code>mkdir my-knowledge-base\ncd my-knowledge-base\ngit init\ngit add .\ngit commit -m \"Initial commit\"\ncd ..\n</code></pre> <p>Update <code>config.yaml</code>:</p> <pre><code>KB_PATH: ./my-knowledge-base\nKB_GIT_ENABLED: true\nKB_GIT_AUTO_PUSH: false  # No remote yet\n</code></pre>"},{"location":"getting-started/first-steps/#option-b-github-knowledge-base","title":"Option B: GitHub Knowledge Base","text":"<ol> <li>Create a new repository on GitHub (e.g., <code>my-kb</code>)</li> <li>Clone it locally:</li> </ol> <pre><code>git clone https://github.com/yourusername/my-kb.git\n</code></pre> <ol> <li>Update <code>config.yaml</code>:</li> </ol> <pre><code>KB_PATH: ./my-kb\nKB_GIT_ENABLED: true\nKB_GIT_AUTO_PUSH: true\nKB_GIT_REMOTE: origin\nKB_GIT_BRANCH: main\n</code></pre>"},{"location":"getting-started/first-steps/#4-start-the-bot","title":"4. Start the Bot","text":"<pre><code>poetry run python main.py\n</code></pre> <p>Expected output:</p> <pre><code>INFO - Starting tg-note bot...\nINFO - Configuration validated successfully\nINFO - Processing tracker initialized\nINFO - Repository manager initialized\nINFO - Telegram bot started successfully\nINFO - Bot initialization completed\nINFO - Press Ctrl+C to stop\n</code></pre>"},{"location":"getting-started/first-steps/#5-initialize-bot-in-telegram","title":"5. Initialize Bot in Telegram","text":"<p>Open Telegram, find your bot, and send:</p> <pre><code>/start\n</code></pre> <p>Bot should reply with a welcome message!</p>"},{"location":"getting-started/first-steps/#6-configure-knowledge-base-in-telegram","title":"6. Configure Knowledge Base in Telegram","text":"<p>Tell the bot where to save notes:</p> <pre><code>/setkb my-notes\n</code></pre> <p>Or use a GitHub repo:</p> <pre><code>/setkb https://github.com/yourusername/my-kb\n</code></pre>"},{"location":"getting-started/first-steps/#7-send-your-first-message","title":"7. Send Your First Message","text":"<p>Send or forward any message to the bot. Examples:</p> <ul> <li>Plain text message</li> <li>Forwarded message from a channel</li> <li>Article link</li> <li>Multiple messages</li> </ul> <p>The bot will process and save it to your knowledge base!</p>"},{"location":"getting-started/first-steps/#8-check-your-knowledge-base","title":"8. Check Your Knowledge Base","text":"<p>Look in your KB directory:</p> <pre><code>ls -la my-knowledge-base/\n</code></pre> <p>You should see:</p> <pre><code>topics/\n\u251c\u2500\u2500 general/\n\u2502   \u2514\u2500\u2500 2025-10-03-your-first-note.md\n\u2514\u2500\u2500 index.md\n</code></pre>"},{"location":"getting-started/first-steps/#9-verify-git-commits","title":"9. Verify Git Commits","text":"<pre><code>cd my-knowledge-base\ngit log --oneline\n</code></pre> <p>You should see automatic commits!</p>"},{"location":"getting-started/first-steps/#10-explore-bot-commands","title":"10. Explore Bot Commands","text":"<p>Try these commands:</p> <pre><code>/help      # Show all commands\n/kb        # Show KB info\n/status    # Show statistics\n/settings  # Open settings menu\n</code></pre>"},{"location":"getting-started/first-steps/#next-steps","title":"Next Steps","text":"<ul> <li> <p> Learn All Commands</p> <p>Master all bot commands and features</p> <p> Bot Commands</p> </li> <li> <p> Upgrade Your Agent</p> <p>Install Qwen Code CLI for better AI processing</p> <p> Agent Setup</p> </li> <li> <p> Customize Settings</p> <p>Configure bot behavior via Telegram</p> <p> Settings Guide</p> </li> <li> <p> Organize Your KB</p> <p>Learn KB structure and organization</p> <p> KB Setup</p> </li> </ul>"},{"location":"getting-started/first-steps/#common-first-time-issues","title":"Common First-Time Issues","text":""},{"location":"getting-started/first-steps/#bot-not-responding","title":"Bot Not Responding","text":"<ol> <li>Check if bot is running in terminal</li> <li>Verify bot token in <code>.env</code></li> <li>Check logs: <code>tail -f logs/bot.log</code></li> </ol>"},{"location":"getting-started/first-steps/#not-authorized-error","title":"\"Not authorized\" Error","text":"<ul> <li>Wrong bot token</li> <li>Check <code>.env</code> file</li> <li>Restart the bot</li> </ul>"},{"location":"getting-started/first-steps/#kb-not-created","title":"KB Not Created","text":"<ul> <li>Check <code>KB_PATH</code> in config</li> <li>Ensure directory exists</li> <li>Check permissions</li> </ul>"},{"location":"getting-started/first-steps/#messages-not-saved","title":"Messages Not Saved","text":"<ul> <li>Check logs for errors</li> <li>Verify KB setup: <code>/kb</code></li> <li>Check Git status in KB folder</li> </ul>"},{"location":"getting-started/first-steps/#getting-help","title":"Getting Help","text":"<ul> <li>\ud83d\udcd6 Full Documentation</li> <li>\ud83d\udc1b Issue Tracker</li> <li>\ud83d\udcac Discussions</li> </ul>"},{"location":"getting-started/installation/","title":"Installation Guide","text":"<p>Detailed installation instructions for tg-note.</p>"},{"location":"getting-started/installation/#system-requirements","title":"System Requirements","text":""},{"location":"getting-started/installation/#required","title":"Required","text":"<ul> <li>Python 3.11 or higher</li> <li>Poetry - Python dependency manager</li> <li>Git - Version control system</li> <li>Telegram Account - To create and use the bot</li> </ul>"},{"location":"getting-started/installation/#optional","title":"Optional","text":"<ul> <li>Node.js 20+ - Required for <code>qwen_code_cli</code> agent (recommended)</li> <li>Docker - For containerized deployment</li> </ul>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":"Local InstallationDocker Installation <p>Coming Soon</p> <p>Docker support is planned for future releases.</p> <p>For now, please use the local installation method.</p>"},{"location":"getting-started/installation/#1-install-python-311","title":"1. Install Python 3.11+","text":"<p>Check your Python version:</p> <pre><code>python3 --version\n</code></pre> <p>If you need to install Python 3.11+:</p> Ubuntu/DebianmacOSWindows <pre><code>sudo apt update\nsudo apt install python3.11 python3.11-venv python3-pip\n</code></pre> <pre><code>brew install python@3.11\n</code></pre> <p>Download from python.org</p>"},{"location":"getting-started/installation/#2-install-poetry","title":"2. Install Poetry","text":"<pre><code>curl -sSL https://install.python-poetry.org | python3 -\n</code></pre> <p>Or using pipx:</p> <pre><code>pipx install poetry\n</code></pre> <p>Add Poetry to your PATH (if needed):</p> <pre><code>export PATH=\"$HOME/.local/bin:$PATH\"\n</code></pre>"},{"location":"getting-started/installation/#3-clone-the-repository","title":"3. Clone the Repository","text":"<pre><code>git clone https://github.com/ArtyomZemlyak/tg-note.git\ncd tg-note\n</code></pre>"},{"location":"getting-started/installation/#4-install-dependencies","title":"4. Install Dependencies","text":"<pre><code>poetry install\n</code></pre> <p>This creates a virtual environment and installs all required packages.</p>"},{"location":"getting-started/installation/#5-verify-installation","title":"5. Verify Installation","text":"<pre><code>poetry run python -c \"from config import settings; print('Installation successful!')\"\n</code></pre>"},{"location":"getting-started/installation/#optional-dependencies","title":"Optional Dependencies","text":""},{"location":"getting-started/installation/#qwen-code-cli-recommended-for-production","title":"Qwen Code CLI (Recommended for Production)","text":"<p>The Qwen Code CLI agent provides the best AI-powered processing capabilities.</p>"},{"location":"getting-started/installation/#1-install-nodejs-20","title":"1. Install Node.js 20+","text":"Ubuntu/DebianmacOSWindows <pre><code>curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -\nsudo apt-get install -y nodejs\n</code></pre> <pre><code>brew install node@20\n</code></pre> <p>Download from nodejs.org</p>"},{"location":"getting-started/installation/#2-install-qwen-code-cli","title":"2. Install Qwen Code CLI","text":"<pre><code>npm install -g @qwen-code/qwen-code@latest\n</code></pre>"},{"location":"getting-started/installation/#3-verify-installation","title":"3. Verify Installation","text":"<pre><code>qwen --version\n</code></pre>"},{"location":"getting-started/installation/#4-authenticate","title":"4. Authenticate","text":"<pre><code>qwen\n</code></pre> <p>Follow the interactive authentication process. You'll get:</p> <ul> <li>2000 free requests per day</li> <li>60 requests per minute</li> <li>No token limits</li> </ul> <p>Learn more about Qwen Code CLI \u2192</p>"},{"location":"getting-started/installation/#post-installation-setup","title":"Post-Installation Setup","text":""},{"location":"getting-started/installation/#1-create-configuration-files","title":"1. Create Configuration Files","text":"<pre><code># Copy example configuration\ncp config.example.yaml config.yaml\n</code></pre>"},{"location":"getting-started/installation/#2-setup-environment-variables","title":"2. Setup Environment Variables","text":"<p>Create a <code>.env</code> file:</p> <pre><code>touch .env\n</code></pre> <p>Add your credentials:</p> <pre><code># Required\nTELEGRAM_BOT_TOKEN=your_bot_token_here\n\n# Optional - For advanced features\nOPENAI_API_KEY=your_openai_key\nANTHROPIC_API_KEY=your_anthropic_key\n</code></pre> <p>Security</p> <p>Never commit your <code>.env</code> file to version control! It's already in <code>.gitignore</code>, but always double-check.</p>"},{"location":"getting-started/installation/#3-configure-basic-settings","title":"3. Configure Basic Settings","text":"<p>Edit <code>config.yaml</code>:</p> <pre><code># Knowledge Base\nKB_PATH: ./knowledge_base\nKB_GIT_ENABLED: true\nKB_GIT_AUTO_PUSH: true\n\n# Agent Type\nAGENT_TYPE: \"stub\"  # Options: stub, autonomous, qwen_code_cli\n\n# Logging\nLOG_LEVEL: INFO\nLOG_FILE: ./logs/bot.log\n</code></pre> <p>Full configuration guide \u2192</p>"},{"location":"getting-started/installation/#verification","title":"Verification","text":""},{"location":"getting-started/installation/#run-tests","title":"Run Tests","text":"<p>Verify everything is working:</p> <pre><code># Run all tests\npoetry run pytest\n\n# Run with coverage\npoetry run pytest --cov=src --cov-report=html\n\n# Run specific test\npoetry run pytest tests/test_tracker.py -v\n</code></pre>"},{"location":"getting-started/installation/#check-configuration","title":"Check Configuration","text":"<pre><code>poetry run python -c \"from config import settings; print(settings)\"\n</code></pre>"},{"location":"getting-started/installation/#test-bot-connection","title":"Test Bot Connection","text":"<pre><code>poetry run python main.py\n</code></pre> <p>You should see:</p> <pre><code>INFO - Starting tg-note bot...\nINFO - Configuration validated successfully\nINFO - Bot initialization completed\n</code></pre>"},{"location":"getting-started/installation/#directory-structure","title":"Directory Structure","text":"<p>After installation, your directory should look like:</p> <pre><code>tg-note/\n\u251c\u2500\u2500 config/              # Configuration modules\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 bot/            # Telegram bot\n\u2502   \u251c\u2500\u2500 processor/      # Message processing\n\u2502   \u251c\u2500\u2500 agents/         # AI agents\n\u2502   \u251c\u2500\u2500 knowledge_base/ # KB management\n\u2502   \u2514\u2500\u2500 tracker/        # Processing tracker\n\u251c\u2500\u2500 tests/              # Unit tests\n\u251c\u2500\u2500 data/               # Created on first run\n\u251c\u2500\u2500 logs/               # Created on first run\n\u251c\u2500\u2500 config.yaml         # Your configuration\n\u251c\u2500\u2500 .env                # Your credentials\n\u251c\u2500\u2500 pyproject.toml      # Project metadata\n\u251c\u2500\u2500 poetry.lock         # Dependency lock file\n\u2514\u2500\u2500 main.py            # Entry point\n</code></pre>"},{"location":"getting-started/installation/#updating","title":"Updating","text":"<p>To update tg-note to the latest version:</p> <pre><code>git pull origin main\npoetry install\n</code></pre> <p>To update dependencies:</p> <pre><code>poetry update\n</code></pre>"},{"location":"getting-started/installation/#troubleshooting-installation","title":"Troubleshooting Installation","text":""},{"location":"getting-started/installation/#poetry-not-found","title":"Poetry Not Found","text":"<pre><code># Add to PATH\nexport PATH=\"$HOME/.local/bin:$PATH\"\n\n# Make permanent\necho 'export PATH=\"$HOME/.local/bin:$PATH\"' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre>"},{"location":"getting-started/installation/#python-version-issues","title":"Python Version Issues","text":"<pre><code># Use specific Python version with Poetry\npoetry env use python3.11\n\n# Verify\npoetry run python --version\n</code></pre>"},{"location":"getting-started/installation/#permission-errors","title":"Permission Errors","text":"<pre><code># On Linux/macOS\nsudo chown -R $USER:$USER ~/.local\n\n# Or install without sudo\ncurl -sSL https://install.python-poetry.org | python3 - --user\n</code></pre>"},{"location":"getting-started/installation/#virtual-environment-issues","title":"Virtual Environment Issues","text":"<pre><code># Remove and recreate\npoetry env remove python\npoetry install\n</code></pre>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>After successful installation:</p> <ol> <li>Configure the bot</li> <li>Get your Telegram bot token</li> <li>Run the bot</li> <li>Choose your agent</li> </ol>"},{"location":"getting-started/installation/#uninstallation","title":"Uninstallation","text":"<p>To completely remove tg-note:</p> <pre><code># Remove virtual environment\npoetry env remove python\n\n# Remove project directory\ncd ..\nrm -rf tg-note\n\n# Optionally remove Poetry\npipx uninstall poetry\n</code></pre>"},{"location":"getting-started/quick-start/","title":"Quick Start Guide","text":"<p>Get up and running with tg-note in just a few minutes!</p>"},{"location":"getting-started/quick-start/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have:</p> <ul> <li>Python 3.11+ installed</li> <li>Poetry (Python dependency manager)</li> <li>Git installed</li> <li>Telegram Account</li> <li>Node.js 20+ (optional, for qwen_code_cli agent)</li> </ul>"},{"location":"getting-started/quick-start/#installation-steps","title":"Installation Steps","text":""},{"location":"getting-started/quick-start/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/ArtyomZemlyak/tg-note.git\ncd tg-note\n</code></pre>"},{"location":"getting-started/quick-start/#2-install-poetry","title":"2. Install Poetry","text":"<p>If you don't have Poetry installed:</p> <pre><code>curl -sSL https://install.python-poetry.org | python3 -\n# or using pipx:\n# pipx install poetry\n</code></pre>"},{"location":"getting-started/quick-start/#3-install-dependencies","title":"3. Install Dependencies","text":"<pre><code>poetry install\n</code></pre> <p>This will automatically create a virtual environment and install all dependencies.</p>"},{"location":"getting-started/quick-start/#configuration","title":"Configuration","text":""},{"location":"getting-started/quick-start/#1-create-configuration-files","title":"1. Create Configuration Files","text":"<pre><code># Copy example configuration\ncp config.example.yaml config.yaml\n</code></pre>"},{"location":"getting-started/quick-start/#2-get-telegram-bot-token","title":"2. Get Telegram Bot Token","text":"<ol> <li>Open @BotFather in Telegram</li> <li>Send <code>/newbot</code> and follow instructions</li> <li>Copy the token provided</li> </ol>"},{"location":"getting-started/quick-start/#3-create-env-file","title":"3. Create <code>.env</code> File","text":"<p>Create a <code>.env</code> file with your credentials:</p> <pre><code>cat &gt; .env &lt;&lt; EOF\n# Required: Telegram Bot Token\nTELEGRAM_BOT_TOKEN=your_bot_token_here\n\n# Optional: API keys for advanced agents\n# OPENAI_API_KEY=your_openai_key\n# ANTHROPIC_API_KEY=your_anthropic_key\nEOF\n</code></pre>"},{"location":"getting-started/quick-start/#4-configure-configyaml","title":"4. Configure <code>config.yaml</code>","text":"<p>Edit <code>config.yaml</code> with your basic settings:</p> <pre><code># Knowledge Base Settings\nKB_PATH: ./knowledge_base\nKB_GIT_ENABLED: true\nKB_GIT_AUTO_PUSH: true\nKB_GIT_REMOTE: origin\nKB_GIT_BRANCH: main\n\n# Agent Configuration\nAGENT_TYPE: \"stub\"  # Options: stub, autonomous, qwen_code_cli\n\n# Processing Settings\nMESSAGE_GROUP_TIMEOUT: 30  # seconds\n\n# Logging\nLOG_LEVEL: INFO\nLOG_FILE: ./logs/bot.log\n\n# User Access Control (empty = all users allowed)\nALLOWED_USER_IDS: \"\"\n</code></pre>"},{"location":"getting-started/quick-start/#running-the-bot","title":"Running the Bot","text":""},{"location":"getting-started/quick-start/#start-the-bot","title":"Start the Bot","text":"<pre><code>poetry run python main.py\n# or activate the virtual environment first:\npoetry shell\npython main.py\n</code></pre> <p>You should see:</p> <pre><code>INFO - Starting tg-note bot...\nINFO - Configuration validated successfully\nINFO - Processing tracker initialized\nINFO - Repository manager initialized\nINFO - Telegram bot started successfully\nINFO - Bot initialization completed\nINFO - Press Ctrl+C to stop\n</code></pre>"},{"location":"getting-started/quick-start/#configure-knowledge-base-in-telegram","title":"Configure Knowledge Base in Telegram","text":"<p>Open your bot in Telegram and:</p> <pre><code>/start                    # Initialize the bot\n/setkb my-notes           # Create local knowledge base\n# or\n/setkb https://github.com/username/kb-repo  # Use GitHub repository\n</code></pre>"},{"location":"getting-started/quick-start/#start-sending-messages","title":"Start Sending Messages!","text":"<p>Just forward any message or write text - the bot will automatically process and save it to your knowledge base.</p>"},{"location":"getting-started/quick-start/#stop-the-bot","title":"Stop the Bot","text":"<p>Press <code>Ctrl+C</code> in the terminal.</p>"},{"location":"getting-started/quick-start/#optional-install-qwen-code-cli","title":"Optional: Install Qwen Code CLI","text":"<p>For advanced AI processing, install the Qwen Code CLI agent:</p> <pre><code># Install Node.js 20+ first, then:\nnpm install -g @qwen-code/qwen-code@latest\n\n# Authenticate (2000 free requests/day)\nqwen\n\n# Update config.yaml\nAGENT_TYPE: \"qwen_code_cli\"\n</code></pre> <p>Learn more about Qwen Code CLI \u2192</p>"},{"location":"getting-started/quick-start/#basic-commands","title":"Basic Commands","text":"Command Description Example <code>/start</code> Initialize bot interaction <code>/start</code> <code>/help</code> Display help information <code>/help</code> <code>/setkb &lt;name\\|url&gt;</code> Setup knowledge base <code>/setkb my-notes</code> <code>/kb</code> Show current KB info <code>/kb</code> <code>/status</code> Display processing statistics <code>/status</code> <code>/settings</code> Open interactive settings menu <code>/settings</code> <code>/note</code> Switch to note creation mode <code>/note</code> <code>/ask</code> Switch to question mode <code>/ask</code> <code>/agent</code> Switch to agent mode (full access) <code>/agent</code> <p>Full command reference \u2192</p>"},{"location":"getting-started/quick-start/#working-modes","title":"Working Modes","text":"<p>The bot has three working modes:</p>"},{"location":"getting-started/quick-start/#note-mode-default","title":"\ud83d\udcdd Note Mode (Default)","text":"<p>Analyzes and saves your messages to the knowledge base.</p>"},{"location":"getting-started/quick-start/#ask-mode","title":"\ud83e\udd14 Ask Mode","text":"<p>Answers questions about your knowledge base content.</p>"},{"location":"getting-started/quick-start/#agent-mode","title":"\ud83e\udd16 Agent Mode","text":"<p>Full autonomous access - can answer questions, add/edit content, and restructure the KB.</p> <p>Switch between modes with <code>/note</code>, <code>/ask</code>, or <code>/agent</code> commands.</p>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":"<p>Now that you have tg-note running, explore these topics:</p> <ul> <li> <p> Configuration</p> <p>Learn about all configuration options</p> <p> Configuration Guide</p> </li> <li> <p> User Guide</p> <p>Learn how to use all bot features</p> <p> User Guide</p> </li> <li> <p> Agent System</p> <p>Understand AI agents and choose the right one</p> <p> Agent Overview</p> </li> <li> <p> Knowledge Base</p> <p>Setup and manage your knowledge base</p> <p> KB Setup</p> </li> </ul>"},{"location":"getting-started/quick-start/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/quick-start/#common-issues","title":"Common Issues","text":"<p>TELEGRAM_BOT_TOKEN is required</p> <p>Add your bot token to the <code>.env</code> file</p> <p>Not a git repository</p> <p>Check <code>KB_PATH</code> in config.yaml - it should point to a git repository</p> <p>ModuleNotFoundError</p> <p>Activate the Poetry virtual environment: <code>poetry shell</code></p> <p>Tests not running</p> <p>Install dependencies: <code>poetry install</code></p> <p>Full troubleshooting guide \u2192</p>"},{"location":"getting-started/quick-start/#getting-help","title":"Getting Help","text":"<ul> <li>\ud83d\udcd6 Check the User Guide</li> <li>\ud83d\udc1b Report issues on GitHub</li> <li>\ud83d\udcac Ask questions in Discussions</li> </ul>"},{"location":"reference/api/","title":"Coming Soon","text":"<p>This documentation page is under construction.</p> <p>For now, please refer to the README or check back later.</p>"},{"location":"reference/configuration/","title":"Configuration Reference","text":"<p>Complete reference for all tg-note configuration options.</p>"},{"location":"reference/configuration/#configuration-files","title":"Configuration Files","text":"<p>tg-note uses two configuration files:</p> <ol> <li><code>.env</code> - Sensitive credentials (not committed to git)</li> <li><code>config.yaml</code> - Main configuration (can be committed)</li> </ol> <p>Priority: Environment Variables &gt; <code>.env</code> file &gt; <code>config.yaml</code></p>"},{"location":"reference/configuration/#knowledge-base-settings","title":"Knowledge Base Settings","text":""},{"location":"reference/configuration/#kb_path","title":"KB_PATH","text":"<p>Path to knowledge base directory.</p> <ul> <li>Type: <code>str</code></li> <li>Default: <code>./knowledge_base</code></li> <li>Example: <code>./my-notes</code> or <code>/path/to/kb</code></li> </ul>"},{"location":"reference/configuration/#kb_git_enabled","title":"KB_GIT_ENABLED","text":"<p>Enable Git integration for knowledge base.</p> <ul> <li>Type: <code>bool</code></li> <li>Default: <code>true</code></li> <li>Description: If enabled, changes are committed to git</li> </ul>"},{"location":"reference/configuration/#kb_git_auto_push","title":"KB_GIT_AUTO_PUSH","text":"<p>Automatically push commits to remote repository.</p> <ul> <li>Type: <code>bool</code></li> <li>Default: <code>true</code></li> <li>Requires: <code>KB_GIT_ENABLED=true</code></li> </ul>"},{"location":"reference/configuration/#kb_git_remote","title":"KB_GIT_REMOTE","text":"<p>Git remote name.</p> <ul> <li>Type: <code>str</code></li> <li>Default: <code>origin</code></li> </ul>"},{"location":"reference/configuration/#kb_git_branch","title":"KB_GIT_BRANCH","text":"<p>Git branch name.</p> <ul> <li>Type: <code>str</code></li> <li>Default: <code>main</code></li> </ul>"},{"location":"reference/configuration/#kb_topics_only","title":"KB_TOPICS_ONLY","text":"<p>Restrict agents to work only in <code>topics/</code> folder.</p> <ul> <li>Type: <code>bool</code></li> <li>Default: <code>true</code></li> <li>Description: Prevents agents from modifying meta files like <code>index.md</code>, <code>README.md</code> in KB root</li> <li>When true: Agents can only access <code>KB_PATH/topics/</code></li> <li>When false: Agents have full access to entire KB directory</li> </ul>"},{"location":"reference/configuration/#agent-settings","title":"Agent Settings","text":""},{"location":"reference/configuration/#agent_type","title":"AGENT_TYPE","text":"<p>Type of AI agent to use.</p> <ul> <li>Type: <code>str</code></li> <li>Default: <code>stub</code></li> <li>Options: <code>stub</code>, <code>autonomous</code>, <code>qwen_code_cli</code></li> <li>Description:</li> <li><code>stub</code> - Simple testing agent (no API needed)</li> <li><code>autonomous</code> - Python-based agent with OpenAI-compatible API</li> <li><code>qwen_code_cli</code> - Advanced agent using Qwen Code CLI</li> </ul>"},{"location":"reference/configuration/#agent_model","title":"AGENT_MODEL","text":"<p>Model name for the agent.</p> <ul> <li>Type: <code>str</code></li> <li>Default: <code>qwen-max</code></li> <li>Examples: <code>gpt-4</code>, <code>gpt-3.5-turbo</code>, <code>qwen-max</code>, <code>claude-3-sonnet</code></li> </ul>"},{"location":"reference/configuration/#agent_timeout","title":"AGENT_TIMEOUT","text":"<p>Maximum time (in seconds) for agent operations.</p> <ul> <li>Type: <code>int</code></li> <li>Default: <code>300</code></li> <li>Range: <code>60</code> to <code>600</code></li> </ul>"},{"location":"reference/configuration/#agent_enable_web_search","title":"AGENT_ENABLE_WEB_SEARCH","text":"<p>Enable web search capability for agents.</p> <ul> <li>Type: <code>bool</code></li> <li>Default: <code>true</code></li> </ul>"},{"location":"reference/configuration/#agent_enable_git","title":"AGENT_ENABLE_GIT","text":"<p>Enable Git operations for agents.</p> <ul> <li>Type: <code>bool</code></li> <li>Default: <code>true</code></li> </ul>"},{"location":"reference/configuration/#agent_enable_github","title":"AGENT_ENABLE_GITHUB","text":"<p>Enable GitHub integration for agents.</p> <ul> <li>Type: <code>bool</code></li> <li>Default: <code>true</code></li> </ul>"},{"location":"reference/configuration/#agent_enable_shell","title":"AGENT_ENABLE_SHELL","text":"<p>Enable shell command execution for agents.</p> <ul> <li>Type: <code>bool</code></li> <li>Default: <code>false</code></li> <li>Warning: Security risk if enabled</li> </ul>"},{"location":"reference/configuration/#agent_enable_file_management","title":"AGENT_ENABLE_FILE_MANAGEMENT","text":"<p>Enable file create/edit/delete operations.</p> <ul> <li>Type: <code>bool</code></li> <li>Default: <code>true</code></li> </ul>"},{"location":"reference/configuration/#agent_enable_folder_management","title":"AGENT_ENABLE_FOLDER_MANAGEMENT","text":"<p>Enable folder create/delete/move operations.</p> <ul> <li>Type: <code>bool</code></li> <li>Default: <code>true</code></li> </ul>"},{"location":"reference/configuration/#processing-settings","title":"Processing Settings","text":""},{"location":"reference/configuration/#message_group_timeout","title":"MESSAGE_GROUP_TIMEOUT","text":"<p>Time (in seconds) to wait for related messages before processing.</p> <ul> <li>Type: <code>int</code></li> <li>Default: <code>30</code></li> <li>Description: Bot groups consecutive messages within this timeout</li> </ul>"},{"location":"reference/configuration/#processed_log_path","title":"PROCESSED_LOG_PATH","text":"<p>Path to processed messages log file.</p> <ul> <li>Type: <code>str</code></li> <li>Default: <code>./data/processed.json</code></li> </ul>"},{"location":"reference/configuration/#logging-settings","title":"Logging Settings","text":""},{"location":"reference/configuration/#log_level","title":"LOG_LEVEL","text":"<p>Logging level.</p> <ul> <li>Type: <code>str</code></li> <li>Default: <code>INFO</code></li> <li>Options: <code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code>, <code>CRITICAL</code></li> </ul>"},{"location":"reference/configuration/#log_file","title":"LOG_FILE","text":"<p>Path to log file.</p> <ul> <li>Type: <code>str</code></li> <li>Default: <code>./logs/bot.log</code></li> </ul>"},{"location":"reference/configuration/#security-settings","title":"Security Settings","text":""},{"location":"reference/configuration/#allowed_user_ids","title":"ALLOWED_USER_IDS","text":"<p>Comma-separated list of allowed Telegram user IDs.</p> <ul> <li>Type: <code>str</code></li> <li>Default: <code>\"\"</code> (empty = all users allowed)</li> <li>Example: <code>\"123456789,987654321\"</code></li> </ul>"},{"location":"reference/configuration/#environment-variables-env","title":"Environment Variables (.env)","text":""},{"location":"reference/configuration/#required","title":"Required","text":"<pre><code>TELEGRAM_BOT_TOKEN=your_bot_token_here\n</code></pre>"},{"location":"reference/configuration/#optional-api-keys","title":"Optional API Keys","text":"<pre><code># OpenAI (for autonomous agent)\nOPENAI_API_KEY=sk-...\nOPENAI_BASE_URL=https://api.openai.com/v1  # Optional, for custom endpoints\n\n# Qwen\nQWEN_API_KEY=your_qwen_key\n\n# Anthropic\nANTHROPIC_API_KEY=sk-ant-...\n\n# GitHub\nGITHUB_TOKEN=ghp_...\n</code></pre>"},{"location":"reference/configuration/#example-configuration","title":"Example Configuration","text":""},{"location":"reference/configuration/#minimal-setup-stub-agent","title":"Minimal Setup (Stub Agent)","text":"<pre><code># config.yaml\nKB_PATH: ./knowledge_base\nKB_GIT_ENABLED: true\nKB_GIT_AUTO_PUSH: false\nAGENT_TYPE: \"stub\"\nLOG_LEVEL: INFO\n</code></pre> <pre><code># .env\nTELEGRAM_BOT_TOKEN=your_token\n</code></pre>"},{"location":"reference/configuration/#production-setup-qwen-code-cli","title":"Production Setup (Qwen Code CLI)","text":"<pre><code># config.yaml\nKB_PATH: /data/knowledge_base\nKB_GIT_ENABLED: true\nKB_GIT_AUTO_PUSH: true\nKB_GIT_REMOTE: origin\nKB_GIT_BRANCH: main\nKB_TOPICS_ONLY: true\n\nAGENT_TYPE: \"qwen_code_cli\"\nAGENT_TIMEOUT: 300\nAGENT_ENABLE_WEB_SEARCH: true\nAGENT_ENABLE_GIT: true\nAGENT_ENABLE_GITHUB: true\nAGENT_ENABLE_SHELL: false\nAGENT_ENABLE_FILE_MANAGEMENT: true\nAGENT_ENABLE_FOLDER_MANAGEMENT: true\n\nMESSAGE_GROUP_TIMEOUT: 30\nLOG_LEVEL: INFO\nLOG_FILE: /var/log/tg-note/bot.log\n\nALLOWED_USER_IDS: \"123456789\"\n</code></pre> <pre><code># .env\nTELEGRAM_BOT_TOKEN=your_production_token\nGITHUB_TOKEN=ghp_your_github_token\n</code></pre>"},{"location":"reference/configuration/#development-setup-autonomous-agent","title":"Development Setup (Autonomous Agent)","text":"<pre><code># config.yaml\nKB_PATH: ./test_kb\nKB_GIT_ENABLED: true\nKB_GIT_AUTO_PUSH: false\nKB_TOPICS_ONLY: false\n\nAGENT_TYPE: \"autonomous\"\nAGENT_MODEL: \"gpt-3.5-turbo\"\nAGENT_TIMEOUT: 200\nAGENT_ENABLE_WEB_SEARCH: true\nAGENT_ENABLE_FILE_MANAGEMENT: true\n\nMESSAGE_GROUP_TIMEOUT: 10\nLOG_LEVEL: DEBUG\n</code></pre> <pre><code># .env\nTELEGRAM_BOT_TOKEN=your_dev_token\nOPENAI_API_KEY=sk-...\n</code></pre>"},{"location":"reference/configuration/#see-also","title":"See Also","text":"<ul> <li>Quick Start Guide</li> <li>Settings Management</li> <li>Agent Overview</li> </ul>"},{"location":"reference/faq/","title":"Coming Soon","text":"<p>This documentation page is under construction.</p> <p>For now, please refer to the README or check back later.</p>"},{"location":"reference/overview/","title":"Coming Soon","text":"<p>This documentation page is under construction.</p> <p>For now, please refer to the README or check back later.</p>"},{"location":"reference/troubleshooting/","title":"Coming Soon","text":"<p>This documentation page is under construction.</p> <p>For now, please refer to the README or check back later.</p>"},{"location":"user-guide/bot-commands/","title":"Bot Commands","text":"<p>Complete reference for all tg-note bot commands.</p>"},{"location":"user-guide/bot-commands/#working-modes","title":"Working Modes","text":"<p>The bot has three working modes that you can switch between:</p>"},{"location":"user-guide/bot-commands/#note-note-creation-mode-default","title":"/note - Note Creation Mode (Default)","text":"<p>Switches the bot to knowledge base creation mode.</p> <p>Usage: <pre><code>/note\n</code></pre></p> <p>Response: <pre><code>\ud83d\udcdd \u0420\u0435\u0436\u0438\u043c \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0431\u0430\u0437\u044b \u0437\u043d\u0430\u043d\u0438\u0439 \u0430\u043a\u0442\u0438\u0432\u0438\u0440\u043e\u0432\u0430\u043d!\n\n\u0422\u0435\u043f\u0435\u0440\u044c \u0432\u0430\u0448\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0431\u0443\u0434\u0443\u0442 \u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0432 \u0431\u0430\u0437\u0443 \u0437\u043d\u0430\u043d\u0438\u0439.\n\u041e\u0442\u043f\u0440\u0430\u0432\u044c\u0442\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0440\u0435\u043f\u043e\u0441\u0442 \u0438\u043b\u0438 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438.\n\n\u0414\u043b\u044f \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0432 \u0440\u0435\u0436\u0438\u043c \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 /ask\n</code></pre></p> <p>What it does: - Bot analyzes incoming messages - Creates structured notes in knowledge base - Automatically categorizes content - Saves to Git repository</p>"},{"location":"user-guide/bot-commands/#ask-question-mode","title":"/ask - Question Mode","text":"<p>Switches the bot to question mode for querying your knowledge base.</p> <p>Usage: <pre><code>/ask\n</code></pre></p> <p>Requirements: - Knowledge base must be set up via <code>/setkb</code></p> <p>Response: <pre><code>\ud83e\udd14 \u0420\u0435\u0436\u0438\u043c \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u0432 \u043f\u043e \u0431\u0430\u0437\u0435 \u0437\u043d\u0430\u043d\u0438\u0439 \u0430\u043a\u0442\u0438\u0432\u0438\u0440\u043e\u0432\u0430\u043d!\n\n\u0422\u0435\u043f\u0435\u0440\u044c \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0437\u0430\u0434\u0430\u0432\u0430\u0442\u044c \u0432\u043e\u043f\u0440\u043e\u0441\u044b \u0430\u0433\u0435\u043d\u0442\u0443 \u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u043c\u0443 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u044b \u0437\u043d\u0430\u043d\u0438\u0439.\n\u0410\u0433\u0435\u043d\u0442 \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043a\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0432 \u0431\u0430\u0437\u0435 \u0438 \u043e\u0442\u0432\u0435\u0447\u0430\u0442\u044c \u043d\u0430 \u0432\u0430\u0448\u0438 \u0432\u043e\u043f\u0440\u043e\u0441\u044b.\n\n\u0414\u043b\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0442\u0430 \u0432 \u0440\u0435\u0436\u0438\u043c \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0437\u0430\u043c\u0435\u0442\u043e\u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 /note\n\u0414\u043b\u044f \u043f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0432 \u0440\u0435\u0436\u0438\u043c \u0430\u0433\u0435\u043d\u0442\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 /agent\n</code></pre></p> <p>What it does: - Accepts questions about knowledge base content - Agent searches for relevant information using KB reading tools - Provides answers based on found content - Shows sources of information</p> <p>Example interaction: <pre><code>User: /ask\nBot: \ud83e\udd14 \u0420\u0435\u0436\u0438\u043c \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u0432 \u043f\u043e \u0431\u0430\u0437\u0435 \u0437\u043d\u0430\u043d\u0438\u0439 \u0430\u043a\u0442\u0438\u0432\u0438\u0440\u043e\u0432\u0430\u043d!\n\nUser: \u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 GPT-4?\nBot: \ud83d\udd0d \u0418\u0449\u0443 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0432 \u0431\u0430\u0437\u0435 \u0437\u043d\u0430\u043d\u0438\u0439...\n     \ud83d\udca1 \u041e\u0442\u0432\u0435\u0442:\n\n     GPT-4 - \u044d\u0442\u043e \u0431\u043e\u043b\u044c\u0448\u0430\u044f \u044f\u0437\u044b\u043a\u043e\u0432\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u043e\u0442 OpenAI...\n\n     \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0438:\n     - ai/models/gpt4.md\n     - ai/multimodal/vision.md\n</code></pre></p>"},{"location":"user-guide/bot-commands/#agent-agent-mode-full-access","title":"/agent - Agent Mode (Full Access)","text":"<p>Switches the bot to agent mode with full autonomous capabilities.</p> <p>Usage: <pre><code>/agent\n</code></pre></p> <p>Requirements: - Knowledge base must be set up via <code>/setkb</code></p> <p>Response: <pre><code>\ud83e\udd16 \u0420\u0435\u0436\u0438\u043c \u0430\u0433\u0435\u043d\u0442\u0430 \u0430\u043a\u0442\u0438\u0432\u0438\u0440\u043e\u0432\u0430\u043d!\n\n\u0422\u0435\u043f\u0435\u0440\u044c \u0430\u0433\u0435\u043d\u0442 \u043c\u043e\u0436\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043b\u044e\u0431\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0441 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u043e\u0439 \u0437\u043d\u0430\u043d\u0438\u0439:\n\u2022 \u041e\u0442\u0432\u0435\u0447\u0430\u0442\u044c \u043d\u0430 \u0432\u043e\u043f\u0440\u043e\u0441\u044b\n\u2022 \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u043d\u043e\u0432\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e\n\u2022 \u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043c\u0435\u0442\u043a\u0438\n\u2022 \u041f\u0435\u0440\u0435\u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0431\u0430\u0437\u0443 \u0437\u043d\u0430\u043d\u0438\u0439\n\u2022 \u0418 \u043c\u043d\u043e\u0433\u043e\u0435 \u0434\u0440\u0443\u0433\u043e\u0435!\n\n\u041f\u0440\u043e\u0441\u0442\u043e \u043e\u043f\u0438\u0448\u0438\u0442\u0435 \u0447\u0442\u043e \u043d\u0443\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c, \u0438 \u0430\u0433\u0435\u043d\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442 \u0437\u0430\u0434\u0430\u0447\u0443 \u0430\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u043e.\n\n\u041f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u0442\u044c: /note | /ask\n</code></pre></p> <p>What it does: - Accepts any tasks related to knowledge base - Can answer questions (like /ask mode) - Can add/edit/delete/restructure content - Has full autonomous access to KB (restricted to topics/ folder by default) - Shows detailed results with file changes</p> <p>Example interactions:</p> <p>Answering questions: <pre><code>User: \u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 GPT-4?\nBot: \ud83d\udca1 \u041e\u0442\u0432\u0435\u0442:\n     GPT-4 - \u044d\u0442\u043e \u0431\u043e\u043b\u044c\u0448\u0430\u044f \u044f\u0437\u044b\u043a\u043e\u0432\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u043e\u0442 OpenAI...\n</code></pre></p> <p>Adding information: <pre><code>User: \u0414\u043e\u0431\u0430\u0432\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u043e\u0432\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 Gemini 2.0\nBot: \ud83d\udccb \u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043e: \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e Gemini 2.0\n     \ud83d\udcdd \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f:\n       \u2728 \u0421\u043e\u0437\u0434\u0430\u043d\u043e \u0444\u0430\u0439\u043b\u043e\u0432: 1\n         \u2022 ai/models/gemini-2.0.md\n</code></pre></p> <p>Restructuring: <pre><code>User: \u041f\u0435\u0440\u0435\u0438\u043c\u0435\u043d\u0443\u0439 \u043f\u0430\u043f\u043a\u0443 \"ml\" \u0432 \"machine-learning\"\nBot: \ud83d\udccb \u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043e: \u041f\u0430\u043f\u043a\u0430 \u043f\u0435\u0440\u0435\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0430, \u0441\u0441\u044b\u043b\u043a\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u044b\n     \ud83d\udcdd \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f:\n       \ud83d\udcc1 \u0421\u043e\u0437\u0434\u0430\u043d\u043e \u043f\u0430\u043f\u043e\u043a: 1\n         \u2022 machine-learning\n       \u270f\ufe0f \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u043e \u0444\u0430\u0439\u043b\u043e\u0432: 5\n</code></pre></p>"},{"location":"user-guide/bot-commands/#basic-commands","title":"Basic Commands","text":""},{"location":"user-guide/bot-commands/#start","title":"/start","text":"<p>Initialize interaction with the bot.</p> <p>Usage: <pre><code>/start\n</code></pre></p> <p>Response: - Welcome message - Bot introduction - Quick start instructions - Information about working modes</p>"},{"location":"user-guide/bot-commands/#help","title":"/help","text":"<p>Display help information and available commands.</p> <p>Usage: <pre><code>/help\n</code></pre></p> <p>Response: - List of all commands - Brief descriptions - Links to documentation - Working modes information</p>"},{"location":"user-guide/bot-commands/#knowledge-base-commands","title":"Knowledge Base Commands","text":""},{"location":"user-guide/bot-commands/#setkb","title":"/setkb","text":"<p>Setup or change your knowledge base location.</p> <p>Usage: <pre><code>/setkb &lt;name|url&gt;\n</code></pre></p> <p>Examples:</p> <pre><code># Local knowledge base\n/setkb my-notes\n\n# GitHub repository\n/setkb https://github.com/username/kb-repo\n\n# Private repo (configure auth separately)\n/setkb https://github.com/username/private-kb\n</code></pre> <p>What it does: - Creates or connects to a knowledge base - Initializes Git if needed - Sets up directory structure</p>"},{"location":"user-guide/bot-commands/#kb","title":"/kb","text":"<p>Show current knowledge base information.</p> <p>Usage: <pre><code>/kb\n</code></pre></p> <p>Response: - KB path - Git status - Number of files - Last commit info</p>"},{"location":"user-guide/bot-commands/#status","title":"/status","text":"<p>Display processing statistics and current working mode.</p> <p>Usage: <pre><code>/status\n</code></pre></p> <p>Response: - Messages processed - Notes created - Success/failure rate - Agent type in use - Current working mode (Note Creation or Question Mode) - Knowledge base information - Git integration status</p> <p>Example: <pre><code>\ud83d\udcca \u0421\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438\n\n\u0412\u0441\u0435\u0433\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439: 10\n\u041e\u0436\u0438\u0434\u0430\u0435\u0442 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438: 0\n\u041f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430: 2024-01-01 12:00:00\n\n\u0411\u0430\u0437\u0430 \u0437\u043d\u0430\u043d\u0438\u0439: my-notes (local)\nGit \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f: \u0412\u043a\u043b\u044e\u0447\u0435\u043d\u0430\n\n\ud83d\udcdd \u0422\u0435\u043a\u0443\u0449\u0438\u0439 \u0440\u0435\u0436\u0438\u043c: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0430\u0437\u044b \u0437\u043d\u0430\u043d\u0438\u0439\n\u041f\u0435\u0440\u0435\u043a\u043b\u044e\u0447\u0438\u0442\u044c: /note | /ask | /agent\n</code></pre></p>"},{"location":"user-guide/bot-commands/#settings-commands","title":"Settings Commands","text":""},{"location":"user-guide/bot-commands/#settings","title":"/settings","text":"<p>Open interactive settings menu.</p> <p>Usage: <pre><code>/settings\n</code></pre></p> <p>Features: - Browse settings by category - Interactive inline keyboard - Quick toggles for boolean values - Detailed setting information</p> <p>Categories: - \ud83d\udcda Knowledge Base - \ud83e\udd16 Agent Configuration - \u2699\ufe0f Processing - \ud83d\udcdd Logging</p> <p>Learn more \u2192</p>"},{"location":"user-guide/bot-commands/#viewsettings","title":"/viewsettings","text":"<p>View all settings or filtered by category.</p> <p>Usage: <pre><code>/viewsettings [category]\n</code></pre></p> <p>Examples:</p> <pre><code># View all settings\n/viewsettings\n\n# View specific category\n/viewsettings knowledge_base\n/viewsettings agent\n/viewsettings processing\n</code></pre> <p>Response: - Setting name - Current value - Default value - Description</p>"},{"location":"user-guide/bot-commands/#resetsetting","title":"/resetsetting","text":"<p>Reset a setting to its default value.</p> <p>Usage: <pre><code>/resetsetting &lt;name&gt;\n</code></pre></p> <p>Examples:</p> <pre><code>/resetsetting KB_GIT_AUTO_PUSH\n/resetsetting AGENT_TIMEOUT\n/resetsetting LOG_LEVEL\n</code></pre>"},{"location":"user-guide/bot-commands/#kbsettings","title":"/kbsettings","text":"<p>Quick access to Knowledge Base settings.</p> <p>Usage: <pre><code>/kbsettings\n</code></pre></p> <p>Shows: - KB_PATH - KB_GIT_ENABLED - KB_GIT_AUTO_PUSH - KB_GIT_REMOTE - KB_GIT_BRANCH</p>"},{"location":"user-guide/bot-commands/#agentsettings","title":"/agentsettings","text":"<p>Quick access to Agent settings.</p> <p>Usage: <pre><code>/agentsettings\n</code></pre></p> <p>Shows: - AGENT_TYPE - AGENT_MODEL - AGENT_TIMEOUT - AGENT_ENABLE_WEB_SEARCH - AGENT_ENABLE_GIT - AGENT_ENABLE_GITHUB</p>"},{"location":"user-guide/bot-commands/#message-processing","title":"Message Processing","text":""},{"location":"user-guide/bot-commands/#send-text-message","title":"Send Text Message","text":"<p>Simply send any text message to save it.</p> <p>Example: <pre><code>This is an interesting article about AI...\n</code></pre></p> <p>Processing: 1. Message received 2. Analyzed by agent 3. Categorized automatically 4. Saved as Markdown 5. Committed to Git</p>"},{"location":"user-guide/bot-commands/#forward-message","title":"Forward Message","text":"<p>Forward messages from any chat or channel.</p> <p>How: 1. Find message to save 2. Tap Forward 3. Select your tg-note bot</p> <p>Supports: - Channel posts - Group messages - Media with captions - Links and URLs</p>"},{"location":"user-guide/bot-commands/#send-multiple-messages","title":"Send Multiple Messages","text":"<p>Send consecutive messages - they'll be grouped automatically.</p> <p>Example: <pre><code>First message about a topic...\n(Send)\nSecond message with more details...\n(Send)\nThird message with conclusion...\n</code></pre></p> <p>Processing: - Bot waits 30 seconds (configurable) - Groups related messages - Creates single note</p>"},{"location":"user-guide/bot-commands/#send-links","title":"Send Links","text":"<p>Send article links for processing.</p> <p>Example: <pre><code>https://arxiv.org/abs/12345\n</code></pre></p> <p>With Qwen Code CLI: - Fetches article content - Analyzes and summarizes - Extracts key information - Saves structured note</p>"},{"location":"user-guide/bot-commands/#command-reference-table","title":"Command Reference Table","text":"Command Arguments Description Example <code>/start</code> - Initialize bot <code>/start</code> <code>/help</code> - Show help <code>/help</code> <code>/note</code> - Switch to note creation mode <code>/note</code> <code>/ask</code> - Switch to question mode <code>/ask</code> <code>/agent</code> - Switch to agent mode (full access) <code>/agent</code> <code>/setkb</code> <code>&lt;name\\|url&gt;</code> Setup KB <code>/setkb my-notes</code> <code>/kb</code> - Show KB info <code>/kb</code> <code>/status</code> - Show statistics and mode <code>/status</code> <code>/settings</code> - Settings menu <code>/settings</code> <code>/viewsettings</code> <code>[category]</code> View settings <code>/viewsettings agent</code> <code>/resetsetting</code> <code>&lt;name&gt;</code> Reset setting <code>/resetsetting AGENT_TIMEOUT</code> <code>/kbsettings</code> - KB settings <code>/kbsettings</code> <code>/agentsettings</code> - Agent settings <code>/agentsettings</code>"},{"location":"user-guide/bot-commands/#tips-tricks","title":"Tips &amp; Tricks","text":""},{"location":"user-guide/bot-commands/#quick-configuration","title":"Quick Configuration","text":"<pre><code>/settings \u2192 Choose category \u2192 Select setting \u2192 Change value\n</code></pre>"},{"location":"user-guide/bot-commands/#view-settings","title":"View Settings","text":"<pre><code>/viewsettings\n/viewsettings agent\n/viewsettings knowledge_base\n</code></pre>"},{"location":"user-guide/bot-commands/#interactive-changes","title":"Interactive Changes","text":"<pre><code>/settings\n# Navigate through categories\n# Click on setting to change\n# For boolean: Use Enable/Disable buttons\n# For others: Send new value\n</code></pre>"},{"location":"user-guide/bot-commands/#reset-all-individual","title":"Reset All (Individual)","text":"<pre><code>/resetsetting KB_GIT_AUTO_PUSH\n/resetsetting AGENT_TIMEOUT\n/resetsetting MESSAGE_GROUP_TIMEOUT\n</code></pre>"},{"location":"user-guide/bot-commands/#see-also","title":"See Also","text":"<ul> <li>Settings Management Guide</li> <li>Working with Content</li> <li>Knowledge Base Setup</li> </ul>"},{"location":"user-guide/file-format-recognition/","title":"\u0420\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u0435 \u0444\u043e\u0440\u043c\u0430\u0442\u043e\u0432 \u0444\u0430\u0439\u043b\u043e\u0432","text":""},{"location":"user-guide/file-format-recognition/#_2","title":"\u041e\u0431\u0437\u043e\u0440","text":"<p>tg-note \u0442\u0435\u043f\u0435\u0440\u044c \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u0435 \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0444\u043e\u0440\u043c\u0430\u0442\u043e\u0432 \u0444\u0430\u0439\u043b\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 Docling. \u041a\u043e\u0433\u0434\u0430 \u0432\u044b \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0435 \u0444\u0430\u0439\u043b \u0431\u043e\u0442\u0443, \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0438 \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u0443\u0435\u0442 \u0435\u0433\u043e \u0432 \u0432\u0430\u0448\u0443 \u0431\u0430\u0437\u0443 \u0437\u043d\u0430\u043d\u0438\u0439.</p>"},{"location":"user-guide/file-format-recognition/#_3","title":"\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0435 \u0444\u043e\u0440\u043c\u0430\u0442\u044b","text":""},{"location":"user-guide/file-format-recognition/#_4","title":"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b","text":"<ul> <li>PDF (<code>.pdf</code>) - PDF \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b \u0441 \u0442\u0435\u043a\u0441\u0442\u043e\u043c \u0438 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\u043c\u0438</li> <li>Word (<code>.docx</code>) - Microsoft Word \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b</li> <li>PowerPoint (<code>.pptx</code>) - Microsoft PowerPoint \u043f\u0440\u0435\u0437\u0435\u043d\u0442\u0430\u0446\u0438\u0438</li> <li>Excel (<code>.xlsx</code>) - Microsoft Excel \u0442\u0430\u0431\u043b\u0438\u0446\u044b</li> </ul>"},{"location":"user-guide/file-format-recognition/#_5","title":"\u0422\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0435 \u0444\u0430\u0439\u043b\u044b","text":"<ul> <li>Markdown (<code>.md</code>) - Markdown \u0444\u0430\u0439\u043b\u044b</li> <li>HTML (<code>.html</code>) - HTML \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b</li> <li>Plain Text (<code>.txt</code>) - \u041e\u0431\u044b\u0447\u043d\u044b\u0435 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0435 \u0444\u0430\u0439\u043b\u044b</li> </ul>"},{"location":"user-guide/file-format-recognition/#_6","title":"\u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f","text":"<ul> <li>JPEG (<code>.jpg</code>, <code>.jpeg</code>) - JPEG \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f</li> <li>PNG (<code>.png</code>) - PNG \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f</li> <li>TIFF (<code>.tiff</code>) - TIFF \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f</li> </ul>"},{"location":"user-guide/file-format-recognition/#_7","title":"\u041a\u0430\u043a \u044d\u0442\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442","text":""},{"location":"user-guide/file-format-recognition/#_8","title":"\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430","text":"<ol> <li>\u041e\u0442\u043f\u0440\u0430\u0432\u044c\u0442\u0435 \u0444\u0430\u0439\u043b \u0431\u043e\u0442\u0443 (\u043a\u0430\u043a \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0438\u043b\u0438 \u043f\u0435\u0440\u0435\u0441\u043b\u0430\u043d\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435)</li> <li>\u0411\u043e\u0442 \u0441\u043a\u0430\u0447\u0438\u0432\u0430\u0435\u0442 \u0444\u0430\u0439\u043b \u0432\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044e</li> <li>Docling \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0444\u0430\u0439\u043b \u0438 \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0435\u0442 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435</li> <li>\u0421\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043a \u0442\u0435\u043a\u0441\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0430\u0433\u0435\u043d\u0442\u043e\u043c</li> <li>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442\u0441\u044f \u0432 \u0431\u0430\u0437\u0443 \u0437\u043d\u0430\u043d\u0438\u0439</li> </ol>"},{"location":"user-guide/file-format-recognition/#_9","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f","text":"<pre><code># \u041f\u0440\u043e\u0441\u0442\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u044c\u0442\u0435 \u0444\u0430\u0439\u043b \u0431\u043e\u0442\u0443\n# \u0411\u043e\u0442 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438:\n# 1. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442 \u0444\u043e\u0440\u043c\u0430\u0442 \u0444\u0430\u0439\u043b\u0430\n# 2. \u0418\u0437\u0432\u043b\u0435\u0447\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435\n# 3. \u041f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e AI \u0430\u0433\u0435\u043d\u0442\u0430\n# 4. \u0421\u043e\u0445\u0440\u0430\u043d\u0438\u0442 \u0432 \u0431\u0430\u0437\u0443 \u0437\u043d\u0430\u043d\u0438\u0439 \u0441 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u043e\u0439\n</code></pre>"},{"location":"user-guide/file-format-recognition/#_10","title":"\u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430","text":""},{"location":"user-guide/file-format-recognition/#_11","title":"\u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u044b","text":"<ol> <li>FileProcessor (<code>src/processor/file_processor.py</code>)</li> <li>\u0423\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u0439 \u0444\u0430\u0439\u043b\u043e\u0432</li> <li>\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 Docling</li> <li>\u0421\u043a\u0430\u0447\u0438\u0432\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u043e\u0432 \u0438\u0437 Telegram</li> <li> <p>\u0412\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u0444\u0430\u0439\u043b\u043e\u0432</p> </li> <li> <p>ContentParser (<code>src/processor/content_parser.py</code>)</p> </li> <li>\u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043d \u043c\u0435\u0442\u043e\u0434\u043e\u043c <code>parse_group_with_files()</code></li> <li>\u0418\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u0443\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0444\u0430\u0439\u043b\u043e\u0432 \u0441 \u0442\u0435\u043a\u0441\u0442\u043e\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f</li> <li> <p>\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0443\u044e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443</p> </li> <li> <p>BotHandlers (<code>src/bot/handlers.py</code>)</p> </li> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043d\u043e\u0432\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0444\u0430\u0439\u043b\u043e\u0432</li> <li>\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b \u0438 \u0444\u043e\u0442\u043e\u0433\u0440\u0430\u0444\u0438\u0438</li> <li>\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043e\u0447\u0438\u0441\u0442\u043a\u0430 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0444\u0430\u0439\u043b\u043e\u0432</li> </ol>"},{"location":"user-guide/file-format-recognition/#_12","title":"\u041f\u0440\u043e\u0446\u0435\u0441\u0441 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Telegram Message\u2502\n\u2502   with File     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502\n         \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Bot Handlers   \u2502\n\u2502 (download file) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502\n         \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 File Processor  \u2502\n\u2502   (Docling)     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502\n         \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Content Parser  \u2502\n\u2502 (merge content) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502\n         \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   AI Agent      \u2502\n\u2502  (analysis)     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502\n         \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Knowledge Base  \u2502\n\u2502    (save)       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/file-format-recognition/#_13","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430","text":""},{"location":"user-guide/file-format-recognition/#_14","title":"\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f","text":"<p>Docling \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043a\u0430\u043a \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c:</p> <pre><code># \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0441 Poetry\npoetry install\n\n# \u0418\u043b\u0438 \u0441 pip\npip install -r requirements.txt\n</code></pre>"},{"location":"user-guide/file-format-recognition/#_15","title":"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438","text":"<p>\u0427\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u0447\u0442\u043e Docling \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e:</p> <pre><code>from src.processor.file_processor import FileProcessor\n\nprocessor = FileProcessor()\nif processor.is_available():\n    print(\"Docling \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d!\")\n    print(f\"\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0435 \u0444\u043e\u0440\u043c\u0430\u0442\u044b: {processor.get_supported_formats()}\")\nelse:\n    print(\"Docling \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d\")\n</code></pre>"},{"location":"user-guide/file-format-recognition/#_16","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f","text":""},{"location":"user-guide/file-format-recognition/#pdf","title":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 PDF \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430","text":"<pre><code>1. \u041e\u0442\u043f\u0440\u0430\u0432\u044c\u0442\u0435 PDF \u0444\u0430\u0439\u043b \u0431\u043e\u0442\u0443\n2. \u0411\u043e\u0442 \u043e\u0442\u0432\u0435\u0442\u0438\u0442: \"\ud83d\udd04 \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435...\"\n3. \u041f\u043e\u0441\u043b\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0432\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0435 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u0441 \u0434\u0435\u0442\u0430\u043b\u044f\u043c\u0438:\n   \u2705 \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043e \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u043e!\n   \ud83d\udcc1 \u0424\u0430\u0439\u043b: research-paper-2024-10-04.md\n   \ud83d\udcc2 \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f: science/research\n   \ud83c\udff7 \u0422\u0435\u0433\u0438: pdf, research, ai\n</code></pre>"},{"location":"user-guide/file-format-recognition/#_17","title":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0441 \u0442\u0435\u043a\u0441\u0442\u043e\u043c","text":"<pre><code>1. \u041e\u0442\u043f\u0440\u0430\u0432\u044c\u0442\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0441\u043a\u0440\u0438\u043d\u0448\u043e\u0442 \u0438\u043b\u0438 \u0444\u043e\u0442\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430)\n2. Docling \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u0442 \u0442\u0435\u043a\u0441\u0442 \u0441 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\n3. \u0422\u0435\u043a\u0441\u0442 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d \u0432 \u0431\u0430\u0437\u0443 \u0437\u043d\u0430\u043d\u0438\u0439\n</code></pre>"},{"location":"user-guide/file-format-recognition/#_18","title":"\u041f\u0430\u043a\u0435\u0442\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0444\u0430\u0439\u043b\u043e\u0432","text":"<pre><code>1. \u041e\u0442\u043f\u0440\u0430\u0432\u044c\u0442\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0444\u0430\u0439\u043b\u043e\u0432 \u043f\u043e\u0434\u0440\u044f\u0434\n2. \u0411\u043e\u0442 \u0441\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u0443\u0435\u0442 \u0438\u0445 (\u0432 \u0442\u0435\u0447\u0435\u043d\u0438\u0435 30 \u0441\u0435\u043a\u0443\u043d\u0434)\n3. \u0412\u0441\u0435 \u0444\u0430\u0439\u043b\u044b \u0431\u0443\u0434\u0443\u0442 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u044b \u0438 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u044b \u0432 \u043e\u0434\u043d\u0443 \u0437\u0430\u043c\u0435\u0442\u043a\u0443\n</code></pre>"},{"location":"user-guide/file-format-recognition/#_19","title":"\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043e\u0448\u0438\u0431\u043e\u043a","text":""},{"location":"user-guide/file-format-recognition/#_20","title":"\u041d\u0435\u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442","text":"<p>\u0415\u0441\u043b\u0438 \u0444\u0430\u0439\u043b \u043d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044f, \u0431\u043e\u0442: - \u0412\u0441\u0435 \u0440\u0430\u0432\u043d\u043e \u043f\u043e\u043f\u044b\u0442\u0430\u0435\u0442\u0441\u044f \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u0442\u0435\u043a\u0441\u0442 (\u0435\u0441\u043b\u0438 \u044d\u0442\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e) - \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f - \u041d\u0435 \u043f\u0440\u0435\u0440\u0432\u0435\u0442 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0432\u0441\u0435\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f</p>"},{"location":"user-guide/file-format-recognition/#_21","title":"\u041e\u0448\u0438\u0431\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0444\u0430\u0439\u043b\u0430","text":"<p>\u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u043e\u0448\u0438\u0431\u043a\u0438 \u043f\u0440\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0444\u0430\u0439\u043b\u0430: - \u041e\u0448\u0438\u0431\u043a\u0430 \u043b\u043e\u0433\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0432 \u0436\u0443\u0440\u043d\u0430\u043b - \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 (\u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e) - \u041e\u0441\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432\u0441\u0435 \u0440\u0430\u0432\u043d\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f</p>"},{"location":"user-guide/file-format-recognition/#_22","title":"\u0412\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b","text":"<p>\u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438: - \u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u0434\u043b\u044f \u0444\u0430\u0439\u043b\u043e\u0432 - \u041e\u0447\u0438\u0449\u0430\u0435\u0442 \u0444\u0430\u0439\u043b\u044b \u043f\u043e\u0441\u043b\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 - \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438 \u043e\u0447\u0438\u0441\u0442\u043a\u0435</p>"},{"location":"user-guide/file-format-recognition/#_23","title":"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438","text":"<p>\u0420\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u0435 \u0444\u043e\u0440\u043c\u0430\u0442\u043e\u0432 \u0444\u0430\u0439\u043b\u043e\u0432 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0431\u0435\u0437 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a. \u041e\u0434\u043d\u0430\u043a\u043e, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c:</p>"},{"location":"user-guide/file-format-recognition/#_24","title":"\u0422\u0430\u0439\u043c\u0430\u0443\u0442 \u0434\u043b\u044f \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439","text":"<pre><code># config.yaml\nMESSAGE_GROUP_TIMEOUT: 30  # \u0441\u0435\u043a\u0443\u043d\u0434\u044b\n</code></pre> <p>\u042d\u0442\u043e \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u0442\u043e, \u043a\u0430\u043a \u0434\u043e\u043b\u0433\u043e \u0431\u043e\u0442 \u0436\u0434\u0435\u0442 \u043f\u0435\u0440\u0435\u0434 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u0439 \u0433\u0440\u0443\u043f\u043f\u044b \u0444\u0430\u0439\u043b\u043e\u0432.</p>"},{"location":"user-guide/file-format-recognition/#_25","title":"\u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u043d\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435","text":""},{"location":"user-guide/file-format-recognition/#_26","title":"\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f","text":"<p>\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c <code>FileProcessor</code> \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u0432 \u0441\u0432\u043e\u0435\u043c \u043a\u043e\u0434\u0435:</p> <pre><code>from pathlib import Path\nfrom src.processor.file_processor import FileProcessor\n\nasync def process_my_file():\n    processor = FileProcessor()\n\n    if not processor.is_available():\n        print(\"Docling \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d\")\n        return\n\n    result = await processor.process_file(Path(\"my_document.pdf\"))\n\n    if result:\n        print(f\"\u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u043e {len(result['text'])} \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432\")\n        print(f\"\u041c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435: {result['metadata']}\")\n        print(f\"\u0422\u0435\u043a\u0441\u0442: {result['text'][:100]}...\")\n</code></pre>"},{"location":"user-guide/file-format-recognition/#_27","title":"\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 \u0430\u0433\u0435\u043d\u0442\u0430\u043c\u0438","text":"<p>\u0421\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0444\u0430\u0439\u043b\u043e\u0432 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043a \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0443 \u0434\u043b\u044f AI \u0430\u0433\u0435\u043d\u0442\u043e\u0432:</p> <pre><code># \u0412 content_parser.py\ncontent = await self.content_parser.parse_group_with_files(group, bot=self.bot)\n\n# content['text'] \u0442\u0435\u043f\u0435\u0440\u044c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442:\n# - \u0422\u0435\u043a\u0441\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\n# - \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435 \u0432\u0441\u0435\u0445 \u043f\u0440\u0438\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u043d\u044b\u0445 \u0444\u0430\u0439\u043b\u043e\u0432\n# - \u041c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u043e\u0432\n</code></pre>"},{"location":"user-guide/file-format-recognition/#_28","title":"\u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c","text":""},{"location":"user-guide/file-format-recognition/#_29","title":"\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f","text":"<ul> <li>\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430: \u0412\u0441\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0441 \u0444\u0430\u0439\u043b\u0430\u043c\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e</li> <li>\u0412\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b: \u0424\u0430\u0439\u043b\u044b \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0438 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0443\u0434\u0430\u043b\u044f\u044e\u0442\u0441\u044f</li> <li>\u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u0430\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430: \u041d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0444\u0430\u0439\u043b\u043e\u0432 \u0432 \u043e\u0434\u043d\u043e\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0438 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e, \u043d\u043e \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e</li> </ul>"},{"location":"user-guide/file-format-recognition/#telegram","title":"\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f Telegram","text":"<ul> <li>\u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u0444\u0430\u0439\u043b\u0430: 20 \u041c\u0411 (\u0434\u043b\u044f \u0431\u043e\u0442\u043e\u0432)</li> <li>\u0424\u0430\u0439\u043b\u044b \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430\u0445 Telegram \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f</li> <li>\u0421\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u0441\u043a\u0430\u0447\u0438\u0432\u0430\u043d\u0438\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0441\u0435\u0442\u0438</li> </ul>"},{"location":"user-guide/file-format-recognition/#_30","title":"\u041e\u0442\u043b\u0430\u0434\u043a\u0430","text":""},{"location":"user-guide/file-format-recognition/#_31","title":"\u041b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","text":"<p>\u0412\u043a\u043b\u044e\u0447\u0438\u0442\u0435 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0435 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u043e\u0442\u043b\u0430\u0434\u043a\u0438:</p> <pre><code># config.yaml\nLOG_LEVEL: DEBUG\n</code></pre> <p>\u042d\u0442\u043e \u043f\u043e\u043a\u0430\u0436\u0435\u0442: - \u041f\u0440\u043e\u0446\u0435\u0441\u0441 \u0441\u043a\u0430\u0447\u0438\u0432\u0430\u043d\u0438\u044f \u0444\u0430\u0439\u043b\u043e\u0432 - \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 Docling - \u041e\u0448\u0438\u0431\u043a\u0438 \u0438 \u043f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u044f - \u041e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043e\u0447\u0438\u0441\u0442\u043a\u0438</p>"},{"location":"user-guide/file-format-recognition/#docling","title":"\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u044b Docling","text":"<pre><code>import logging\nlogging.basicConfig(level=logging.DEBUG)\n\nfrom src.processor.file_processor import FileProcessor\n\nprocessor = FileProcessor()\nprint(f\"Docling \u0434\u043e\u0441\u0442\u0443\u043f\u0435\u043d: {processor.is_available()}\")\nprint(f\"\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0435 \u0444\u043e\u0440\u043c\u0430\u0442\u044b: {processor.get_supported_formats()}\")\n</code></pre>"},{"location":"user-guide/file-format-recognition/#_32","title":"\u0418\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b","text":"<ol> <li>\u0411\u043e\u043b\u044c\u0448\u0438\u0435 \u0444\u0430\u0439\u043b\u044b: \u041e\u0447\u0435\u043d\u044c \u0431\u043e\u043b\u044c\u0448\u0438\u0435 \u0444\u0430\u0439\u043b\u044b (&gt;10 \u041c\u0411) \u043c\u043e\u0433\u0443\u0442 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438</li> <li>\u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043d\u0438\u0437\u043a\u043e\u0433\u043e \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430: OCR \u043c\u043e\u0436\u0435\u0442 \u043d\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0438\u0434\u0435\u0430\u043b\u044c\u043d\u043e \u043d\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\u0445 \u043d\u0438\u0437\u043a\u043e\u0433\u043e \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430</li> <li>\u0421\u043b\u043e\u0436\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0442\u043a\u0430: \u041d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 PDF \u0441 \u0441\u043b\u043e\u0436\u043d\u043e\u0439 \u0432\u0435\u0440\u0441\u0442\u043a\u043e\u0439 \u043c\u043e\u0433\u0443\u0442 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438</li> </ol>"},{"location":"user-guide/file-format-recognition/#_33","title":"\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430","text":"<p>\u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u043f\u043e\u043c\u043e\u0449\u0438: - \ud83d\udcd6 \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f - \ud83d\udc1b \u0421\u043e\u043e\u0431\u0449\u0438\u0442\u044c \u043e\u0431 \u043e\u0448\u0438\u0431\u043a\u0435 - \ud83d\udcac \u041e\u0431\u0441\u0443\u0436\u0434\u0435\u043d\u0438\u044f</p>"},{"location":"user-guide/file-format-recognition/#roadmap","title":"Roadmap","text":"<p>\u041f\u043b\u0430\u043d\u0438\u0440\u0443\u0435\u043c\u044b\u0435 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044f: - \u2705 \u0411\u0430\u0437\u043e\u0432\u0430\u044f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u0444\u0430\u0439\u043b\u043e\u0432 (\u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043e) - \ud83d\udea7 \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u0430\u0443\u0434\u0438\u043e \u0438 \u0432\u0438\u0434\u0435\u043e \u0444\u0430\u0439\u043b\u043e\u0432 - \ud83d\udccb \u0423\u043b\u0443\u0447\u0448\u0435\u043d\u043d\u043e\u0435 \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446 - \ud83d\udccb \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u0430\u0440\u0445\u0438\u0432\u043e\u0432 (.zip, .tar.gz) - \ud83d\udccb Batch processing \u0434\u043b\u044f \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430 \u0444\u0430\u0439\u043b\u043e\u0432 - \ud83d\udccb \u041a\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0445 \u0444\u0430\u0439\u043b\u043e\u0432</p>"},{"location":"user-guide/knowledge-base-setup/","title":"Knowledge Base Setup","text":"<p>Setup and manage your knowledge base.</p>"},{"location":"user-guide/knowledge-base-setup/#creating-a-knowledge-base","title":"Creating a Knowledge Base","text":""},{"location":"user-guide/knowledge-base-setup/#option-1-local-kb-via-bot","title":"Option 1: Local KB (via bot)","text":"<p>Recommended: create and initialize a local KB directly from Telegram using the command:</p> <pre><code>/setkb my-kb\n</code></pre> <p>This will create a new KB under the bot's KB root and initialize Git.</p> <p>Alternatively, you can prepare one manually:</p> <pre><code>mkdir my-kb\ncd my-kb\ngit init\ngit commit --allow-empty -m \"Initial commit\"\n</code></pre> <p>Configure in <code>config.yaml</code>:</p> <pre><code>KB_PATH: ./my-kb\nKB_GIT_ENABLED: true\nKB_GIT_AUTO_PUSH: false\n</code></pre>"},{"location":"user-guide/knowledge-base-setup/#option-2-github-kb","title":"Option 2: GitHub KB","text":"<ol> <li>Create repo on GitHub</li> <li>Clone locally</li> <li>Configure path or simply use the Telegram command:</li> </ol> <pre><code>/setkb https://github.com/yourusername/my-kb\n</code></pre> <p>Alternatively, configure the path manually:</p> <pre><code>KB_PATH: ./my-kb\nKB_GIT_ENABLED: true\nKB_GIT_AUTO_PUSH: true\nKB_GIT_REMOTE: origin\nKB_GIT_BRANCH: main\n</code></pre>"},{"location":"user-guide/knowledge-base-setup/#kb-structure","title":"KB Structure","text":"<pre><code>knowledge_base/\n\u251c\u2500\u2500 topics/           # Categorized notes\n\u2502   \u251c\u2500\u2500 ai/\n\u2502   \u251c\u2500\u2500 biology/\n\u2502   \u251c\u2500\u2500 physics/\n\u2502   \u2514\u2500\u2500 tech/\n\u251c\u2500\u2500 attachments/      # Media files\n\u2514\u2500\u2500 index.md          # KB index\n</code></pre>"},{"location":"user-guide/knowledge-base-setup/#git-integration","title":"Git Integration","text":"<p>Enable Git operations:</p> <pre><code>KB_GIT_ENABLED: true\nKB_GIT_AUTO_PUSH: true\n</code></pre> <p>Every note is automatically: - Added to Git - Committed with message - Pushed to remote (if enabled)</p>"},{"location":"user-guide/knowledge-base-setup/#see-also","title":"See Also","text":"<ul> <li>Bot Commands</li> <li>Working with Content</li> </ul>"},{"location":"user-guide/mcp-server-management/","title":"MCP Server Management via Telegram Bot","text":"<p>This guide explains how to manage MCP (Model Context Protocol) server configurations through the Telegram bot.</p>"},{"location":"user-guide/mcp-server-management/#overview","title":"Overview","text":"<p>You can add, list, enable, disable, and delete MCP server configurations directly through Telegram commands. This makes it easy to manage your MCP servers without editing configuration files manually.</p>"},{"location":"user-guide/mcp-server-management/#commands","title":"Commands","text":""},{"location":"user-guide/mcp-server-management/#add-a-new-mcp-server","title":"Add a New MCP Server","text":"<p>Command: <code>/addmcpserver</code></p> <p>You can add a new MCP server configuration by sending a JSON configuration:</p> <pre><code>/addmcpserver\n</code></pre> <p>The bot will prompt you to send the JSON configuration. Example:</p> <pre><code>{\n  \"name\": \"my-mcp-server\",\n  \"description\": \"My custom MCP server\",\n  \"command\": \"python3\",\n  \"args\": [\"-m\", \"my_package.server\"],\n  \"env\": {\n    \"API_KEY\": \"your-api-key\"\n  },\n  \"enabled\": true\n}\n</code></pre> <p>Alternatively, you can send the JSON directly with the command:</p> <pre><code>/addmcpserver {\"name\": \"my-server\", \"description\": \"Test server\", \"command\": \"python3\", \"args\": [\"-m\", \"test\"], \"enabled\": true}\n</code></pre>"},{"location":"user-guide/mcp-server-management/#required-fields","title":"Required Fields","text":"<ul> <li><code>name</code> - Unique server name (used as identifier)</li> <li><code>description</code> - Human-readable description</li> <li><code>command</code> - Executable command (e.g., \"python3\", \"node\", \"npx\")</li> <li><code>args</code> - Command-line arguments (array of strings)</li> </ul>"},{"location":"user-guide/mcp-server-management/#optional-fields","title":"Optional Fields","text":"<ul> <li><code>env</code> - Environment variables (object with key-value pairs)</li> <li><code>working_dir</code> - Working directory for the server</li> <li><code>enabled</code> - Whether to enable immediately (default: true)</li> </ul>"},{"location":"user-guide/mcp-server-management/#list-all-mcp-servers","title":"List All MCP Servers","text":"<p>Command: <code>/listmcpservers</code></p> <p>Shows all registered MCP servers with their current status (enabled/disabled). You can also enable/disable servers directly from the interactive buttons.</p>"},{"location":"user-guide/mcp-server-management/#mcp-status-summary","title":"MCP Status Summary","text":"<p>Command: <code>/mcpstatus</code></p> <p>Shows a quick summary: - Total number of servers - Number of enabled servers - Number of disabled servers</p>"},{"location":"user-guide/mcp-server-management/#enable-an-mcp-server","title":"Enable an MCP Server","text":"<p>Command: <code>/enablemcp &lt;server_name&gt;</code></p> <p>Example: <pre><code>/enablemcp my-mcp-server\n</code></pre></p> <p>This activates the specified MCP server, making it available for use.</p>"},{"location":"user-guide/mcp-server-management/#disable-an-mcp-server","title":"Disable an MCP Server","text":"<p>Command: <code>/disablemcp &lt;server_name&gt;</code></p> <p>Example: <pre><code>/disablemcp my-mcp-server\n</code></pre></p> <p>This deactivates the specified MCP server without deleting its configuration.</p>"},{"location":"user-guide/mcp-server-management/#remove-an-mcp-server","title":"Remove an MCP Server","text":"<p>Command: <code>/removemcp &lt;server_name&gt;</code></p> <p>Example: <pre><code>/removemcp my-mcp-server\n</code></pre></p> <p>\u26a0\ufe0f Warning: This permanently deletes the server configuration. The bot will ask for confirmation before deletion.</p>"},{"location":"user-guide/mcp-server-management/#configuration-storage","title":"Configuration Storage","text":"<p>MCP server configurations are stored as JSON files in the <code>data/mcp_servers/</code> directory. Each server has its own <code>.json</code> file named after the server name.</p> <p>Example file structure: <pre><code>data/\n\u2514\u2500\u2500 mcp_servers/\n    \u251c\u2500\u2500 example-server.json\n    \u251c\u2500\u2500 my-custom-server.json\n    \u2514\u2500\u2500 memory-agent.json\n</code></pre></p>"},{"location":"user-guide/mcp-server-management/#use-cases","title":"Use Cases","text":""},{"location":"user-guide/mcp-server-management/#adding-a-memory-agent","title":"Adding a Memory Agent","text":"<pre><code>{\n  \"name\": \"memory-agent\",\n  \"description\": \"Personal memory agent for storing and retrieving information\",\n  \"command\": \"npx\",\n  \"args\": [\"-y\", \"@modelcontextprotocol/server-memory\"],\n  \"enabled\": true\n}\n</code></pre>"},{"location":"user-guide/mcp-server-management/#adding-a-github-mcp-server","title":"Adding a GitHub MCP Server","text":"<pre><code>{\n  \"name\": \"github-server\",\n  \"description\": \"GitHub repository access via MCP\",\n  \"command\": \"npx\",\n  \"args\": [\"-y\", \"@modelcontextprotocol/server-github\"],\n  \"env\": {\n    \"GITHUB_TOKEN\": \"your-github-token\"\n  },\n  \"enabled\": true\n}\n</code></pre>"},{"location":"user-guide/mcp-server-management/#adding-a-custom-python-mcp-server","title":"Adding a Custom Python MCP Server","text":"<pre><code>{\n  \"name\": \"my-python-server\",\n  \"description\": \"Custom Python MCP server\",\n  \"command\": \"python3\",\n  \"args\": [\"-m\", \"my_package.mcp_server\"],\n  \"working_dir\": \"/path/to/project\",\n  \"env\": {\n    \"API_KEY\": \"secret-key\",\n    \"DEBUG\": \"true\"\n  },\n  \"enabled\": true\n}\n</code></pre>"},{"location":"user-guide/mcp-server-management/#tips","title":"Tips","text":"<ol> <li> <p>Test servers before enabling - Set <code>\"enabled\": false</code> when adding a new server, test it manually first, then enable it via <code>/enablemcp</code>.</p> </li> <li> <p>Use descriptive names - Use clear, descriptive names for your servers to make management easier.</p> </li> <li> <p>Secure your secrets - Environment variables are stored in the JSON files. Make sure to protect these files and don't commit them to public repositories.</p> </li> <li> <p>Check status regularly - Use <code>/mcpstatus</code> to quickly see which servers are running.</p> </li> <li> <p>Interactive management - The <code>/listmcpservers</code> command provides interactive buttons for quick enable/disable actions.</p> </li> </ol>"},{"location":"user-guide/mcp-server-management/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/mcp-server-management/#server-not-appearing-in-the-list","title":"Server not appearing in the list","text":"<ul> <li>Check that the JSON configuration is valid</li> <li>Verify the server name is unique</li> <li>Check the logs for any error messages</li> </ul>"},{"location":"user-guide/mcp-server-management/#server-fails-to-start","title":"Server fails to start","text":"<ul> <li>Verify the command and arguments are correct</li> <li>Check that all required environment variables are set</li> <li>Ensure the working directory (if specified) exists</li> <li>Check that the executable is in your PATH</li> </ul>"},{"location":"user-guide/mcp-server-management/#cannot-delete-a-server","title":"Cannot delete a server","text":"<ul> <li>Verify you're using the correct server name</li> <li>Check file permissions in the <code>data/mcp_servers/</code> directory</li> </ul>"},{"location":"user-guide/mcp-server-management/#security-notes","title":"Security Notes","text":"<p>\u26a0\ufe0f Important Security Considerations:</p> <ol> <li>Access Control - Only authorized users should be able to add MCP servers, as they can execute arbitrary commands</li> <li>Environment Variables - Be careful with API keys and secrets in environment variables</li> <li>Command Validation - The system doesn't validate commands, so only add trusted MCP servers</li> <li>File Permissions - Ensure the <code>data/mcp_servers/</code> directory has appropriate permissions</li> </ol>"},{"location":"user-guide/mcp-server-management/#see-also","title":"See Also","text":"<ul> <li>MCP Server Registry</li> <li>MCP Tools</li> <li>Bot Commands</li> </ul>"},{"location":"user-guide/settings-management/","title":"Settings Management","text":"<p>Configure tg-note directly from Telegram.</p>"},{"location":"user-guide/settings-management/#overview","title":"Overview","text":"<p>The settings management system allows you to customize bot behavior without editing configuration files. All settings can be changed directly through Telegram commands.</p>"},{"location":"user-guide/settings-management/#features","title":"Features","text":"<ul> <li>\u2705 Interactive UI - Inline keyboards with category navigation</li> <li>\u2705 Type Safety - Automatic validation and conversion</li> <li>\u2705 Per-User - Each user has their own settings</li> <li>\u2705 Auto-Generated - New settings appear automatically</li> <li>\u2705 Secure - Credentials cannot be changed via Telegram</li> </ul>"},{"location":"user-guide/settings-management/#quick-start","title":"Quick Start","text":""},{"location":"user-guide/settings-management/#open-settings-menu","title":"Open Settings Menu","text":"<pre><code>/settings\n</code></pre>"},{"location":"user-guide/settings-management/#view-all-settings","title":"View All Settings","text":"<pre><code>/viewsettings\n</code></pre>"},{"location":"user-guide/settings-management/#change-a-setting","title":"Change a Setting","text":"<p>Use the interactive menu and inline buttons:</p> <pre><code>/settings \u2192 choose category \u2192 select setting \u2192 use buttons or send value\n</code></pre>"},{"location":"user-guide/settings-management/#reset-to-default","title":"Reset to Default","text":"<pre><code>/resetsetting AGENT_TIMEOUT\n</code></pre>"},{"location":"user-guide/settings-management/#settings-categories","title":"Settings Categories","text":""},{"location":"user-guide/settings-management/#knowledge-base","title":"\ud83d\udcda Knowledge Base","text":"<ul> <li><code>KB_PATH</code> - Path to knowledge base</li> <li><code>KB_GIT_ENABLED</code> - Enable Git operations  </li> <li><code>KB_GIT_AUTO_PUSH</code> - Auto-push changes</li> <li><code>KB_GIT_REMOTE</code> - Git remote name</li> <li><code>KB_GIT_BRANCH</code> - Git branch</li> </ul>"},{"location":"user-guide/settings-management/#agent","title":"\ud83e\udd16 Agent","text":"<ul> <li><code>AGENT_TYPE</code> - Agent implementation</li> <li><code>AGENT_MODEL</code> - AI model to use</li> <li><code>AGENT_QWEN_CLI_PATH</code> - Path to qwen CLI executable</li> <li><code>AGENT_INSTRUCTION</code> - Custom instruction for agent</li> <li><code>AGENT_TIMEOUT</code> - Operation timeout</li> <li><code>AGENT_ENABLE_WEB_SEARCH</code> - Enable web search</li> <li><code>AGENT_ENABLE_GIT</code> - Enable Git operations</li> <li><code>AGENT_ENABLE_GITHUB</code> - Enable GitHub API</li> <li><code>AGENT_ENABLE_SHELL</code> - Enable shell commands (\u26a0\ufe0f security risk)</li> <li><code>AGENT_ENABLE_FILE_MANAGEMENT</code> - Enable file operations</li> <li><code>AGENT_ENABLE_FOLDER_MANAGEMENT</code> - Enable folder operations</li> </ul>"},{"location":"user-guide/settings-management/#processing","title":"\u2699\ufe0f Processing","text":"<ul> <li><code>MESSAGE_GROUP_TIMEOUT</code> - Message grouping timeout</li> <li><code>PROCESSED_LOG_PATH</code> - Processing log path</li> </ul>"},{"location":"user-guide/settings-management/#logging","title":"\ud83d\udcdd Logging","text":"<ul> <li><code>LOG_LEVEL</code> - Logging level (DEBUG, INFO, WARNING, ERROR)</li> <li><code>LOG_FILE</code> - Log file path</li> </ul>"},{"location":"user-guide/settings-management/#interactive-menu","title":"Interactive Menu","text":"<p>The <code>/settings</code> command provides:</p> <ol> <li>Category Selection - Browse by category</li> <li>Quick Toggles - One-tap for booleans</li> <li>Setting Details - View descriptions</li> <li>Reset Options - Restore defaults</li> </ol>"},{"location":"user-guide/settings-management/#examples","title":"Examples","text":""},{"location":"user-guide/settings-management/#change-timeout","title":"Change Timeout","text":"<p>Open <code>/settings</code>, navigate to Agent category, select <code>AGENT_TIMEOUT</code>, and set it to <code>600</code>.</p>"},{"location":"user-guide/settings-management/#disable-auto-push","title":"Disable Auto-Push","text":"<p>Open <code>/settings</code>, navigate to Knowledge Base category, and toggle <code>KB_GIT_AUTO_PUSH</code> to off.</p>"},{"location":"user-guide/settings-management/#enable-debug-logging","title":"Enable Debug Logging","text":"<p>Open <code>/settings</code>, navigate to Logging, select <code>LOG_LEVEL</code>, and choose <code>DEBUG</code>.</p>"},{"location":"user-guide/settings-management/#see-also","title":"See Also","text":"<ul> <li>Bot Commands</li> <li>Configuration Guide</li> </ul>"},{"location":"user-guide/working-with-content/","title":"Working with Content","text":"<p>Learn how to work with different types of content in tg-note.</p>"},{"location":"user-guide/working-with-content/#supported-content-types","title":"Supported Content Types","text":"<ul> <li>\u2705 Text messages</li> <li>\u2705 Forwarded messages from channels</li> <li>\u2705 Photos with captions  </li> <li>\u2705 Documents</li> <li>\u2705 Links and URLs</li> <li>\u2705 Multiple consecutive messages</li> </ul>"},{"location":"user-guide/working-with-content/#sending-text-messages","title":"Sending Text Messages","text":"<p>Simply send any text to save it:</p> <pre><code>This is an interesting article about AI...\n</code></pre> <p>The bot will: 1. Receive your message 2. Analyze the content 3. Categorize it 4. Save as Markdown 5. Commit to Git</p>"},{"location":"user-guide/working-with-content/#forwarding-messages","title":"Forwarding Messages","text":"<p>Forward messages from any chat or channel:</p> <ol> <li>Find the message</li> <li>Tap Forward</li> <li>Select your tg-note bot</li> </ol> <p>Works with: - Channel posts - Group messages - Media with captions - Links</p>"},{"location":"user-guide/working-with-content/#sending-multiple-messages","title":"Sending Multiple Messages","text":"<p>Send consecutive messages for automatic grouping:</p> <pre><code>First message...\n(wait)\nSecond message...\n(wait)\nThird message...\n</code></pre> <p>Messages sent within 30 seconds (configurable) are grouped into one note.</p>"},{"location":"user-guide/working-with-content/#sending-links","title":"Sending Links","text":"<p>Send article URLs:</p> <pre><code>https://arxiv.org/abs/12345\n</code></pre> <p>With Qwen Code CLI, the bot will: - Fetch the article - Analyze content - Extract key info - Save structured note</p>"},{"location":"user-guide/working-with-content/#processing-workflow","title":"Processing Workflow","text":"<pre><code>graph LR\n    A[Content] --&gt; B[Analysis]\n    B --&gt; C[Categorization]\n    C --&gt; D[Markdown]\n    D --&gt; E[Git Commit]\n    E --&gt; F[Notification]\n</code></pre>"},{"location":"user-guide/working-with-content/#output-structure","title":"Output Structure","text":"<p>Your KB will have this structure:</p> <pre><code>knowledge_base/\n\u251c\u2500\u2500 topics/\n\u2502   \u251c\u2500\u2500 ai/\n\u2502   \u2502   \u2514\u2500\u2500 2025-10-03-neural-networks.md\n\u2502   \u251c\u2500\u2500 biology/\n\u2502   \u2502   \u2514\u2500\u2500 2025-10-03-crispr.md\n\u2502   \u2514\u2500\u2500 physics/\n\u2502       \u2514\u2500\u2500 2025-10-03-quantum.md\n\u2514\u2500\u2500 index.md\n</code></pre>"},{"location":"user-guide/working-with-content/#see-also","title":"See Also","text":"<ul> <li>Bot Commands</li> <li>Knowledge Base Setup</li> </ul>"}]}