# Dockerfile for MCP Hub Server
# Unified gateway with registry and built-in tools
# Multi-stage build for optimized image size

FROM python:3.11-slim as builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    git \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Create app directory
WORKDIR /app

# Copy dependency files (include README to satisfy pyproject readme)
COPY pyproject.toml poetry.lock* README.md ./

# Install dependencies with Poetry (no virtualenv)
# Install base app with extras for mcp and mem-agent (lightweight - no ML models)
# AICODE-NOTE: mem-agent now uses lightweight dependencies
# Model inference is handled by external containers (vLLM/SGLang/LM Studio)
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir poetry && \
    poetry config virtualenvs.create false && \
    poetry install --no-interaction --no-ansi -E mcp -E mem-agent --no-root

# Install arxiv-mcp-server
RUN pip install --no-cache-dir arxiv-mcp-server

# Runtime stage
FROM python:3.11-slim

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create app directory
WORKDIR /app

# Copy installed packages from builder
COPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Copy application code
COPY . .

# Create necessary directories
RUN mkdir -p /app/data/memory /app/data/arxiv_papers /app/logs

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONPATH=/app

# Expose MCP Hub port
EXPOSE 8765

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8765/health || exit 1

# Run MCP Hub server
CMD ["python", "-m", "src.mcp.mcp_hub_server", "--host", "0.0.0.0", "--port", "8765"]
